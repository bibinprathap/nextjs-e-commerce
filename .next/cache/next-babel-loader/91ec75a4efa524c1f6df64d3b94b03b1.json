{"ast":null,"code":"// third-party\nimport queryString from 'query-string'; // application\n\nimport { shopInitThunk } from '~/store/shop/shopActions';\nexport function parseQueryOptions(query) {\n  const queryObject = queryString.parse(query);\n  const optionValues = {};\n\n  if (typeof queryObject.page === 'string') {\n    optionValues.page = parseFloat(queryObject.page);\n  }\n\n  if (typeof queryObject.limit === 'string') {\n    optionValues.limit = parseFloat(queryObject.limit);\n  }\n\n  if (typeof queryObject.sort === 'string') {\n    optionValues.sort = queryObject.sort;\n  }\n\n  return optionValues;\n}\nexport function parseQueryFilters(query) {\n  const queryObject = queryString.parse(query);\n  const filterValues = {};\n  Object.keys(queryObject).forEach(param => {\n    const value = queryObject[param];\n    const mr = param; //.match(/^filter_([-_A-Za-z0-9]+)$/);\n    // if (!mr || typeof value !== 'string') {\n    //     return;\n    // }\n\n    if (!mr || typeof value !== 'string') {\n      return;\n    }\n\n    const filterSlug = param;\n    filterValues[filterSlug] = value;\n  });\n  return filterValues;\n}\nexport function buildQuery(options, filters) {\n  const params = {};\n\n  if (options.page !== 1) {\n    params.page = options.page;\n  }\n\n  if (options.limit !== 12) {\n    params.limit = options.limit;\n  }\n\n  if (options.sort !== 'default') {\n    params.sort = options.sort;\n  }\n\n  Object.keys(filters).filter(x => x !== 'category' && !!filters[x]).forEach(filterSlug => {\n    if (filterSlug.indexOf('filter_') == -1) params[`filter_${filterSlug}`] = filters[filterSlug];\n  });\n  return queryString.stringify(params, {\n    encode: false\n  });\n}\nexport default async function getShopPageData(context, slug, productsList) {\n  var _context$params;\n\n  const categorySlug = slug || (typeof ((_context$params = context.params) === null || _context$params === void 0 ? void 0 : _context$params.slug) === 'string' ? context.params.slug : null);\n\n  if (typeof context.req.url === 'string') {\n    const query = queryString.stringify(queryString.parseUrl(context.req.url).query);\n    const options = parseQueryOptions(query);\n    const filters = parseQueryFilters(query);\n    const dispatch = context.store.dispatch;\n    await dispatch(shopInitThunk(categorySlug, options, filters, productsList));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}