{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React, { useEffect, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { FormProvider, useForm } from 'react-hook-form'; // application\n\nimport AccountLayout from '~/components/account/AccountLayout';\nimport AddressForm, { getAddressFormDefaultValue } from '~/components/shared/AddressForm';\nimport Checkbox from '~/components/shared/Checkbox';\nimport PageTitle from '~/components/shared/PageTitle';\nimport url from '~/services/url';\nimport { accountApi } from '~/api';\nimport { useAppRouter } from '~/services/router';\nimport { useAsyncAction } from '~/store/hooks';\n\nfunction Page() {\n  const router = useAppRouter();\n  const intl = useIntl();\n  const addressId = router.query.id === 'new' || typeof router.query.id !== 'string' ? null : parseFloat(router.query.id);\n  const formMethods = useForm({\n    defaultValues: {\n      address: getAddressFormDefaultValue(),\n      default: false\n    }\n  });\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = formMethods;\n  const {\n    0: firstOrDefaultAddress,\n    1: setFirstOrDefaultAddress\n  } = useState(false);\n  const [submit, submitInProgress] = useAsyncAction(data => {\n    const addressData = _objectSpread(_objectSpread({}, data.address), {}, {\n      default: data.default || firstOrDefaultAddress\n    });\n\n    let saveMethod;\n\n    if (addressId) {\n      saveMethod = accountApi.editAddress(addressId, addressData);\n    } else {\n      saveMethod = accountApi.addAddress(addressData);\n    }\n\n    return saveMethod.then(() => router.push(url.accountAddresses()));\n  }, [router, addressId, firstOrDefaultAddress]);\n  useEffect(() => {\n    let canceled = false;\n\n    (async () => {\n      const [address, defaultAddress] = await Promise.all([addressId ? accountApi.getAddress(addressId) : Promise.resolve(null), accountApi.getDefaultAddress()]);\n\n      if (canceled) {\n        return;\n      }\n\n      const firstOrDefaultAddress = defaultAddress === null || address !== null && address.default;\n      setFirstOrDefaultAddress(firstOrDefaultAddress);\n      reset({\n        address: getAddressFormDefaultValue(address),\n        default: firstOrDefaultAddress\n      });\n    })();\n\n    return () => {\n      canceled = true;\n    };\n  }, [reset, addressId]);\n  return __jsx(\"div\", {\n    className: \"card\"\n  }, __jsx(PageTitle, null, addressId ? intl.formatMessage({\n    id: 'HEADER_EDIT_ADDRESS'\n  }) : intl.formatMessage({\n    id: 'HEADER_NEW_ADDRESS'\n  })), __jsx(\"div\", {\n    className: \"card-header\"\n  }, __jsx(\"h5\", null, addressId ? __jsx(FormattedMessage, {\n    id: \"HEADER_EDIT_ADDRESS\"\n  }) : __jsx(FormattedMessage, {\n    id: \"HEADER_NEW_ADDRESS\"\n  }))), __jsx(\"div\", {\n    className: \"card-divider\"\n  }), __jsx(\"div\", {\n    className: \"card-body card-body--padding--2\"\n  }, __jsx(\"div\", {\n    className: \"row no-gutters\"\n  }, __jsx(FormProvider, formMethods, __jsx(\"form\", {\n    className: \"col-12 col-lg-10 col-xl-8\",\n    onSubmit: handleSubmit(submit)\n  }, __jsx(AddressForm, {\n    namespace: \"address\",\n    idPrefix: \"address\"\n  }), __jsx(\"div\", {\n    className: \"form-group mt-3\"\n  }, __jsx(\"div\", {\n    className: \"form-check\"\n  }, __jsx(Checkbox, {\n    id: \"address-form-id-default\",\n    name: \"default\",\n    className: \"form-check-input\",\n    disabled: firstOrDefaultAddress,\n    inputRef: register()\n  }), __jsx(\"label\", {\n    htmlFor: \"address-form-id-default\",\n    className: \"form-check-label\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_SET_AS_MY_DEFAULT_ADDRESS_LABEL\"\n  })))), __jsx(\"div\", {\n    className: \"form-group mb-0 pt-3 mt-3\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: classNames('btn', 'btn-primary', {\n      'btn-loading': submitInProgress\n    })\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_SAVE\"\n  }))))))));\n}\n\nPage.Layout = AccountLayout;\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}