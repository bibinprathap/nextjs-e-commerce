{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// react\nimport React, { useEffect, useMemo, useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl'; // application\n\nimport AppImage from '~/components/shared/AppImage';\nimport AppLink from '~/components/shared/AppLink';\nimport AppSlick from '~/components/shared/AppSlick';\nimport Arrow from '~/components/shared/Arrow';\nimport ProductCard from '~/components/shared/ProductCard';\nimport url from '~/services/url';\nimport { baseUrl } from '~/services/utils';\nimport { shopApi } from '~/api';\nconst slickSettings = {\n  dots: false,\n  arrows: false,\n  infinite: true,\n  speed: 400,\n  slidesToShow: 4,\n  slidesToScroll: 4,\n  responsive: [{\n    breakpoint: 1399,\n    settings: {\n      slidesToShow: 3,\n      slidesToScroll: 3\n    }\n  }, {\n    breakpoint: 991,\n    settings: {\n      slidesToShow: 2,\n      slidesToScroll: 2\n    }\n  }, {\n    breakpoint: 459,\n    settings: {\n      slidesToShow: 1,\n      slidesToScroll: 1\n    }\n  }]\n};\nconst excludeElements = ['features', 'list-buttons'];\n\nfunction BlockZone(props) {\n  const intl = useIntl();\n  const {\n    image,\n    mobileImage,\n    categorySlug,\n    blockZoneIdx\n  } = props;\n  const slickRef = useRef(null);\n  const cancelRequestRef = useRef(() => {});\n  const {\n    0: category,\n    1: setCategory\n  } = useState(null);\n  const {\n    0: products,\n    1: setProducts\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: currentTab,\n    1: setCurrentTab\n  } = useState(null);\n  const subs = (category === null || category === void 0 ? void 0 : category.children) || [];\n\n  const handleNextClick = () => {\n    if (slickRef.current) {\n      slickRef.current.slickNext();\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (slickRef.current) {\n      slickRef.current.slickPrev();\n    }\n  };\n\n  const tabs = useMemo(() => [{\n    name: intl.formatMessage({\n      id: 'TEXT_TAB_FEATURED'\n    }),\n    source: () => shopApi.getFeaturedProducts(categorySlug, 6)\n  }, {\n    name: intl.formatMessage({\n      id: 'TEXT_TAB_BESTSELLERS'\n    }),\n    source: () => shopApi.getPopularProducts(categorySlug, 6)\n  }, {\n    name: intl.formatMessage({\n      id: 'TEXT_TAB_TOP_RATED'\n    }),\n    source: () => shopApi.getTopRatedProducts(categorySlug, 6)\n  }], [intl, categorySlug]);\n\n  const load = tab => {\n    cancelRequestRef.current();\n    let canceled = false;\n\n    cancelRequestRef.current = () => {\n      canceled = true;\n    };\n\n    setIsLoading(true);\n    tab.source().then(result => {\n      if (canceled) {\n        return;\n      }\n\n      setIsLoading(false);\n      setProducts(result);\n    });\n  };\n\n  const onTabClick = tab => {\n    setCurrentTab(tab);\n    load(tab);\n  }; // Unmount.\n\n\n  useEffect(() => () => {\n    cancelRequestRef.current();\n  }, []);\n  useEffect(() => {\n    let canceled = false;\n    shopApi.getCategoryBySlug(categorySlug, {\n      depth: 1\n    }).then(result => {\n      if (canceled) {\n        return;\n      }\n\n      setCategory(result);\n    });\n    setCurrentTab(tabs[blockZoneIdx || 0]);\n    load(tabs[blockZoneIdx || 0]);\n    return () => {\n      canceled = true;\n    };\n  }, [tabs, categorySlug]);\n\n  if (!category) {\n    return null;\n  }\n\n  return __jsx(\"div\", {\n    className: \"block block-zone\"\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"div\", {\n    className: \"block-zone__body\"\n  }, __jsx(\"div\", {\n    className: \"block-zone__card category-card category-card--layout--overlay\"\n  }, __jsx(\"div\", {\n    className: \"category-card__body\"\n  }, __jsx(\"div\", {\n    className: \"category-card__overlay-image\"\n  }, __jsx(AppImage, {\n    srcSet: `${baseUrl(mobileImage)} 530w, ${baseUrl(image)} 305w`,\n    src: image,\n    sizes: \"(max-width: 575px) 530px, 305px\"\n  })), __jsx(\"div\", {\n    className: \"category-card__overlay-image category-card__overlay-image--blur\"\n  }, __jsx(AppImage, {\n    srcSet: `${baseUrl(mobileImage)} 530w, ${baseUrl(image)} 305w`,\n    src: image,\n    sizes: \"(max-width: 575px) 530px, 305px\"\n  })), __jsx(\"div\", {\n    className: \"category-card__content\"\n  }, __jsx(\"div\", {\n    className: \"category-card__info\"\n  }, __jsx(\"div\", {\n    className: \"category-card__name\"\n  }, __jsx(AppLink, {\n    href: url.category(category)\n  }, category.name)), __jsx(\"ul\", {\n    className: \"category-card__children\"\n  }, subs.map((sub, subIdx) => __jsx(\"li\", {\n    key: subIdx\n  }, __jsx(AppLink, {\n    href: url.category(sub)\n  }, sub.name)))), __jsx(\"div\", {\n    className: \"category-card__actions\"\n  }, __jsx(AppLink, {\n    href: url.category(category),\n    className: \"btn btn-primary btn-sm\"\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_SHOP_ALL\"\n  }))))))), __jsx(\"div\", {\n    className: \"block-zone__widget\"\n  }, __jsx(\"div\", {\n    className: \"block-zone__widget-header\"\n  }, __jsx(\"div\", {\n    className: \"block-zone__tabs\"\n  }, tabs.map((tab, tabIdx) => __jsx(\"button\", {\n    key: tabIdx,\n    type: \"button\",\n    className: classNames('block-zone__tabs-button', {\n      'block-zone__tabs-button--active': tab === currentTab\n    }),\n    onClick: () => onTabClick(tab)\n  }, tab.name))), __jsx(Arrow, {\n    className: \"block-zone__arrow block-zone__arrow--prev\",\n    direction: \"prev\",\n    onClick: handlePrevClick\n  }), __jsx(Arrow, {\n    className: \"block-zone__arrow block-zone__arrow--next\",\n    direction: \"next\",\n    onClick: handleNextClick\n  })), __jsx(\"div\", {\n    className: \"block-zone__widget-body\"\n  }, __jsx(\"div\", {\n    className: classNames('block-zone__carousel', {\n      'block-zone__carousel--loading': isLoading\n    })\n  }, __jsx(\"div\", {\n    className: \"block-zone__carousel-loader\"\n  }), __jsx(AppSlick, _extends({\n    className: \"block-zone__carousel-slick\",\n    ref: slickRef\n  }, slickSettings), products.map(product => __jsx(\"div\", {\n    key: product.id,\n    className: \"block-zone__carousel-item\"\n  }, __jsx(ProductCard, {\n    product: product,\n    exclude: excludeElements\n  }))))))))));\n}\n\nexport default React.memo(BlockZone);","map":null,"metadata":{},"sourceType":"module"}