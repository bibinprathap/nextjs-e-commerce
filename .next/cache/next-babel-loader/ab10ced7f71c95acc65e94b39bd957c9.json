{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// react\nimport { useEffect, useRef, useState } from 'react'; // third-party\n\nimport { useIntl } from 'react-intl'; // application\n\nimport { vehicleApi } from '~/api';\n\nfunction makeItems(itemsDef) {\n  return itemsDef.map(function (itemDef, index) {\n    return _objectSpread(_objectSpread({}, itemDef), {}, {\n      value: 'none',\n      loading: false,\n      options: [],\n      disabled: index !== 0\n    });\n  });\n}\n\nfunction getItemValue(item) {\n  var itemValue = item.value;\n\n  if (itemValue !== 'none' && item.deserializeOptionFn) {\n    return item.deserializeOptionFn(itemValue, item, []);\n  }\n\n  return itemValue;\n}\n\nfunction getItemValues(items) {\n  return items.reduce(function (acc, prevItem) {\n    return [].concat(_toConsumableArray(acc), [getItemValue(prevItem)]);\n  }, []);\n}\n\nfunction serializeOption(option, item) {\n  if (item.serializeOptionFn) {\n    return item.serializeOptionFn(option, item);\n  }\n\n  return option;\n}\n\nfunction deserializeOption(option, item, items) {\n  if (item.deserializeOptionFn) {\n    return item.deserializeOptionFn(option, item, items);\n  }\n\n  return option;\n}\n\nexport default function useVehicleForm() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var intl = useIntl();\n  var onChange = options.onChange;\n  var cancelPrevRequestRef = useRef(function () {});\n\n  var _useState = useState(makeItems([{\n    key: 'year',\n    label: intl.formatMessage({\n      id: 'INPUT_VEHICLE_YEAR_LABEL'\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_VEHICLE_YEAR_PLACEHOLDER'\n    }),\n    optionsSource: vehicleApi.getYears.bind(vehicleApi),\n    serializeOptionFn: function serializeOptionFn(option) {\n      return option.toString();\n    },\n    deserializeOptionFn: function deserializeOptionFn(option) {\n      return parseFloat(option);\n    }\n  }, {\n    key: 'brand',\n    label: intl.formatMessage({\n      id: 'INPUT_VEHICLE_BRAND_LABEL'\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_VEHICLE_BRAND_PLACEHOLDER'\n    }),\n    optionsSource: vehicleApi.getMakes.bind(vehicleApi)\n  }, {\n    key: 'model',\n    label: intl.formatMessage({\n      id: 'INPUT_VEHICLE_MODEL_LABEL'\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_VEHICLE_MODEL_PLACEHOLDER'\n    }),\n    optionsSource: vehicleApi.getModels.bind(vehicleApi)\n  }, {\n    key: 'engine',\n    label: intl.formatMessage({\n      id: 'INPUT_VEHICLE_ENGINE_LABEL'\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_VEHICLE_ENGINE_PLACEHOLDER'\n    }),\n    optionsSource: vehicleApi.getVehicles.bind(vehicleApi),\n    serializeOptionFn: function serializeOptionFn(option) {\n      return option.engine;\n    },\n    deserializeOptionFn: function deserializeOptionFn(option, item, items) {\n      return _objectSpread(_objectSpread({}, items[3].options.find(function (m) {\n        return m.year == items[0].value && m.make == items[1].value && m.model == items[2].value;\n      })), {}, {\n        engine: option\n      }); //return item.options.find((x) => x.engine === option)!\n    }\n  }])),\n      items = _useState[0],\n      setItems = _useState[1];\n\n  var load = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(items, index) {\n      var canceled, item, args, optionsSource, options;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              cancelPrevRequestRef.current();\n              canceled = false;\n\n              cancelPrevRequestRef.current = function () {\n                canceled = true;\n              };\n\n              setItems(function (prevItems) {\n                return _toConsumableArray(prevItems.map(function (prevItem, prevItemIdx) {\n                  return prevItemIdx !== index ? prevItem : _objectSpread(_objectSpread({}, prevItem), {}, {\n                    loading: true\n                  });\n                }));\n              });\n              item = items[index];\n              args = getItemValues(items.slice(0, index));\n              optionsSource = Promise.resolve([]);\n\n              if (args.length === 0 || args.slice().pop() !== 'none') {\n                optionsSource = item.optionsSource.apply(item, _toConsumableArray(args));\n              }\n\n              _context.next = 10;\n              return optionsSource;\n\n            case 10:\n              options = _context.sent;\n\n              if (!canceled) {\n                _context.next = 13;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 13:\n              setItems(function (prevItems) {\n                return _toConsumableArray(prevItems.map(function (prevItem, prevItemIdx) {\n                  return prevItemIdx !== index ? prevItem : _objectSpread(_objectSpread({}, prevItem), {}, {\n                    options: options,\n                    loading: false\n                  });\n                }));\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function load(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var onItemValueChange = function onItemValueChange(index, value) {\n    var nextItemIdx = index + 1;\n    setItems(function (prevItems) {\n      var resultItems = prevItems;\n      resultItems = _toConsumableArray(resultItems.map(function (prevItem, prevItemIdx) {\n        return prevItemIdx !== index ? prevItem : _objectSpread(_objectSpread({}, prevItem), {}, {\n          value: value\n        });\n      }));\n      resultItems = _toConsumableArray(resultItems.map(function (prevItem, prevItemIdx) {\n        return prevItemIdx <= index ? prevItem : _objectSpread(_objectSpread({}, prevItem), {}, {\n          value: 'none',\n          options: [],\n          disabled: true\n        });\n      }));\n\n      if (value !== 'none' && resultItems[nextItemIdx]) {\n        resultItems = _toConsumableArray(resultItems.map(function (prevItem, prevItemIdx) {\n          return prevItemIdx !== nextItemIdx ? prevItem : _objectSpread(_objectSpread({}, prevItem), {}, {\n            disabled: false\n          });\n        }));\n      }\n\n      return resultItems;\n    });\n\n    if (value === 'none') {\n      if (onChange) {\n        onChange(null);\n      }\n    } else if (onChange) {\n      onChange(deserializeOption(value, items[index], items));\n    }\n  }; // Load items.\n\n\n  useEffect(function () {\n    var prevValue = null;\n\n    for (var i = 0; i < items.length; i += 1) {\n      var _item = items[i];\n\n      if (prevValue !== 'none' && _item.options.length === 0 && !_item.loading) {\n        load(items, i).then();\n        return;\n      }\n\n      prevValue = _item.value;\n    }\n  }, [items]);\n  return {\n    items: items,\n    onItemValueChange: onItemValueChange,\n    serializeOption: serializeOption\n  };\n}","map":null,"metadata":{},"sourceType":"module"}