{"ast":null,"code":"var __jsx = React.createElement;\n// react\nimport React, { useMemo, useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames'; // application\n\nimport AppLink from '~/components/shared/AppLink';\nimport { useGlobalMousedown } from '~/services/hooks';\n\nfunction Indicator(props) {\n  const {\n    icon,\n    href,\n    label,\n    value,\n    counter,\n    trigger = 'none',\n    children,\n    controllerRef\n  } = props;\n  const hasLabel = label !== undefined && label !== null;\n  const hasValue = value !== undefined && value !== null;\n  const buttonType = href !== undefined ? 'link' : 'button';\n  const showCounter = counter !== undefined && counter !== null;\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const rootRef = useRef(null);\n  const controller = useMemo(() => ({\n    close: () => setIsOpen(false)\n  }), [setIsOpen]);\n\n  if (controllerRef) {\n    controllerRef.current = controller;\n  }\n\n  useGlobalMousedown(event => {\n    if (rootRef.current && !rootRef.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  }, [setIsOpen, rootRef]);\n\n  const handleButtonClick = event => {\n    if (trigger === 'click') {\n      event.preventDefault();\n      setIsOpen(prevState => !prevState);\n    }\n  };\n\n  const buttonContent = __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"indicator__icon\"\n  }, icon, showCounter && __jsx(\"span\", {\n    className: \"indicator__counter\"\n  }, counter)), hasLabel && __jsx(\"span\", {\n    className: \"indicator__title\"\n  }, label), hasValue && __jsx(\"span\", {\n    className: \"indicator__value\"\n  }, value));\n\n  const rootClasses = classNames('indicator', `indicator--trigger--${trigger}`, {\n    'indicator--open': isOpen\n  });\n  return __jsx(\"div\", {\n    className: rootClasses,\n    ref: rootRef\n  }, buttonType === 'button' && __jsx(\"button\", {\n    className: \"indicator__button\",\n    type: \"button\",\n    onClick: handleButtonClick\n  }, buttonContent), buttonType === 'link' && __jsx(AppLink, {\n    href: href,\n    className: \"indicator__button\",\n    onClick: handleButtonClick\n  }, buttonContent), __jsx(\"div\", {\n    className: \"indicator__content\"\n  }, children));\n}\n\nexport default Indicator;","map":null,"metadata":{},"sourceType":"module"}