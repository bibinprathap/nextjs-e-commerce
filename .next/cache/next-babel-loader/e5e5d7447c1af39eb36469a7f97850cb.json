{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// application\nimport { addresses, getNextAddressId } from '~/fake-server/database/addresses';\nimport { clone, delayResponse } from '~/fake-server/utils';\nexport function getDefaultAddress() {\n  return Promise.resolve(clone(addresses.find(function (x) {\n    return x[\"default\"];\n  }) || null));\n}\nexport function getAddress(addressId) {\n  return Promise.resolve(clone(addresses.find(function (x) {\n    return x.id === addressId;\n  }) || null));\n}\nexport function getAddresses() {\n  return Promise.resolve(clone(addresses));\n}\nexport function addAddress(data) {\n  var address = _objectSpread({\n    id: getNextAddressId(),\n    firstName: '',\n    lastName: '',\n    company: '',\n    country: '',\n    email: '',\n    phone: '',\n    \"default\": false\n  }, data);\n\n  if (addresses.length < 1) {\n    address[\"default\"] = true;\n  }\n\n  if (address[\"default\"]) {\n    for (var i = 0; i < addresses.length; i += 1) {\n      addresses[i][\"default\"] = false;\n    }\n  }\n\n  addresses.push(address);\n  return delayResponse(Promise.resolve(address));\n} // noinspection DuplicatedCode\n\nexport function editAddress(addressId, data) {\n  var address = addresses.find(function (x) {\n    return x.id === addressId;\n  });\n\n  if (!address) {\n    throw new Error('Address not found');\n  }\n\n  address.firstName = data.firstName;\n  address.lastName = data.lastName;\n  address.company = data.company;\n  address.country = data.country; // address.address1 = data.address1;\n  // address.address2 = data.address2;\n  // address.city = data.city;\n  // address.state = data.state;\n  // address.postcode = data.postcode;\n\n  address.email = data.email;\n  address.phone = data.phone;\n  address[\"default\"] = data[\"default\"];\n\n  if (address[\"default\"]) {\n    for (var i = 0; i < addresses.length; i += 1) {\n      addresses[i][\"default\"] = addresses[i].id === addressId;\n    }\n  }\n\n  return delayResponse(Promise.resolve(address));\n}\nexport function delAddress(addressId) {\n  var index = addresses.findIndex(function (x) {\n    return x.id === addressId;\n  });\n\n  if (index !== -1) {\n    var address = addresses.splice(index, 1)[0];\n\n    if (address[\"default\"] && addresses.length > 0) {\n      addresses[0][\"default\"] = true;\n    }\n  }\n\n  return delayResponse(Promise.resolve());\n}","map":null,"metadata":{},"sourceType":"module"}