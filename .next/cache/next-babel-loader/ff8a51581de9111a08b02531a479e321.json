{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// application\nimport { blogCategoriesTree, shopCategoriesList, shopCategoriesTree } from '~/fake-server/database/categories';\nimport { clone, error } from '~/fake-server/utils';\nexport function prepareCategory(category, depth) {\n  let children;\n\n  if (depth && depth > 0) {\n    children = (category.children || []).map(x => prepareCategory(x, depth - 1));\n  }\n\n  let parent;\n\n  if (category.parent) {\n    parent = prepareCategory(category.parent);\n  } else if (category.parent === null) {\n    parent = null;\n  }\n\n  return JSON.parse(JSON.stringify(_objectSpread(_objectSpread({}, category), {}, {\n    parent,\n    children\n  })));\n}\nexport function getCategoryBySlug(slug, options) {\n  const optionsValue = options || {};\n  const category = shopCategoriesList.find(x => x.slug === slug);\n\n  if (!category) {\n    return error('Page Not Found');\n  }\n\n  return Promise.resolve(prepareCategory(category, optionsValue.depth));\n}\nexport function getCategories(options) {\n  let categories = shopCategoriesTree.slice(0);\n  const depth = (options === null || options === void 0 ? void 0 : options.depth) || 0;\n  const optionParent = options === null || options === void 0 ? void 0 : options.parent;\n  const optionSlugs = options === null || options === void 0 ? void 0 : options.slugs;\n\n  if (optionParent) {\n    const parent = shopCategoriesList.find(x => x.slug === optionParent.slug);\n\n    if (parent) {\n      categories = parent.children || [];\n    }\n  } else if (optionSlugs) {\n    categories = shopCategoriesList.filter(x => optionSlugs.includes(x.slug));\n  }\n\n  categories = categories.map(x => prepareCategory(x, depth));\n  return Promise.resolve(clone(categories));\n}\nexport function getBlogCategories(options) {\n  let categories = blogCategoriesTree.slice(0);\n  const depth = options.depth || 0;\n  categories = categories.map(x => prepareCategory(x, depth));\n  return Promise.resolve(clone(categories));\n}","map":null,"metadata":{},"sourceType":"module"}