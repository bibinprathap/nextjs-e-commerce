{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n// react\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'; // third-party\n\nimport { useDispatch, useSelector } from 'react-redux'; // application\n\nexport function useAppAction(action) {\n  var dispatch = useDispatch();\n  return useCallback(function () {\n    return dispatch(action.apply(void 0, arguments));\n  }, []);\n}\nexport function useAppSelector(selector) {\n  return useSelector(selector);\n}\nexport function useMedia(query) {\n  if (!true) {\n    return false;\n  }\n\n  var media = useMemo(function () {\n    return window.matchMedia(query);\n  }, [query]);\n\n  var _useState = useState(media.matches),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    var onChangeMedia = function onChangeMedia() {\n      setState(media.matches);\n    };\n\n    if (media.addEventListener) {\n      media.addEventListener('change', onChangeMedia);\n    } else {\n      // noinspection JSDeprecatedSymbols\n      media.addListener(onChangeMedia);\n    }\n\n    return function () {\n      if (media.removeEventListener) {\n        media.removeEventListener('change', onChangeMedia);\n      } else {\n        // noinspection JSDeprecatedSymbols\n        media.removeListener(onChangeMedia);\n      }\n    };\n  }, [media]);\n  return state;\n}\nexport function useAsyncAction(action) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var run = useMemo(function () {\n    return function () {\n      if (loading) {\n        return;\n      }\n\n      setLoading(true);\n      action.apply(void 0, arguments).then(function () {\n        setLoading(false);\n      });\n    };\n  }, [loading, setLoading].concat(_toConsumableArray(deps)));\n  return useMemo(function () {\n    return [run, loading];\n  }, [run, loading]);\n}\nexport function useIsUnmountedRef() {\n  var isUnmountedRef = useRef(false);\n  useEffect(function () {\n    isUnmountedRef.current = false;\n    return function () {\n      isUnmountedRef.current = true;\n    };\n  }, []);\n  return isUnmountedRef;\n}","map":null,"metadata":{},"sourceType":"module"}