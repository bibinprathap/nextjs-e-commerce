{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// react\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'; // application\n\nimport { MobileMenuContext } from '~/services/mobile-menu';\n\nfunction MobileMenuConveyor(props) {\n  var controllerRef = props.controllerRef,\n      children = props.children;\n  var ref = useRef(null);\n  var lastPanelIdRef = useRef(0);\n\n  var _useState = useState({\n    stack: [],\n    bin: []\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var controller = useMemo(function () {\n    return {\n      reset: function reset() {\n        setState({\n          stack: [],\n          bin: []\n        });\n      }\n    };\n  }, []);\n  useEffect(function () {\n    if (controllerRef) {\n      if ('current' in controllerRef) {\n        controllerRef.current = controller;\n      } else {\n        controllerRef(controller);\n      }\n    }\n  }, [controller, controllerRef]);\n  var open = useCallback(function (id) {\n    setState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        stack: [].concat(_toConsumableArray(prevState.stack), [id])\n      });\n    });\n  }, []);\n  var close = useCallback(function () {\n    setState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        stack: _toConsumableArray(prevState.stack.slice(0, -1)),\n        bin: [].concat(_toConsumableArray(prevState.bin), _toConsumableArray(prevState.stack.slice(-1)))\n      });\n    });\n  }, []);\n\n  var onTransitionEnd = function onTransitionEnd(event) {\n    if (event.target === ref.current && event.propertyName === 'transform') {\n      setState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          bin: []\n        });\n      });\n    }\n  };\n\n  var contextData = useMemo(function () {\n    return {\n      lastPanelIdRef: lastPanelIdRef,\n      containerRef: ref,\n      open: open,\n      close: close,\n      stack: state.stack,\n      bin: state.bin\n    };\n  }, [ref, open, close, state.stack, state.bin]);\n  return __jsx(\"div\", {\n    ref: ref,\n    className: \"mobile-menu__conveyor\",\n    style: {\n      transform: \"translateX(-\".concat(state.stack.length * 100, \"%)\")\n    },\n    onTransitionEnd: onTransitionEnd\n  }, __jsx(MobileMenuContext.Provider, {\n    value: contextData\n  }, children));\n}\n\nexport default MobileMenuConveyor;","map":null,"metadata":{},"sourceType":"module"}