{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// application\nimport { withClientState } from '~/store/client';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_UPDATE_QUANTITIES } from '~/store/cart/cartActionTypes';\n\nfunction findItemIndex(items, product, options) {\n  return items.findIndex(item => {\n    if (item.product.id !== product.id || item.options.length !== options.length) {\n      return false;\n    }\n\n    for (let i = 0; i < options.length; i += 1) {\n      const option = options[i];\n      const itemOption = item.options.find(itemOption => itemOption.name === option.name && itemOption.value === option.value);\n\n      if (!itemOption) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n}\n\nfunction calcSubtotal(items) {\n  return items.reduce((subtotal, item) => subtotal + item.total, 0);\n}\n\nfunction calcQuantity(items) {\n  return items.reduce((quantity, item) => quantity + item.quantity, 0);\n}\n\nfunction calcTotal(subtotal, totals) {\n  return totals.reduce((acc, extraLine) => acc + extraLine.price, subtotal);\n}\n\nfunction calcTotals(items) {\n  if (items.length === 0) {\n    return [];\n  }\n\n  const subtotal = calcSubtotal(items);\n  return [{\n    type: 'shipping',\n    title: 'SHIPPING',\n    price: 25\n  }, {\n    type: 'tax',\n    title: 'TAX',\n    price: subtotal * 0.2\n  }];\n}\n\nfunction addItem(state, product, options, quantity) {\n  const itemIndex = findItemIndex(state.items, product, options);\n  let newItems;\n  let {\n    lastItemId\n  } = state;\n\n  if (itemIndex === -1) {\n    lastItemId += 1;\n    newItems = [...state.items, {\n      id: lastItemId,\n      product: JSON.parse(JSON.stringify(product)),\n      options: JSON.parse(JSON.stringify(options)),\n      price: product.price,\n      total: product.price * quantity,\n      quantity\n    }];\n  } else {\n    const item = state.items[itemIndex];\n    newItems = [...state.items.slice(0, itemIndex), _objectSpread(_objectSpread({}, item), {}, {\n      quantity: item.quantity + quantity,\n      total: (item.quantity + quantity) * item.price\n    }), ...state.items.slice(itemIndex + 1)];\n  }\n\n  const subtotal = calcSubtotal(newItems);\n  const totals = calcTotals(newItems);\n  const total = calcTotal(subtotal, totals);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    lastItemId,\n    subtotal,\n    totals,\n    total,\n    items: newItems,\n    quantity: calcQuantity(newItems)\n  });\n}\n\nfunction removeItem(state, itemId) {\n  const {\n    items\n  } = state;\n  const newItems = items.filter(item => item.id !== itemId);\n  const subtotal = calcSubtotal(newItems);\n  const totals = calcTotals(newItems);\n  const total = calcTotal(subtotal, totals);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    items: newItems,\n    quantity: calcQuantity(newItems),\n    subtotal,\n    totals,\n    total\n  });\n}\n\nfunction updateQuantities(state, quantities) {\n  let needUpdate = false;\n  const newItems = state.items.map(item => {\n    const quantity = quantities.find(x => x.itemId === item.id && x.value !== item.quantity);\n\n    if (!quantity) {\n      return item;\n    }\n\n    needUpdate = true;\n    return _objectSpread(_objectSpread({}, item), {}, {\n      quantity: quantity.value,\n      total: quantity.value * item.price\n    });\n  });\n\n  if (needUpdate) {\n    const subtotal = calcSubtotal(newItems);\n    const totals = calcTotals(newItems);\n    const total = calcTotal(subtotal, totals);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      items: newItems,\n      quantity: calcQuantity(newItems),\n      subtotal,\n      totals,\n      total\n    });\n  }\n\n  return state;\n}\n\nconst initialState = {\n  lastItemId: 0,\n  quantity: 0,\n  items: [],\n  subtotal: 0,\n  totals: [],\n  total: 0\n};\nexport const CART_NAMESPACE = 'cart';\n\nfunction cartBaseReducer(state = initialState, action) {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      return addItem(state, action.product, action.options, action.quantity);\n\n    case CART_REMOVE_ITEM:\n      return removeItem(state, action.itemId);\n\n    case CART_UPDATE_QUANTITIES:\n      return updateQuantities(state, action.quantities);\n\n    default:\n      return state;\n  }\n}\n\nconst cartReducer = withClientState(cartBaseReducer, CART_NAMESPACE);\nexport default cartReducer;","map":null,"metadata":{},"sourceType":"module"}