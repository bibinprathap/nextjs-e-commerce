{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// react\nimport React, { useMemo } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { useFormContext } from 'react-hook-form'; // application\n\nimport { colorType } from '~/services/color';\n\nfunction ProductForm(props) {\n  const {\n    options,\n    namespace,\n    className\n  } = props,\n        rootProps = _objectWithoutProperties(props, [\"options\", \"namespace\", \"className\"]);\n\n  const {\n    register\n  } = useFormContext();\n  const ns = useMemo(() => namespace ? `${namespace}.` : '', [namespace]);\n  const optionsTemplate = options.map((option, optionIdx) => __jsx(\"div\", {\n    key: optionIdx,\n    className: \"product-form__row\"\n  }, __jsx(\"div\", {\n    className: \"product-form__title\"\n  }, option.name), __jsx(\"div\", {\n    className: \"product-form__control\"\n  }, option.type === 'default' && __jsx(\"div\", {\n    className: \"input-radio-label\"\n  }, __jsx(\"div\", {\n    className: \"input-radio-label__list\"\n  }, option.values.map((value, valueIdx) => __jsx(\"label\", {\n    key: valueIdx,\n    className: \"input-radio-label__item\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    name: `${ns}${option.slug}`,\n    className: \"input-radio-label__input\",\n    value: value.slug,\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"span\", {\n    className: \"input-radio-label__title\"\n  }, value.name))))), option.type === 'color' && __jsx(\"div\", {\n    className: \"input-radio-color\"\n  }, __jsx(\"div\", {\n    className: \"input-radio-color__list\"\n  }, option.values.map((value, valueIdx) => __jsx(React.Fragment, {\n    key: valueIdx\n  }, __jsx(\"label\", {\n    className: classNames('input-radio-color__item', {\n      'input-radio-color__item--white': colorType(value.color) === 'white'\n    }),\n    id: `product-option-${optionIdx}-${valueIdx}`,\n    style: {\n      color: value.color\n    },\n    title: value.name\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    name: `${ns}${option.slug}`,\n    value: value.slug,\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"span\", null)), __jsx(UncontrolledTooltip, {\n    target: `product-option-${optionIdx}-${valueIdx}`,\n    fade: false,\n    delay: {\n      show: 0,\n      hide: 0\n    }\n  }, value.name))))))));\n  const rootClasses = classNames('product-form', className);\n  return __jsx(\"div\", _extends({\n    className: rootClasses\n  }, rootProps), __jsx(\"div\", {\n    className: \"product-form__body\"\n  }, optionsTemplate));\n}\n\nexport default ProductForm;","map":null,"metadata":{},"sourceType":"module"}