{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport { useEffect, useRef, useState } from 'react'; // third-party\n\nimport { useIntl } from 'react-intl'; // application\n\nimport { vehicleApi } from '~/api';\n\nfunction makeItems(itemsDef) {\n  return itemsDef.map((itemDef, index) => _objectSpread(_objectSpread({}, itemDef), {}, {\n    value: 'none',\n    loading: false,\n    options: [],\n    disabled: index !== 0\n  }));\n}\n\nfunction getItemValue(item) {\n  const {\n    value: itemValue\n  } = item;\n\n  if (itemValue !== 'none' && item.deserializeOptionFn) {\n    return item.deserializeOptionFn(itemValue, item, []);\n  }\n\n  return itemValue;\n}\n\nfunction getItemValues(items) {\n  return items.reduce((acc, prevItem) => [...acc, getItemValue(prevItem)], []);\n}\n\nfunction serializeOption(option, item) {\n  if (item.serializeOptionFn) {\n    return item.serializeOptionFn(option, item);\n  }\n\n  return option;\n}\n\nfunction deserializeOption(option, item, items) {\n  if (item.deserializeOptionFn) {\n    return item.deserializeOptionFn(option, item, items);\n  }\n\n  return option;\n}\n\nexport default function useVehicleForm(options = {}) {\n  const intl = useIntl();\n  const {\n    onChange\n  } = options;\n  const cancelPrevRequestRef = useRef(() => {});\n  const {\n    0: items,\n    1: setItems\n  } = useState(makeItems([{\n    key: 'year',\n    label: intl.formatMessage({\n      id: 'INPUT_VEHICLE_YEAR_LABEL'\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_VEHICLE_YEAR_PLACEHOLDER'\n    }),\n    optionsSource: vehicleApi.getYears.bind(vehicleApi),\n    serializeOptionFn: option => option.toString(),\n    deserializeOptionFn: option => parseFloat(option)\n  }, {\n    key: 'brand',\n    label: intl.formatMessage({\n      id: 'INPUT_VEHICLE_BRAND_LABEL'\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_VEHICLE_BRAND_PLACEHOLDER'\n    }),\n    optionsSource: vehicleApi.getMakes.bind(vehicleApi)\n  }, {\n    key: 'model',\n    label: intl.formatMessage({\n      id: 'INPUT_VEHICLE_MODEL_LABEL'\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_VEHICLE_MODEL_PLACEHOLDER'\n    }),\n    optionsSource: vehicleApi.getModels.bind(vehicleApi)\n  }, {\n    key: 'engine',\n    label: intl.formatMessage({\n      id: 'INPUT_VEHICLE_ENGINE_LABEL'\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_VEHICLE_ENGINE_PLACEHOLDER'\n    }),\n    optionsSource: vehicleApi.getVehicles.bind(vehicleApi),\n    serializeOptionFn: option => option.engine,\n    deserializeOptionFn: (option, item, items) => {\n      return _objectSpread(_objectSpread({}, items[3].options.find(m => m.year == items[0].value && m.make == items[1].value && m.model == items[2].value)), {}, {\n        engine: option\n      }); //return item.options.find((x) => x.engine === option)!\n    }\n  }]));\n\n  const load = async (items, index) => {\n    cancelPrevRequestRef.current();\n    let canceled = false;\n\n    cancelPrevRequestRef.current = () => {\n      canceled = true;\n    };\n\n    setItems(prevItems => [...prevItems.map((prevItem, prevItemIdx) => prevItemIdx !== index ? prevItem : _objectSpread(_objectSpread({}, prevItem), {}, {\n      loading: true\n    }))]);\n    const item = items[index];\n    const args = getItemValues(items.slice(0, index));\n    let optionsSource = Promise.resolve([]);\n\n    if (args.length === 0 || args.slice().pop() !== 'none') {\n      optionsSource = item.optionsSource(...args);\n    }\n\n    const options = await optionsSource;\n\n    if (canceled) {\n      return;\n    }\n\n    setItems(prevItems => [...prevItems.map((prevItem, prevItemIdx) => prevItemIdx !== index ? prevItem : _objectSpread(_objectSpread({}, prevItem), {}, {\n      options,\n      loading: false\n    }))]);\n  };\n\n  const onItemValueChange = (index, value) => {\n    const nextItemIdx = index + 1;\n    setItems(prevItems => {\n      let resultItems = prevItems;\n      resultItems = [...resultItems.map((prevItem, prevItemIdx) => prevItemIdx !== index ? prevItem : _objectSpread(_objectSpread({}, prevItem), {}, {\n        value\n      }))];\n      resultItems = [...resultItems.map((prevItem, prevItemIdx) => prevItemIdx <= index ? prevItem : _objectSpread(_objectSpread({}, prevItem), {}, {\n        value: 'none',\n        options: [],\n        disabled: true\n      }))];\n\n      if (value !== 'none' && resultItems[nextItemIdx]) {\n        resultItems = [...resultItems.map((prevItem, prevItemIdx) => prevItemIdx !== nextItemIdx ? prevItem : _objectSpread(_objectSpread({}, prevItem), {}, {\n          disabled: false\n        }))];\n      }\n\n      return resultItems;\n    });\n\n    if (value === 'none') {\n      if (onChange) {\n        onChange(null);\n      }\n    } else if (onChange) {\n      onChange(deserializeOption(value, items[index], items));\n    }\n  }; // Load items.\n\n\n  useEffect(() => {\n    let prevValue = null;\n\n    for (let i = 0; i < items.length; i += 1) {\n      const item = items[i];\n\n      if (prevValue !== 'none' && item.options.length === 0 && !item.loading) {\n        load(items, i).then();\n        return;\n      }\n\n      prevValue = item.value;\n    }\n  }, [items]);\n  return {\n    items,\n    onItemValueChange,\n    serializeOption\n  };\n}","map":null,"metadata":{},"sourceType":"module"}