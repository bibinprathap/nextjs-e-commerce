{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// application\nimport { CategoryFilterBuilder } from '~/fake-server/filters/category-filter-builder';\nimport { CheckFilterBuilder } from '~/fake-server/filters/check-filter-builder';\nimport { clone, delayResponse, error, getFinalUrl } from '~/fake-server/utils';\nimport { ColorFilterBuilder } from '~/fake-server/filters/color-filter-builder';\nimport { getNextReviewId, reviews } from '~/fake-server/database/reviews';\nimport { prepareCategory } from '~/fake-server/endpoints/categories';\nimport { products as dbProducts } from '~/fake-server/database/products';\nimport { RadioFilterBuilder } from '~/fake-server/filters/radio-filter-builder';\nimport { RangeFilterBuilder } from '~/fake-server/filters/range-filter-builder';\nimport { RatingFilterBuilder } from '~/fake-server/filters/rating-filter-builder';\nimport { shopCategoriesList } from '~/fake-server/database/categories';\nimport { VehicleFilterBuilder } from '~/fake-server/filters/vehicle-filter-builder';\nimport { brands } from '~/fake-server/database/brands';\n\nfunction getProducts(shift, categorySlug = null) {\n  let shiftValue = shift;\n\n  switch (categorySlug) {\n    case 'tires-wheels':\n    case 'power-tools':\n      shiftValue += 5;\n      break;\n\n    case 'interior-parts':\n    case 'hand-tools':\n      shiftValue += 10;\n      break;\n\n    case 'engine-drivetrain':\n    case 'plumbing':\n      shiftValue += 15;\n      break;\n\n    default:\n  }\n\n  return [...dbProducts.slice(shiftValue), ...dbProducts.slice(0, shiftValue)];\n}\n\nexport function getProductsListDUMMY(options = {}, filterValues = {}) {\n  const filters = [new CategoryFilterBuilder('category', 'Categories'), new VehicleFilterBuilder('vehicle', 'Vehicle'), new RangeFilterBuilder('price', 'Price'), new CheckFilterBuilder('brand', 'Brand'), new RadioFilterBuilder('discount', 'With Discount'), new RatingFilterBuilder('rating', 'Rating'), new ColorFilterBuilder('color', 'Color')];\n  let products = dbProducts.slice(0);\n  filters.forEach(filter => filter.makeItems(products, filterValues[filter.slug])); // Calculate items count for filter values.\n\n  filters.forEach(filter => filter.calc(filters)); // Apply filters to products list.\n\n  products = products.filter(product => filters.reduce((mr, filter) => mr && filter.test(product), true));\n  const page = (options === null || options === void 0 ? void 0 : options.page) || 1;\n  const limit = (options === null || options === void 0 ? void 0 : options.limit) || 16;\n  const sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n  const total = products.length;\n  const pages = Math.ceil(products.length / limit);\n  const from = (page - 1) * limit + 1;\n  const to = Math.min(page * limit, total); // Sort items array.\n\n  products = products.sort((a, b) => {\n    if (['name_asc', 'name_desc'].includes(sort)) {\n      if (a.name === b.name) {\n        return 0;\n      }\n\n      return (a.name > b.name ? 1 : -1) * (sort === 'name_asc' ? 1 : -1);\n    }\n\n    return 0;\n  });\n  const items = products.slice(from - 1, to);\n  return delayResponse(Promise.resolve({\n    items,\n    page,\n    limit,\n    sort,\n    total,\n    pages,\n    from,\n    to,\n    products: items,\n    filters: filters.map(x => x.build())\n  }), 350);\n}\nexport async function getProductsListCache(options = {}, res = []) {\n  let products = []; // dbProducts.slice(0);\n  // filters.forEach((filter) => filter.makeItems(products, filterValues[filter.slug]));\n  // Calculate items count for filter values.\n  // filters.forEach((filter) => filter.calc(filters));\n  // Apply filters to products list.\n  //  products = products.filter((product) => filters.reduce<boolean>((mr, filter) => mr && filter.test(product), true));\n\n  (res || []).map(p => {\n    products.push({\n      \"id\": p.ITEMFIND,\n      \"name\": p.descr,\n      \"excerpt\": p.descr,\n      \"description\": p.descr,\n      \"slug\": p.slug,\n      \"sku\": p.ITEMFIND.toString(),\n      \"partNumber\": p.Partno,\n      \"stock\": \"in-stock\",\n      \"price\": p.salesPrice,\n      \"compareAtPrice\": null,\n      \"images\": [p.imagepath],\n      \"badges\": [\"sale\", \"new\", \"hot\"],\n      \"rating\": 4,\n      \"reviews\": 0,\n      \"availability\": \"in-stock\",\n      \"compatibility\": [1, 2],\n      \"type\": {\n        \"slug\": \"default\",\n        \"name\": \"Default\",\n        \"attributeGroups\": []\n      },\n      \"attributes\": [],\n      \"options\": [],\n      \"tags\": [],\n      \"categories\": [],\n      \"customFields\": {}\n    });\n  });\n  const page = (options === null || options === void 0 ? void 0 : options.page) || 1;\n  const limit = (options === null || options === void 0 ? void 0 : options.limit) || 16;\n  const sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n  const total = products.length;\n  const pages = Math.ceil(products.length / limit);\n  const from = (page - 1) * limit + 1;\n  const to = Math.min(page * limit, total); // Sort items array.\n\n  products = products.sort((a, b) => {\n    if (['name_asc', 'name_desc'].includes(sort)) {\n      if (a.name === b.name) {\n        return 0;\n      }\n\n      return (a.name > b.name ? 1 : -1) * (sort === 'name_asc' ? 1 : -1);\n    }\n\n    return 0;\n  });\n  console.log('getProductsList', JSON.stringify(products[0]));\n  const items = products.slice(from - 1, to);\n  console.log(items);\n  return Promise.resolve({\n    items,\n    page,\n    limit,\n    sort,\n    total,\n    pages,\n    from,\n    to,\n    products,\n    filters: []\n  });\n}\nexport async function getProductsList(options = {}, filterValues = {}) {\n  const filters = [new CategoryFilterBuilder('category', 'Categories'), new VehicleFilterBuilder('vehicle', 'Vehicle'), new RangeFilterBuilder('price', 'Price'), new CheckFilterBuilder('brand', 'Brand'), new RadioFilterBuilder('discount', 'With Discount'), new RatingFilterBuilder('rating', 'Rating'), new ColorFilterBuilder('color', 'Color')];\n  const data = {\n    parem1: filterValues.model || filterValues.filter_model || filterValues.partsCategory || filterValues.filter_slug || filterValues.filter_partsCategory || filterValues.slug,\n    parem2: null,\n    parem3: filterValues.origin || filterValues.filter_origin,\n    parem4: filterValues.makeCode || filterValues.filter_makeCode || filterValues.make,\n    param5: filterValues.page,\n    parem6: filterValues.limit\n  };\n  const reso = await fetch(getFinalUrl(\"Portal/searchproducttrade/\"), {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n  });\n  const res = await reso.json().then(res => {\n    return Promise.resolve(res); //filters: filters.map((x) => x.build()),\n  }).catch(err => {\n    console.log(err);\n  });\n  let products = []; // dbProducts.slice(0);\n  // filters.forEach((filter) => filter.makeItems(products, filterValues[filter.slug]));\n  // Calculate items count for filter values.\n  // filters.forEach((filter) => filter.calc(filters));\n  // Apply filters to products list.\n  //  products = products.filter((product) => filters.reduce<boolean>((mr, filter) => mr && filter.test(product), true));\n\n  (res || []).map(p => {\n    products.push({\n      \"id\": p.ITEMFIND,\n      \"name\": p.descr,\n      \"excerpt\": p.descr,\n      \"description\": p.descr,\n      \"slug\": p.slug,\n      \"sku\": p.ITEMFIND.toString(),\n      \"partNumber\": p.Partno,\n      \"stock\": \"in-stock\",\n      \"price\": p.salesPrice,\n      \"compareAtPrice\": null,\n      \"images\": [p.imagepath],\n      \"badges\": [\"sale\", \"new\", \"hot\"],\n      \"rating\": 4,\n      \"reviews\": 0,\n      \"availability\": \"in-stock\",\n      \"compatibility\": [1, 2],\n      \"type\": {\n        \"slug\": \"default\",\n        \"name\": \"Default\",\n        \"attributeGroups\": []\n      },\n      \"attributes\": [],\n      \"options\": [],\n      \"tags\": [],\n      \"categories\": [],\n      \"customFields\": {}\n    });\n  });\n  const page = (options === null || options === void 0 ? void 0 : options.page) || 1;\n  const limit = (options === null || options === void 0 ? void 0 : options.limit) || 16;\n  const sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n  const total = products.length;\n  const pages = Math.ceil(products.length / limit);\n  const from = (page - 1) * limit + 1;\n  const to = Math.min(page * limit, total); // Sort items array.\n\n  products = products.sort((a, b) => {\n    if (['name_asc', 'name_desc'].includes(sort)) {\n      if (a.name === b.name) {\n        return 0;\n      }\n\n      return (a.name > b.name ? 1 : -1) * (sort === 'name_asc' ? 1 : -1);\n    }\n\n    return 0;\n  });\n  console.log('getProductsList', JSON.stringify(products[0]));\n  const items = products.slice(from - 1, to);\n  console.log(items);\n  return Promise.resolve({\n    items,\n    page,\n    limit,\n    sort,\n    total,\n    pages,\n    from,\n    to,\n    products,\n    filters: []\n  });\n}\nexport async function getProductBySlug(slug) {\n  const product = dbProducts.find(x => x.slug === slug);\n\n  if (product) {\n    return Promise.resolve(clone(product));\n  }\n\n  const data = {\n    pvalue: slug\n  };\n  const res = await fetch(getFinalUrl(\"itemmastereditmodetrade/\"), {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n  });\n  const i = await res.json().then(res => {\n    let product = {}; // dbProducts.slice(0);\n    // filters.forEach((filter) => filter.makeItems(products, filterValues[filter.slug]));\n    // Calculate items count for filter values.\n    // filters.forEach((filter) => filter.calc(filters));\n    // Apply filters to products list.\n    //  products = products.filter((product) => filters.reduce<boolean>((mr, filter) => mr && filter.test(product), true));\n\n    const images = [];\n    (res.jvdetail || []).map(i => {\n      images.push(i.imagepath);\n    });\n    (res.csheader || []).map(p => {\n      product = {\n        \"id\": p.Itemid,\n        \"name\": p.name,\n        \"excerpt\": p.smalldescription,\n        \"description\": p.descr,\n        \"slug\": p.slug,\n        \"sku\": p.ITEMFIND,\n        \"partNumber\": p.Partno,\n        \"stock\": \"in-stock\",\n        \"price\": p.salesPrice,\n        \"compareAtPrice\": null,\n        \"images\": images,\n        \"badges\": [\"sale\", \"new\", \"hot\"],\n        \"rating\": 4,\n        \"reviews\": 0,\n        \"availability\": \"in-stock\",\n        \"compatibility\": [1, 2],\n        \"brand\": brands.find(b => b.id == p.cid),\n        \"type\": {\n          \"slug\": \"default\",\n          \"name\": \"Default\",\n          \"attributeGroups\": [{\n            \"name\": \"General\",\n            \"slug\": \"general\",\n            \"attributes\": [\"brand\", \"Origin\", \"Partno\", \"unit\", \"src\", \"bincard\"]\n          }]\n        },\n        \"attributes\": [{\n          \"name\": \"Brand\",\n          \"slug\": \"brand\",\n          \"featured\": true,\n          \"values\": [{\n            \"name\": p.brandName,\n            \"slug\": p.brandslug\n          }]\n        }, {\n          \"name\": \"Origin\",\n          \"slug\": \"Origin\",\n          \"featured\": true,\n          \"values\": [{\n            \"name\": p.Origin,\n            \"slug\": p.Originslug\n          }]\n        }, {\n          \"name\": \"Partno\",\n          \"slug\": \"Partno\",\n          \"featured\": true,\n          \"values\": [{\n            \"name\": p.Partno,\n            \"slug\": p.Partno\n          }]\n        }, {\n          \"name\": \"Unit\",\n          \"slug\": \"unit\",\n          \"featured\": true,\n          \"values\": [{\n            \"name\": p.unit,\n            \"slug\": p.unit\n          }]\n        }, {\n          \"name\": \"Source\",\n          \"slug\": \"src\",\n          \"featured\": true,\n          \"values\": [{\n            \"name\": p.categoryname,\n            \"slug\": p.categoryslug\n          }]\n        }, {\n          \"name\": \"BinCard\",\n          \"slug\": \"bincard\",\n          \"featured\": false,\n          \"values\": [{\n            \"name\": p.bincard,\n            \"slug\": p.bincardslug\n          }]\n        }],\n        \"options\": [{\n          \"type\": \"default\",\n          \"slug\": \"material\",\n          \"name\": \"Material\",\n          \"values\": [{\n            \"slug\": \"steel\",\n            \"name\": \"Steel\"\n          }, {\n            \"slug\": \"aluminium\",\n            \"name\": \"Aluminium\"\n          }, {\n            \"slug\": \"thorium\",\n            \"name\": \"Thorium\"\n          }]\n        }, {\n          \"type\": \"color\",\n          \"slug\": \"color\",\n          \"name\": \"Color\",\n          \"values\": [{\n            \"slug\": \"white\",\n            \"name\": \"White\",\n            \"color\": \"#fff\"\n          }, {\n            \"slug\": \"yellow\",\n            \"name\": \"Yellow\",\n            \"color\": \"#ffd333\"\n          }, {\n            \"slug\": \"red\",\n            \"name\": \"Red\",\n            \"color\": \"#ff4040\"\n          }, {\n            \"slug\": \"blue\",\n            \"name\": \"Blue\",\n            \"color\": \"#4080ff\"\n          }]\n        }],\n        \"tags\": [p.brandName, p.categoryname, p.cid, p.Origin, p.Partno],\n        \"categories\": [{\n          \"id\": 47,\n          \"type\": \"shop\",\n          \"name\": p.gid,\n          \"slug\": p.gidslug,\n          \"image\": \"/images/categories/IDLER.jpg\",\n          \"items\": 106,\n          \"parent\": null,\n          \"layout\": \"products\",\n          \"customFields\": {}\n        }],\n        \"customFields\": {}\n      };\n    });\n    console.log('getProductBySlug', JSON.stringify(product));\n\n    if (!product) {\n      return error('Page Not Found');\n    }\n\n    return Promise.resolve(clone(product)); //filters: filters.map((x) => x.build()),\n  }).catch(err => {\n    console.log(err);\n  });\n  return i;\n}\nexport async function getProductReviews(productId, options) {\n  const data = {\n    pvalue: productId\n  };\n  const reso = await fetch(getFinalUrl(\"itemreviewtrade/\"), {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n  });\n  const res = await reso.json().then(res => {\n    return Promise.resolve(res); //filters: filters.map((x) => x.build()),\n  }).catch(err => {\n    console.log(err);\n  });\n  let items = [];\n  (res.csheader || []).map(p => {\n    items.push({\n      id: p.id,\n      date: new Date(p.createddate).toString(),\n      author: p.name,\n      avatar: '/images/avatars/avatar-1.jpg',\n      rating: p.rating,\n      content: p.reviewcontent\n    });\n  });\n  console.log('getProductReviews', JSON.stringify(items)); //old\n\n  items.sort((a, b) => {\n    if (a.date > b.date) {\n      return -1;\n    }\n\n    if (a.date < b.date) {\n      return 1;\n    }\n\n    return 0;\n  });\n  const page = (options === null || options === void 0 ? void 0 : options.page) || 1;\n  const limit = (options === null || options === void 0 ? void 0 : options.limit) || 8;\n  const sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n  const total = items.length;\n  const pages = Math.ceil(items.length / limit);\n  const from = (page - 1) * limit + 1;\n  const to = page * limit;\n  const fullItems = clone(items);\n  items = items.slice(from - 1, to);\n  return Promise.resolve({\n    items,\n    page,\n    limit,\n    sort,\n    total,\n    pages,\n    from,\n    to,\n    products: fullItems\n  }); // return i;\n}\nexport async function sendEnquiry(data) {\n  const newdata = {\n    fullname: data.fullname,\n    phonenumber: data.phonenumber,\n    brand: data.brand,\n    email: data.email,\n    year: data.year,\n    chassis: data.chassis,\n    address: data.address,\n    enquirycontent: data.enquirycontent,\n    createdDate: new Date().toISOString().substr(0, 10),\n    pagename: data.address\n  };\n  const res = await fetch(getFinalUrl(\"Portal/OnlineEnquirytrade/\"), {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: JSON.stringify(newdata) // body data type must match \"Content-Type\" header\n\n  });\n  const i = await res.json().then(res => {\n    console.log(res);\n  }).catch(err => {\n    console.log(err);\n  });\n  return Promise.resolve(data);\n}\nexport async function addProductReview(productId, data) {\n  const review = {\n    id: getNextReviewId(),\n    date: new Date().toISOString().substr(0, 10),\n    author: data.author,\n    avatar: '/images/avatars/avatar-2.jpg',\n    rating: data.rating,\n    content: data.content\n  };\n  reviews.push(review);\n  const newdata = {\n    cid: productId,\n    ItemDetails3: [{\n      rating: data.rating,\n      name: data.author,\n      email: data.email,\n      createddate: new Date().toISOString().substr(0, 10),\n      reviewcontent: data.content,\n      isEditMode: false\n    }]\n  };\n  const res = await fetch(getFinalUrl(\"submitreviewtrade/\"), {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: JSON.stringify(newdata) // body data type must match \"Content-Type\" header\n\n  });\n  const i = await res.json().then(res => {\n    console.log(res);\n  }).catch(err => {\n    console.log(err);\n  });\n  return delayResponse(Promise.resolve(review));\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport async function getProductAnalogs(productId) {\n  // const slugs: string[] = [\n  //     'sunset-brake-kit',\n  //     'specter-brake-kit',\n  //     'brake-kit',\n  // ];\n  // const analogs: IProduct[] = dbProducts.filter((x) => slugs.includes(x.slug));\n  // return Promise.resolve(clone(analogs));\n  const data = {\n    pvalue: productId\n  };\n  const res = await fetch(getFinalUrl(\"searchproductanalogstrade/\"), {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n  });\n  const i = await res.json().then(res => {\n    //console.log('getProductAnalogs', res);\n    console.log('getProductReviews', JSON.stringify(res));\n    let analogs = []; // dbProducts.slice(0);\n    // filters.forEach((filter) => filter.makeItems(products, filterValues[filter.slug]));\n    // Calculate items count for filter values.\n    // filters.forEach((filter) => filter.calc(filters));\n    // Apply filters to products list.\n    //  products = products.filter((product) => filters.reduce<boolean>((mr, filter) => mr && filter.test(product), true));\n\n    (res.csheader || []).map(p => {\n      analogs.push({\n        \"id\": p.ITEMFIND,\n        \"name\": p.descr,\n        \"excerpt\": p.descr,\n        \"description\": p.descr,\n        \"slug\": p.slug,\n        \"sku\": p.ITEMFIND.toString(),\n        \"partNumber\": p.Partno,\n        \"stock\": \"in-stock\",\n        \"price\": p.salesPrice,\n        \"compareAtPrice\": null,\n        \"images\": [p.imagepath],\n        \"badges\": [\"sale\", \"new\", \"hot\"],\n        \"rating\": 4,\n        \"reviews\": 0,\n        \"availability\": \"in-stock\",\n        \"compatibility\": [1, 2],\n        \"brand\": brands.find(b => b.id == p.cid),\n        \"type\": {\n          \"slug\": \"default\",\n          \"name\": \"Default\",\n          \"attributeGroups\": [{\n            \"name\": \"General\",\n            \"slug\": \"general\",\n            \"attributes\": [\"brand\", \"Origin\", \"Partno\", \"unit\", \"src\", \"bincard\"]\n          }]\n        },\n        \"attributes\": [{\n          \"name\": \"Brand\",\n          \"slug\": \"brand\",\n          \"featured\": true,\n          \"values\": [{\n            \"name\": p.brand,\n            \"slug\": p.brandslug\n          }]\n        }, {\n          \"name\": \"Origin\",\n          \"slug\": \"Origin\",\n          \"featured\": true,\n          \"values\": [{\n            \"name\": p.Origin,\n            \"slug\": p.Originslug\n          }]\n        }, {\n          \"name\": \"Partno\",\n          \"slug\": \"Partno\",\n          \"featured\": true,\n          \"values\": [{\n            \"name\": p.Partno,\n            \"slug\": p.Partno\n          }]\n        }, {\n          \"name\": \"Unit\",\n          \"slug\": \"unit\",\n          \"featured\": true,\n          \"values\": [{\n            \"name\": p.unit,\n            \"slug\": p.unit\n          }]\n        }, {\n          \"name\": \"Source\",\n          \"slug\": \"src\",\n          \"featured\": true,\n          \"values\": [{\n            \"name\": p.src,\n            \"slug\": p.srcslug\n          }]\n        }, {\n          \"name\": \"BinCard\",\n          \"slug\": \"bincard\",\n          \"featured\": false,\n          \"values\": [{\n            \"name\": p.bincard,\n            \"slug\": p.bincardslug\n          }]\n        }],\n        \"options\": [{\n          \"type\": \"default\",\n          \"slug\": \"material\",\n          \"name\": \"Material\",\n          \"values\": [{\n            \"slug\": \"steel\",\n            \"name\": \"Steel\"\n          }, {\n            \"slug\": \"aluminium\",\n            \"name\": \"Aluminium\"\n          }, {\n            \"slug\": \"thorium\",\n            \"name\": \"Thorium\"\n          }]\n        }, {\n          \"type\": \"color\",\n          \"slug\": \"color\",\n          \"name\": \"Color\",\n          \"values\": [{\n            \"slug\": \"white\",\n            \"name\": \"White\",\n            \"color\": \"#fff\"\n          }, {\n            \"slug\": \"yellow\",\n            \"name\": \"Yellow\",\n            \"color\": \"#ffd333\"\n          }, {\n            \"slug\": \"red\",\n            \"name\": \"Red\",\n            \"color\": \"#ff4040\"\n          }, {\n            \"slug\": \"blue\",\n            \"name\": \"Blue\",\n            \"color\": \"#4080ff\"\n          }]\n        }],\n        \"tags\": [p.brand, p.gidslug, p.cid, p.Origin, p.Partno],\n        \"categories\": [{\n          \"id\": 47,\n          \"type\": \"shop\",\n          \"name\": p.gid,\n          \"slug\": p.gidslug,\n          \"image\": \"/images/categories/IDLER.jpg\",\n          \"items\": 106,\n          \"parent\": null,\n          \"layout\": \"products\",\n          \"customFields\": {}\n        }],\n        \"customFields\": {}\n      });\n    });\n    Promise.resolve(clone(analogs)); //filters: filters.map((x) => x.build()),\n  }).catch(err => {\n    console.log(err);\n  });\n  const slugs = ['brake-kit1'];\n  const analogs = dbProducts.filter(x => slugs.includes(x.slug));\n  return Promise.resolve(clone(analogs)); // return i;\n}\nexport function getRelatedProducts(productId, limit) {\n  return Promise.resolve(clone(dbProducts.slice(0, limit)));\n}\nexport function getFeaturedProducts(categorySlug, limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(0, categorySlug).slice(0, limit))), 1000);\n}\nexport function getPopularProducts(categorySlug, limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(6, categorySlug).slice(0, limit))), 1000);\n}\nexport function getTopRatedProducts(categorySlug, limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(12, categorySlug).slice(0, limit))), 1000);\n}\nexport function getSpecialOffers(limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(8).slice(0, limit))), 1000);\n}\nexport function getLatestProducts(limit) {\n  return Promise.resolve(clone(dbProducts.slice(0, limit)));\n}\nexport async function getSearchSuggestions(query, options) {\n  const queryVal = query.toLowerCase();\n\n  const optionsVal = _objectSpread({\n    limitProducts: 4,\n    limitCategories: 4\n  }, options);\n\n  const resultProducts = dbProducts.filter(x => x.name.toLowerCase().includes(queryVal));\n  const resultCategories = shopCategoriesList.filter(x => x.name.toLowerCase().includes(queryVal));\n\n  if (resultProducts.length > 0 || resultCategories.length > 0) {\n    return Promise.resolve({\n      products: resultProducts.slice(0, optionsVal.limitProducts),\n      categories: resultCategories.slice(0, optionsVal.limitCategories).map(x => prepareCategory(x))\n    });\n  } else {\n    const data = {\n      parem2: queryVal\n    };\n    const reso = await fetch(getFinalUrl(\"Portal/searchproducttrade/\"), {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      headers: {\n        'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n    });\n    const res = await reso.json().then(res => {\n      return Promise.resolve(res); //filters: filters.map((x) => x.build()),\n    }).catch(err => {\n      console.log(err);\n    });\n    let products = []; // dbProducts.slice(0);\n    // filters.forEach((filter) => filter.makeItems(products, filterValues[filter.slug]));\n    // Calculate items count for filter values.\n    // filters.forEach((filter) => filter.calc(filters));\n    // Apply filters to products list.\n    //  products = products.filter((product) => filters.reduce<boolean>((mr, filter) => mr && filter.test(product), true));\n\n    (res || []).map(p => {\n      products.push({\n        \"id\": p.ITEMFIND,\n        \"name\": p.descr,\n        \"excerpt\": p.descr,\n        \"description\": p.descr,\n        \"slug\": p.slug,\n        \"sku\": p.ITEMFIND.toString(),\n        \"partNumber\": p.Partno,\n        \"stock\": \"in-stock\",\n        \"price\": p.salesPrice,\n        \"compareAtPrice\": null,\n        \"images\": [p.imagepath],\n        \"badges\": [\"sale\", \"new\", \"hot\"],\n        \"rating\": 4,\n        \"reviews\": 0,\n        \"availability\": \"in-stock\",\n        \"compatibility\": [1, 2],\n        \"type\": {\n          \"slug\": \"default\",\n          \"name\": \"Default\",\n          \"attributeGroups\": []\n        },\n        \"attributes\": [],\n        \"options\": [],\n        \"tags\": [],\n        \"categories\": [],\n        \"customFields\": {}\n      });\n    });\n    return Promise.resolve({\n      products,\n      categories: []\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}