{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\n/* eslint-disable no-alert */\n// react\nimport { useEffect, useMemo, useRef } from 'react'; // third-party\n\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl'; // application\n\nimport { useAsyncAction } from '~/store/hooks';\nimport { useCartAddItem } from '~/store/cart/cartHooks';\nexport function useProductForm(product) {\n  var intl = useIntl();\n  var cartAddItem = useCartAddItem();\n  var methods = useForm({\n    defaultValues: {\n      quantity: 1,\n      options: {\n        material: \"aluminium\",\n        color: \"yellow\"\n      }\n    }\n  });\n  var handleSubmit = methods.handleSubmit;\n  var submitCount = methods.formState.submitCount;\n  var prevSubmitCount = useRef(0);\n  useEffect(function () {\n    if (prevSubmitCount.current !== submitCount && Object.keys(methods.errors).length > 0) {\n      if (methods.errors.quantity) {\n        alert(intl.formatMessage({\n          id: 'ERROR_ADD_TO_CART_QUANTITY'\n        }));\n      } else if (methods.errors.options) {\n        alert(intl.formatMessage({\n          id: 'ERROR_ADD_TO_CART_OPTIONS'\n        }));\n      }\n    }\n\n    prevSubmitCount.current = submitCount;\n  }, [intl, submitCount, methods.errors]);\n\n  var _useAsyncAction = useAsyncAction( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var options;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              debugger;\n\n              if (product) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", null);\n\n            case 3:\n              options = [];\n              Object.keys(data.options).forEach(function (optionSlug) {\n                var option = product.options.find(function (x) {\n                  return x.slug === optionSlug;\n                });\n\n                if (!option) {\n                  return;\n                }\n\n                var value = option.values.find(function (x) {\n                  return x.slug === data.options[optionSlug];\n                });\n\n                if (!value) {\n                  return;\n                }\n\n                options.push({\n                  name: option.name,\n                  value: value.name\n                });\n              });\n              return _context.abrupt(\"return\", cartAddItem(product, options, typeof data.quantity === 'number' ? data.quantity : 1));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [product, cartAddItem]),\n      _useAsyncAction2 = _slicedToArray(_useAsyncAction, 2),\n      submit = _useAsyncAction2[0],\n      submitInProgress = _useAsyncAction2[1];\n\n  return {\n    submit: useMemo(function () {\n      return handleSubmit(submit);\n    }, [handleSubmit, submit]),\n    submitInProgress: submitInProgress || methods.formState.isSubmitting,\n    errors: methods.errors,\n    register: methods.register,\n    watch: methods.watch,\n    methods: methods\n  };\n}","map":null,"metadata":{},"sourceType":"module"}