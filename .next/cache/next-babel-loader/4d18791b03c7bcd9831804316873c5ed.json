{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { products as dbProducts } from '~/fake-server/database/products';\nexport var CheckFilterBuilder = /*#__PURE__*/function (_AbstractFilterBuilde) {\n  _inherits(CheckFilterBuilder, _AbstractFilterBuilde);\n\n  var _super = _createSuper(CheckFilterBuilder);\n\n  function CheckFilterBuilder() {\n    var _this;\n\n    _classCallCheck(this, CheckFilterBuilder);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"items\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"value\", []);\n\n    return _this;\n  }\n\n  _createClass(CheckFilterBuilder, [{\n    key: \"test\",\n    value: function test(product) {\n      var _this2 = this;\n\n      if (this.value.length === 0) {\n        return true;\n      }\n\n      return this.value.reduce(function (result, value) {\n        return result || _this2.extractItems(product).map(function (x) {\n          return x.slug;\n        }).includes(value);\n      }, false);\n    } // noinspection DuplicatedCode\n\n  }, {\n    key: \"makeItems\",\n    value: function makeItems(products, value) {\n      var _this3 = this;\n\n      products.forEach(function (product) {\n        return _this3.extractItems(product).forEach(function (item) {\n          if (!_this3.items.find(function (x) {\n            return x.slug === item.slug;\n          })) {\n            _this3.items.push(item);\n          }\n        });\n      });\n      this.value = this.parseValue(value);\n    } // noinspection DuplicatedCode\n\n  }, {\n    key: \"calc\",\n    value: function calc(filters) {\n      var _this4 = this;\n\n      var products = dbProducts.filter(function (product) {\n        return filters.reduce(function (isMatched, filter) {\n          return isMatched && (filter === _this4 || filter.test(product));\n        }, true);\n      });\n      this.items = this.items.map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          count: products.reduce(function (acc, product) {\n            return acc + (_this4.extractItems(product).map(function (x) {\n              return x.slug;\n            }).includes(item.slug) ? 1 : 0);\n          }, 0)\n        });\n      });\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      return {\n        type: 'check',\n        slug: this.slug,\n        name: this.name,\n        items: this.items,\n        value: this.value\n      };\n    } // noinspection JSMethodCanBeStatic\n\n  }, {\n    key: \"parseValue\",\n    value: function parseValue(value) {\n      return value ? value.split(',') : [];\n    }\n  }, {\n    key: \"extractItems\",\n    value: function extractItems(product) {\n      if (this.slug === 'brand') {\n        return product.brand ? [{\n          slug: product.brand.slug,\n          name: product.brand.name,\n          count: 0\n        }] : [];\n      }\n\n      throw Error();\n    }\n  }]);\n\n  return CheckFilterBuilder;\n}(AbstractFilterBuilder);","map":null,"metadata":{},"sourceType":"module"}