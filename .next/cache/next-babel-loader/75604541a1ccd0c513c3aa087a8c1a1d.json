{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// react\nimport React, { useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl'; // application\n\nimport AppImageNew from '~/components/shared/AppImageNew';\nimport AppLink from '~/components/shared/AppLink';\nimport AsyncAction from '~/components/shared/AsyncAction';\nimport BlockHeader from '~/components/blocks/BlockHeader';\nimport BlockSpace from '~/components/blocks/BlockSpace';\nimport CurrencyFormat from '~/components/shared/CurrencyFormat';\nimport InputNumber from '~/components/shared/InputNumber';\nimport PageTitle from '~/components/shared/PageTitle';\nimport url from '~/services/url';\nimport { Cross12Svg } from '~/svg';\nimport { useCart, useCartRemoveItem, useCartUpdateQuantities } from '~/store/cart/cartHooks';\n\nfunction Page() {\n  var intl = useIntl();\n  var cart = useCart();\n  var cartRemoveItem = useCartRemoveItem();\n  var cartUpdateQuantities = useCartUpdateQuantities();\n\n  var _useState = useState([]),\n      quantities = _useState[0],\n      setQuantities = _useState[1];\n\n  var items = cart.items;\n\n  var updateQuantities = function updateQuantities() {\n    return cartUpdateQuantities(quantities.map(function (x) {\n      return _objectSpread(_objectSpread({}, x), {}, {\n        value: typeof x.value === 'string' ? parseFloat(x.value) : x.value\n      });\n    }));\n  };\n\n  var cartNeedUpdate = function cartNeedUpdate() {\n    return quantities.filter(function (x) {\n      var item = cart.items.find(function (item) {\n        return item.id === x.itemId;\n      });\n      return item && item.quantity !== x.value && x.value !== '';\n    }).length > 0;\n  };\n\n  var getItemQuantity = function getItemQuantity(item) {\n    var quantity = quantities.find(function (x) {\n      return x.itemId === item.id;\n    });\n    return quantity ? quantity.value : item.quantity;\n  };\n\n  var handleChangeQuantity = function handleChangeQuantity(item, quantity) {\n    setQuantities(function (prevState) {\n      var index = prevState.findIndex(function (x) {\n        return x.itemId === item.id;\n      });\n\n      if (index === -1) {\n        return [].concat(_toConsumableArray(prevState), [{\n          itemId: item.id,\n          value: quantity\n        }]);\n      }\n\n      return [].concat(_toConsumableArray(prevState.slice(0, index)), [_objectSpread(_objectSpread({}, prevState[index]), {}, {\n        value: quantity\n      })], _toConsumableArray(prevState.slice(index + 1)));\n    });\n  };\n\n  if (items.length === 0) {\n    return __jsx(React.Fragment, null, __jsx(PageTitle, null, intl.formatMessage({\n      id: 'HEADER_SHOPPING_CART'\n    })), __jsx(BlockHeader, {\n      breadcrumb: [{\n        title: intl.formatMessage({\n          id: 'LINK_HOME'\n        }),\n        url: url.home()\n      }, {\n        title: intl.formatMessage({\n          id: 'LINK_CART'\n        }),\n        url: url.cart()\n      }]\n    }), __jsx(\"div\", {\n      className: \"block-empty\"\n    }, __jsx(\"div\", {\n      className: \"container\"\n    }, __jsx(\"div\", {\n      className: \"block-empty__body\"\n    }, __jsx(\"h1\", {\n      className: \"block-empty__title\"\n    }, __jsx(FormattedMessage, {\n      id: \"HEADER_SHOPPING_CART_EMPTY_TITLE\"\n    })), __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: intl.formatMessage({\n          id: 'HEADER_SHOPPING_CART_EMPTY_SUBTITLE'\n        })\n      }\n    }), __jsx(\"div\", {\n      className: \"block-empty__action\"\n    }, __jsx(AppLink, {\n      href: url.home(),\n      className: \"btn btn-primary btn-sm\"\n    }, __jsx(FormattedMessage, {\n      id: \"BUTTON_GO_TO_HOMEPAGE\"\n    })))))), __jsx(BlockSpace, {\n      layout: \"before-footer\"\n    }));\n  }\n\n  var table = __jsx(\"table\", {\n    className: \"cart-table__table\"\n  }, __jsx(\"thead\", {\n    className: \"cart-table__head\"\n  }, __jsx(\"tr\", {\n    className: \"cart-table__row\"\n  }, __jsx(\"th\", {\n    className: \"cart-table__column cart-table__column--image\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_IMAGE\"\n  })), __jsx(\"th\", {\n    className: \"cart-table__column cart-table__column--product\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_PRODUCT\"\n  })), __jsx(\"th\", {\n    className: \"cart-table__column cart-table__column--price\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_PRICE\"\n  })), __jsx(\"th\", {\n    className: \"cart-table__column cart-table__column--quantity\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_QUANTITY\"\n  })), __jsx(\"th\", {\n    className: \"cart-table__column cart-table__column--total\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_TOTAL\"\n  })), __jsx(\"th\", {\n    className: \"cart-table__column cart-table__column--remove\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_REMOVE\"\n  }))))), __jsx(\"tbody\", {\n    className: \"cart-table__body\"\n  }, items.map(function (item) {\n    return __jsx(\"tr\", {\n      key: item.id,\n      className: \"cart-table__row\"\n    }, __jsx(\"td\", {\n      className: \"cart-table__column cart-table__column--image\"\n    }, __jsx(\"div\", {\n      className: \"image image--type--product\"\n    }, __jsx(AppLink, {\n      href: url.product(item.product),\n      className: \"image__body\"\n    }, __jsx(AppImageNew, {\n      className: \"image__tag\",\n      src: item.product.images && item.product.images[0]\n    })))), __jsx(\"td\", {\n      className: \"cart-table__column cart-table__column--product\"\n    }, __jsx(AppLink, {\n      href: url.product(item.product),\n      className: \"cart-table__product-name\"\n    }, item.product.name), item.options.length > 0 && __jsx(\"ul\", {\n      className: \"cart-table__options\"\n    }, item.options.map(function (option, optionIndex) {\n      return __jsx(\"li\", {\n        key: optionIndex\n      }, \"\".concat(option.name, \": \").concat(option.value));\n    }))), __jsx(\"td\", {\n      className: \"cart-table__column cart-table__column--price\",\n      \"data-title\": intl.formatMessage({\n        id: 'TABLE_PRICE'\n      })\n    }, __jsx(CurrencyFormat, {\n      value: item.price\n    })), __jsx(\"td\", {\n      className: \"cart-table__column cart-table__column--quantity\",\n      \"data-title\": intl.formatMessage({\n        id: 'TABLE_QUANTITY'\n      })\n    }, __jsx(InputNumber, {\n      min: 1,\n      className: \"cart-table__quantity\",\n      value: getItemQuantity(item),\n      onChange: function onChange(quantity) {\n        return handleChangeQuantity(item, quantity);\n      }\n    })), __jsx(\"td\", {\n      className: \"cart-table__column cart-table__column--total\",\n      \"data-title\": intl.formatMessage({\n        id: 'TABLE_TOTAL'\n      })\n    }, __jsx(CurrencyFormat, {\n      value: item.total\n    })), __jsx(\"td\", {\n      className: \"cart-table__column cart-table__column--remove\"\n    }, __jsx(AsyncAction, {\n      action: function action() {\n        return cartRemoveItem(item.id);\n      },\n      render: function render(_ref) {\n        var run = _ref.run,\n            loading = _ref.loading;\n        return __jsx(\"button\", {\n          type: \"button\",\n          className: classNames('cart-table__remove', 'btn', 'btn-sm', 'btn-icon', 'btn-muted', {\n            'btn-loading': loading\n          }),\n          onClick: run\n        }, __jsx(Cross12Svg, null));\n      }\n    })));\n  })), __jsx(\"tfoot\", {\n    className: \"cart-table__foot\"\n  }, __jsx(\"tr\", null, __jsx(\"td\", {\n    colSpan: 6\n  }, __jsx(\"div\", {\n    className: \"cart-table__actions\"\n  }, __jsx(\"form\", {\n    className: \"cart-table__coupon-form form-row\"\n  }, __jsx(\"div\", {\n    className: \"form-group mb-0 col flex-grow-1\"\n  }, __jsx(\"label\", {\n    htmlFor: \"coupon-code\",\n    className: \"sr-only\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_COUPON_CODE_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control form-control-sm\",\n    id: \"coupon-code\",\n    placeholder: intl.formatMessage({\n      id: 'INPUT_COUPON_CODE_PLACEHOLDER'\n    })\n  })), __jsx(\"div\", {\n    className: \"form-group mb-0 col-auto\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn btn-sm btn-primary\"\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_APPLY_COUPON\"\n  })))), __jsx(\"div\", {\n    className: \"cart-table__update-button\"\n  }, __jsx(AsyncAction, {\n    action: updateQuantities,\n    render: function render(_ref2) {\n      var run = _ref2.run,\n          loading = _ref2.loading;\n      return __jsx(\"button\", {\n        type: \"button\",\n        className: classNames('btn', 'btn-sm', 'btn-primary', {\n          'btn-loading': loading\n        }),\n        disabled: !cartNeedUpdate(),\n        onClick: run\n      }, __jsx(FormattedMessage, {\n        id: \"BUTTON_UPDATE_CART\"\n      }));\n    }\n  })))))));\n\n  var totals = __jsx(\"div\", {\n    className: \"card\"\n  }, __jsx(\"div\", {\n    className: \"card-body card-body--padding--2\"\n  }, __jsx(\"h3\", {\n    className: \"card-title\"\n  }, __jsx(FormattedMessage, {\n    id: \"HEADER_CART_TOTALS\"\n  })), __jsx(\"table\", {\n    className: \"cart__totals-table\"\n  }, cart.totals.length > 0 && __jsx(React.Fragment, null, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, __jsx(FormattedMessage, {\n    id: \"TABLE_TOTAL\"\n  })), __jsx(\"td\", null, __jsx(CurrencyFormat, {\n    value: cart.subtotal\n  })))))), __jsx(AppLink, {\n    href: url.checkout(),\n    className: \"btn btn-primary btn-xl btn-block\"\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_PROCEED_TO_CHECKOUT\"\n  }))));\n\n  return __jsx(React.Fragment, null, __jsx(PageTitle, null, intl.formatMessage({\n    id: 'HEADER_SHOPPING_CART'\n  })), __jsx(BlockHeader, {\n    pageTitle: __jsx(FormattedMessage, {\n      id: \"HEADER_SHOPPING_CART\"\n    }),\n    breadcrumb: [{\n      title: intl.formatMessage({\n        id: 'LINK_HOME'\n      }),\n      url: url.home()\n    }, {\n      title: intl.formatMessage({\n        id: 'LINK_CART'\n      }),\n      url: url.cart()\n    }]\n  }), __jsx(\"div\", {\n    className: \"block\"\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"div\", {\n    className: \"cart\"\n  }, __jsx(\"div\", {\n    className: \"cart__table cart-table\"\n  }, table), __jsx(\"div\", {\n    className: \"cart__totals\"\n  }, totals)))), __jsx(BlockSpace, {\n    layout: \"before-footer\"\n  }));\n}\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}