{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'; // application\n\nimport { MobileMenuContext } from '~/services/mobile-menu';\n\nfunction MobileMenuConveyor(props) {\n  const {\n    controllerRef,\n    children\n  } = props;\n  const ref = useRef(null);\n  const lastPanelIdRef = useRef(0);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    stack: [],\n    bin: []\n  });\n  const controller = useMemo(() => ({\n    reset: () => {\n      setState({\n        stack: [],\n        bin: []\n      });\n    }\n  }), []);\n  useEffect(() => {\n    if (controllerRef) {\n      if ('current' in controllerRef) {\n        controllerRef.current = controller;\n      } else {\n        controllerRef(controller);\n      }\n    }\n  }, [controller, controllerRef]);\n  const open = useCallback(id => {\n    setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      stack: [...prevState.stack, id]\n    }));\n  }, []);\n  const close = useCallback(() => {\n    setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      stack: [...prevState.stack.slice(0, -1)],\n      bin: [...prevState.bin, ...prevState.stack.slice(-1)]\n    }));\n  }, []);\n\n  const onTransitionEnd = event => {\n    if (event.target === ref.current && event.propertyName === 'transform') {\n      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n        bin: []\n      }));\n    }\n  };\n\n  const contextData = useMemo(() => ({\n    lastPanelIdRef,\n    containerRef: ref,\n    open,\n    close,\n    stack: state.stack,\n    bin: state.bin\n  }), [ref, open, close, state.stack, state.bin]);\n  return __jsx(\"div\", {\n    ref: ref,\n    className: \"mobile-menu__conveyor\",\n    style: {\n      transform: `translateX(-${state.stack.length * 100}%)`\n    },\n    onTransitionEnd: onTransitionEnd\n  }, __jsx(MobileMenuContext.Provider, {\n    value: contextData\n  }, children));\n}\n\nexport default MobileMenuConveyor;","map":null,"metadata":{},"sourceType":"module"}