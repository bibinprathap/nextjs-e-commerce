{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n// react\nimport React, { useMemo } from 'react'; // third-party\n\nimport { FormattedMessage } from 'react-intl'; // application\n\nimport Dropdown from '~/components/header/Dropdown';\nimport { getAllLanguages } from '~/services/i18n/utils';\n// data\nimport { useLanguage, useSetLocale } from '~/services/i18n/hooks';\n\nfunction DropdownLanguage() {\n  var language = useLanguage();\n  var setLocale = useSetLocale();\n\n  var handleItemClick = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLocale(item.language.locale);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleItemClick(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var items = useMemo(function () {\n    return getAllLanguages().map(function (eachLanguage) {\n      return {\n        title: eachLanguage.name,\n        image: eachLanguage.icon,\n        language: eachLanguage\n      };\n    });\n  }, []);\n\n  var label = __jsx(React.Fragment, null, __jsx(FormattedMessage, {\n    id: \"TEXT_TOPBAR_LANGUAGE\"\n  }), \":\");\n\n  return __jsx(Dropdown, {\n    label: label,\n    title: language.code.toUpperCase(),\n    items: items,\n    onItemClick: handleItemClick\n  });\n}\n\nexport default DropdownLanguage;","map":null,"metadata":{},"sourceType":"module"}