{"ast":null,"code":"var __jsx = React.createElement;\n// react\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'; // third-party\n\nimport InputRange from 'react-input-range'; // application\n\nimport CurrencyFormat from '~/components/shared/CurrencyFormat';\nimport { useDirection } from '~/services/i18n/hooks';\n\nfunction getFirstValidValue(...values) {\n  return values.reduce((acc, value) => acc === null && (value || value === 0) ? value : acc, null);\n}\n\nfunction FilterRange(props) {\n  const {\n    options,\n    value,\n    onChangeValue\n  } = props;\n  const [propsFrom, propsTo] = value || [];\n  const {\n    0: timer,\n    1: setTimer\n  } = useState();\n  const {\n    0: state,\n    1: setState\n  } = useState([propsFrom, propsTo]);\n  const [stateFrom, stateTo] = state;\n  const direction = useDirection();\n  let {\n    min,\n    max\n  } = options;\n  let from = Math.max(getFirstValidValue(stateFrom, propsFrom, min), min);\n  let to = Math.min(getFirstValidValue(stateTo, propsTo, max), max);\n  let fromLabel = from;\n  let toLabel = to; // since react-input-range does not support RTL direction,\n  // we just need to invert and swipe values\n\n  if (direction === 'rtl') {\n    [from, to] = [to * -1, from * -1];\n    [min, max] = [max * -1, min * -1];\n    [fromLabel, toLabel] = [from * -1, to * -1];\n  } // Update state from props.\n\n\n  useEffect(() => {\n    setState([propsFrom, propsTo]);\n  }, [propsFrom, propsTo]); // Clear previous timer.\n\n  useEffect(() => () => {\n    clearTimeout(timer);\n  }, [timer]);\n  const handleChange = useCallback(newValue => {\n    let {\n      min: newFrom,\n      max: newTo\n    } = newValue; // This is needed to fix a bug in react-input-range.\n\n    [newFrom, newTo] = [Math.max(newFrom, min), Math.min(newTo, max)]; // since react-input-range does not support RTL direction,\n    // we just need to invert and swipe values\n\n    if (direction === 'rtl') {\n      [newFrom, newTo] = [newTo * -1, newFrom * -1];\n    }\n\n    setState([newFrom, newTo]);\n\n    if (onChangeValue) {\n      setTimer(setTimeout(() => {\n        onChangeValue({\n          filter: options,\n          value: [newFrom, newTo]\n        });\n      }, 250));\n    }\n  }, [min, max, options, onChangeValue, direction, setTimer, setState]);\n  return useMemo(() => __jsx(\"div\", {\n    className: \"filter-range\"\n  }, __jsx(\"div\", {\n    className: \"filter-range__slider\",\n    dir: \"ltr\"\n  }, __jsx(InputRange, {\n    minValue: min,\n    maxValue: max,\n    value: {\n      min: from,\n      max: to\n    },\n    step: 1,\n    onChange: handleChange\n  })), __jsx(\"div\", {\n    className: \"filter-range__title-button\"\n  }, __jsx(\"div\", {\n    className: \"filter-range__title\"\n  }, __jsx(\"span\", {\n    className: \"filter-range__min-value\"\n  }, __jsx(CurrencyFormat, {\n    value: fromLabel\n  })), ' â€“ ', __jsx(\"span\", {\n    className: \"filter-range__max-value\"\n  }, __jsx(CurrencyFormat, {\n    value: toLabel\n  }))))), [min, max, from, to, fromLabel, toLabel, handleChange]);\n}\n\nexport default FilterRange;","map":null,"metadata":{},"sourceType":"module"}