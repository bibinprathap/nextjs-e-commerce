{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { prepareCategory } from '~/fake-server/endpoints/categories';\nimport { shopCategoriesList, shopCategoriesTree } from '~/fake-server/database/categories';\nexport class CategoryFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"value\", null);\n\n    _defineProperty(this, \"items\", []);\n  }\n\n  test() {\n    return true;\n  }\n\n  makeItems(products, value) {\n    this.value = value === undefined ? null : value;\n    const category = shopCategoriesList.find(x => x.slug === value);\n\n    if (category) {\n      this.items = [prepareCategory(category, 1)];\n    } else {\n      this.items = shopCategoriesTree.map(x => prepareCategory(x));\n    }\n  }\n\n  calc() {}\n\n  build() {\n    return {\n      type: 'category',\n      slug: this.slug,\n      name: this.name,\n      items: this.items,\n      value: this.value\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}