{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { products as dbProducts } from '~/fake-server/database/products';\nexport class RatingFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"value\", []);\n  }\n\n  test(product) {\n    if (this.value.length === 0) {\n      return true;\n    }\n\n    return this.value.reduce((acc, value) => acc || this.extractItem(product).rating === value, false);\n  }\n\n  makeItems(products, value) {\n    products.forEach(product => {\n      const item = this.extractItem(product);\n\n      if (!this.items.find(x => x.rating === item.rating)) {\n        this.items.push(item);\n      }\n    });\n    this.value = this.parseValue(value);\n    this.items.sort((a, b) => b.rating - a.rating);\n  }\n\n  calc(filters) {\n    const products = dbProducts.filter(product => filters.reduce((isMatched, filter) => isMatched && (filter === this || filter.test(product)), true));\n    this.items = this.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n      count: products.reduce((acc, product) => acc + (item.rating === this.extractItem(product).rating ? 1 : 0), 0)\n    }));\n  }\n\n  build() {\n    return {\n      type: 'rating',\n      slug: this.slug,\n      name: this.name,\n      items: this.items,\n      value: this.value\n    };\n  }\n\n  parseValue(value) {\n    return value ? value.split(',').map(x => parseFloat(x)) : [];\n  } // noinspection JSMethodCanBeStatic\n\n\n  extractItem(product) {\n    return {\n      rating: Math.round(product.rating || 0),\n      count: 0\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}