{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// react\nimport React, { useEffect, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { FormProvider, useForm } from 'react-hook-form'; // application\n\nimport AccountLayout from '~/components/account/AccountLayout';\nimport AddressForm, { getAddressFormDefaultValue } from '~/components/shared/AddressForm';\nimport Checkbox from '~/components/shared/Checkbox';\nimport PageTitle from '~/components/shared/PageTitle';\nimport url from '~/services/url';\nimport { accountApi } from '~/api';\nimport { useAppRouter } from '~/services/router';\nimport { useAsyncAction } from '~/store/hooks';\n\nfunction Page() {\n  var router = useAppRouter();\n  var intl = useIntl();\n  var addressId = router.query.id === 'new' || typeof router.query.id !== 'string' ? null : parseFloat(router.query.id);\n  var formMethods = useForm({\n    defaultValues: {\n      address: getAddressFormDefaultValue(),\n      \"default\": false\n    }\n  });\n  var register = formMethods.register,\n      handleSubmit = formMethods.handleSubmit,\n      reset = formMethods.reset;\n\n  var _useState = useState(false),\n      firstOrDefaultAddress = _useState[0],\n      setFirstOrDefaultAddress = _useState[1];\n\n  var _useAsyncAction = useAsyncAction(function (data) {\n    var addressData = _objectSpread(_objectSpread({}, data.address), {}, {\n      \"default\": data[\"default\"] || firstOrDefaultAddress\n    });\n\n    var saveMethod;\n\n    if (addressId) {\n      saveMethod = accountApi.editAddress(addressId, addressData);\n    } else {\n      saveMethod = accountApi.addAddress(addressData);\n    }\n\n    return saveMethod.then(function () {\n      return router.push(url.accountAddresses());\n    });\n  }, [router, addressId, firstOrDefaultAddress]),\n      _useAsyncAction2 = _slicedToArray(_useAsyncAction, 2),\n      submit = _useAsyncAction2[0],\n      submitInProgress = _useAsyncAction2[1];\n\n  useEffect(function () {\n    var canceled = false;\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$Promise$all, _yield$Promise$all2, address, defaultAddress, firstOrDefaultAddress;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Promise.all([addressId ? accountApi.getAddress(addressId) : Promise.resolve(null), accountApi.getDefaultAddress()]);\n\n            case 2:\n              _yield$Promise$all = _context.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              address = _yield$Promise$all2[0];\n              defaultAddress = _yield$Promise$all2[1];\n\n              if (!canceled) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 8:\n              firstOrDefaultAddress = defaultAddress === null || address !== null && address[\"default\"];\n              setFirstOrDefaultAddress(firstOrDefaultAddress);\n              reset({\n                address: getAddressFormDefaultValue(address),\n                \"default\": firstOrDefaultAddress\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n\n    return function () {\n      canceled = true;\n    };\n  }, [reset, addressId]);\n  return __jsx(\"div\", {\n    className: \"card\"\n  }, __jsx(PageTitle, null, addressId ? intl.formatMessage({\n    id: 'HEADER_EDIT_ADDRESS'\n  }) : intl.formatMessage({\n    id: 'HEADER_NEW_ADDRESS'\n  })), __jsx(\"div\", {\n    className: \"card-header\"\n  }, __jsx(\"h5\", null, addressId ? __jsx(FormattedMessage, {\n    id: \"HEADER_EDIT_ADDRESS\"\n  }) : __jsx(FormattedMessage, {\n    id: \"HEADER_NEW_ADDRESS\"\n  }))), __jsx(\"div\", {\n    className: \"card-divider\"\n  }), __jsx(\"div\", {\n    className: \"card-body card-body--padding--2\"\n  }, __jsx(\"div\", {\n    className: \"row no-gutters\"\n  }, __jsx(FormProvider, formMethods, __jsx(\"form\", {\n    className: \"col-12 col-lg-10 col-xl-8\",\n    onSubmit: handleSubmit(submit)\n  }, __jsx(AddressForm, {\n    namespace: \"address\",\n    idPrefix: \"address\"\n  }), __jsx(\"div\", {\n    className: \"form-group mt-3\"\n  }, __jsx(\"div\", {\n    className: \"form-check\"\n  }, __jsx(Checkbox, {\n    id: \"address-form-id-default\",\n    name: \"default\",\n    className: \"form-check-input\",\n    disabled: firstOrDefaultAddress,\n    inputRef: register()\n  }), __jsx(\"label\", {\n    htmlFor: \"address-form-id-default\",\n    className: \"form-check-label\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_SET_AS_MY_DEFAULT_ADDRESS_LABEL\"\n  })))), __jsx(\"div\", {\n    className: \"form-group mb-0 pt-3 mt-3\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: classNames('btn', 'btn-primary', {\n      'btn-loading': submitInProgress\n    })\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_SAVE\"\n  }))))))));\n}\n\nPage.Layout = AccountLayout;\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}