{"ast":null,"code":"var __jsx = React.createElement;\n// react\nimport React, { useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { useForm } from 'react-hook-form'; // application\n\nimport AccountLayout from '~/components/account/AccountLayout';\nimport PageTitle from '~/components/shared/PageTitle';\nimport { accountApi } from '~/api';\nimport { useAsyncAction } from '~/store/hooks';\n\nfunction Page() {\n  var _errors$currentPasswo, _errors$newPassword, _errors$confirmPasswo, _errors$confirmPasswo2;\n\n  const intl = useIntl();\n  const {\n    0: serverError,\n    1: setServerError\n  } = useState(null);\n  const {\n    register,\n    errors,\n    watch,\n    handleSubmit\n  } = useForm();\n  const [submit, submitInProgress] = useAsyncAction(data => {\n    setServerError(null);\n    return accountApi.changePassword(data.currentPassword, data.newPassword).then(() => {\n      toast.success(intl.formatMessage({\n        id: 'TEXT_TOAST_PASSWORD_CHANGED'\n      }));\n    }, error => {\n      setServerError(`ERROR_API_${error.message}`);\n    });\n  }, [intl]);\n  return __jsx(\"div\", {\n    className: \"card\"\n  }, __jsx(PageTitle, null, intl.formatMessage({\n    id: 'HEADER_CHANGE_PASSWORD'\n  })), __jsx(\"div\", {\n    className: \"card-header\"\n  }, __jsx(\"h5\", null, __jsx(FormattedMessage, {\n    id: \"HEADER_CHANGE_PASSWORD\"\n  }))), __jsx(\"div\", {\n    className: \"card-divider\"\n  }), __jsx(\"div\", {\n    className: \"card-body card-body--padding--2\"\n  }, __jsx(\"div\", {\n    className: \"row no-gutters\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(submit),\n    className: \"col-12 col-lg-7 col-xl-6\"\n  }, serverError && __jsx(\"div\", {\n    className: \"alert alert-sm alert-danger\"\n  }, __jsx(FormattedMessage, {\n    id: serverError\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"password-current\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_PASSWORD_CURRENT_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"password\",\n    id: \"password-current\",\n    name: \"currentPassword\",\n    className: classNames('form-control', {\n      'is-invalid': errors.currentPassword\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_PASSWORD_CURRENT_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$currentPasswo = errors.currentPassword) === null || _errors$currentPasswo === void 0 ? void 0 : _errors$currentPasswo.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"password-new\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_PASSWORD_NEW_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"password\",\n    id: \"password-new\",\n    name: \"newPassword\",\n    className: classNames('form-control', {\n      'is-invalid': errors.newPassword\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_PASSWORD_NEW_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$newPassword = errors.newPassword) === null || _errors$newPassword === void 0 ? void 0 : _errors$newPassword.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"password-confirm\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_PASSWORD_REPEAT_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"password\",\n    id: \"password-confirm\",\n    name: \"confirmPassword\",\n    className: classNames('form-control', {\n      'is-invalid': errors.confirmPassword\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_PASSWORD_REPEAT_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true,\n      validate: {\n        match: value => value === watch('newPassword')\n      }\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$confirmPasswo = errors.confirmPassword) === null || _errors$confirmPasswo === void 0 ? void 0 : _errors$confirmPasswo.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }), ((_errors$confirmPasswo2 = errors.confirmPassword) === null || _errors$confirmPasswo2 === void 0 ? void 0 : _errors$confirmPasswo2.type) === 'match' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_PASSWORD_DOES_NOT_MATCH\"\n  }))), __jsx(\"div\", {\n    className: \"form-group mb-0\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: classNames('btn', 'btn-primary', 'mt-3', {\n      'btn-loading': submitInProgress\n    })\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_CHANGE\"\n  })))))));\n}\n\nPage.Layout = AccountLayout;\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}