{"ast":null,"code":"var __jsx = React.createElement;\n// react\nimport React, { useMemo, useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames'; // application\n\nimport AppLink from '~/components/shared/AppLink';\nimport { useGlobalMousedown } from '~/services/hooks';\n\nfunction Indicator(props) {\n  var icon = props.icon,\n      href = props.href,\n      label = props.label,\n      value = props.value,\n      counter = props.counter,\n      _props$trigger = props.trigger,\n      trigger = _props$trigger === void 0 ? 'none' : _props$trigger,\n      children = props.children,\n      controllerRef = props.controllerRef;\n  var hasLabel = label !== undefined && label !== null;\n  var hasValue = value !== undefined && value !== null;\n  var buttonType = href !== undefined ? 'link' : 'button';\n  var showCounter = counter !== undefined && counter !== null;\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var rootRef = useRef(null);\n  var controller = useMemo(function () {\n    return {\n      close: function close() {\n        return setIsOpen(false);\n      }\n    };\n  }, [setIsOpen]);\n\n  if (controllerRef) {\n    controllerRef.current = controller;\n  }\n\n  useGlobalMousedown(function (event) {\n    if (rootRef.current && !rootRef.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  }, [setIsOpen, rootRef]);\n\n  var handleButtonClick = function handleButtonClick(event) {\n    if (trigger === 'click') {\n      event.preventDefault();\n      setIsOpen(function (prevState) {\n        return !prevState;\n      });\n    }\n  };\n\n  var buttonContent = __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"indicator__icon\"\n  }, icon, showCounter && __jsx(\"span\", {\n    className: \"indicator__counter\"\n  }, counter)), hasLabel && __jsx(\"span\", {\n    className: \"indicator__title\"\n  }, label), hasValue && __jsx(\"span\", {\n    className: \"indicator__value\"\n  }, value));\n\n  var rootClasses = classNames('indicator', \"indicator--trigger--\".concat(trigger), {\n    'indicator--open': isOpen\n  });\n  return __jsx(\"div\", {\n    className: rootClasses,\n    ref: rootRef\n  }, buttonType === 'button' && __jsx(\"button\", {\n    className: \"indicator__button\",\n    type: \"button\",\n    onClick: handleButtonClick\n  }, buttonContent), buttonType === 'link' && __jsx(AppLink, {\n    href: href,\n    className: \"indicator__button\",\n    onClick: handleButtonClick\n  }, buttonContent), __jsx(\"div\", {\n    className: \"indicator__content\"\n  }, children));\n}\n\nexport default Indicator;","map":null,"metadata":{},"sourceType":"module"}