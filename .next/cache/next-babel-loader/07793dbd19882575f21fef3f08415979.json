{"ast":null,"code":"var __jsx = React.createElement;\n// react\nimport React, { useEffect } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { useForm } from 'react-hook-form'; // application\n\nimport AccountLayout from '~/components/account/AccountLayout';\nimport PageTitle from '~/components/shared/PageTitle';\nimport { useAsyncAction } from '~/store/hooks';\nimport { useUser, useUserEditProfile } from '~/store/user/userHooks';\nimport { validateEmail } from '~/services/validators';\n\nfunction Page() {\n  var _errors$firstName, _errors$lastName, _errors$email, _errors$email2, _errors$phone;\n\n  const intl = useIntl();\n  const user = useUser();\n  const userEditProfile = useUserEditProfile();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    errors\n  } = useForm({\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: ''\n    }\n  });\n  const [submit, submitInProgress] = useAsyncAction(async data => {\n    await userEditProfile(data);\n    toast.success(intl.formatMessage({\n      id: 'TEXT_TOAST_PROFILE_SAVED'\n    }));\n  }, [userEditProfile, intl]);\n  useEffect(() => {\n    reset({\n      firstName: (user === null || user === void 0 ? void 0 : user.firstName) || '',\n      lastName: (user === null || user === void 0 ? void 0 : user.lastName) || '',\n      email: (user === null || user === void 0 ? void 0 : user.email) || '',\n      phone: (user === null || user === void 0 ? void 0 : user.phone) || ''\n    });\n  }, [user, reset]);\n  return __jsx(\"div\", {\n    className: \"card\"\n  }, __jsx(PageTitle, null, intl.formatMessage({\n    id: 'HEADER_EDIT_PROFILE'\n  })), __jsx(\"div\", {\n    className: \"card-header\"\n  }, __jsx(\"h5\", null, __jsx(FormattedMessage, {\n    id: \"HEADER_EDIT_PROFILE\"\n  }))), __jsx(\"div\", {\n    className: \"card-divider\"\n  }), __jsx(\"div\", {\n    className: \"card-body card-body--padding--2\"\n  }, __jsx(\"div\", {\n    className: \"row no-gutters\"\n  }, __jsx(\"div\", {\n    className: \"col-12 col-lg-7 col-xl-6\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(submit)\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"profile-first-name\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_FIRST_NAME_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"profile-first-name\",\n    name: \"firstName\",\n    className: classNames('form-control', {\n      'is-invalid': errors.firstName\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_FIRST_NAME_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$firstName = errors.firstName) === null || _errors$firstName === void 0 ? void 0 : _errors$firstName.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"profile-last-name\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_LAST_NAME_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"profile-last-name\",\n    name: \"lastName\",\n    className: classNames('form-control', {\n      'is-invalid': errors.lastName\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_LAST_NAME_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$lastName = errors.lastName) === null || _errors$lastName === void 0 ? void 0 : _errors$lastName.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"profile-email\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_EMAIL_ADDRESS_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"email\",\n    id: \"profile-email\",\n    name: \"email\",\n    className: classNames('form-control', {\n      'is-invalid': errors.email\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_EMAIL_ADDRESS_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true,\n      validate: {\n        email: validateEmail\n      }\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }), ((_errors$email2 = errors.email) === null || _errors$email2 === void 0 ? void 0 : _errors$email2.type) === 'email' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_INCORRECT_EMAIL\"\n  }))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"profile-phone\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_PHONE_NUMBER_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"profile-phone\",\n    name: \"phone\",\n    className: classNames('form-control', {\n      'is-invalid': errors.phone\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_PHONE_NUMBER_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$phone = errors.phone) === null || _errors$phone === void 0 ? void 0 : _errors$phone.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group mb-0\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: classNames('btn', 'btn-primary', 'mt-3', {\n      'btn-loading': submitInProgress\n    })\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_SAVE\"\n  }))))))));\n}\n\nPage.Layout = AccountLayout;\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}