{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n// react\nimport React, { useEffect, useState } from 'react'; // third-party\n\nimport { FormattedMessage, useIntl } from 'react-intl'; // application\n\nimport AccountLayout from '~/components/account/AccountLayout';\nimport AddressCard from '~/components/shared/AddressCard';\nimport AppLink from '~/components/shared/AppLink';\nimport AsyncAction from '~/components/shared/AsyncAction';\nimport PageTitle from '~/components/shared/PageTitle';\nimport url from '~/services/url';\nimport { accountApi } from '~/api';\n\nfunction Page() {\n  var intl = useIntl();\n\n  var _useState = useState([]),\n      addresses = _useState[0],\n      setAddresses = _useState[1];\n\n  var delAddress = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(addressId) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return accountApi.delAddress(addressId);\n\n            case 2:\n              _context.next = 4;\n              return accountApi.getAddresses().then(setAddresses);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function delAddress(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var canceled = false;\n    accountApi.getAddresses().then(function (result) {\n      if (canceled) {\n        return;\n      }\n\n      setAddresses(result);\n    });\n    return function () {\n      canceled = true;\n    };\n  }, []);\n  return __jsx(\"div\", {\n    className: \"addresses-list\"\n  }, __jsx(PageTitle, null, intl.formatMessage({\n    id: 'HEADER_ADDRESSES'\n  })), __jsx(AppLink, {\n    href: url.accountAddressNew(),\n    className: \"addresses-list__item addresses-list__item--new\"\n  }, __jsx(\"div\", {\n    className: \"addresses-list__plus\"\n  }), __jsx(\"div\", {\n    className: \"btn btn-secondary btn-sm\"\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_ADD_NEW\"\n  }))), __jsx(\"div\", {\n    className: \"addresses-list__divider\"\n  }), addresses.map(function (address, index) {\n    return __jsx(React.Fragment, {\n      key: index\n    }, __jsx(AsyncAction, {\n      action: function action() {\n        return delAddress(address.id);\n      },\n      render: function render(_ref2) {\n        var run = _ref2.run,\n            loading = _ref2.loading;\n        return __jsx(AddressCard, {\n          className: \"addresses-list__item\",\n          address: address,\n          label: address[\"default\"] ? __jsx(FormattedMessage, {\n            id: \"TEXT_DEFAULT_ADDRESS\"\n          }) : '',\n          loading: loading,\n          footer: __jsx(React.Fragment, null, __jsx(AppLink, {\n            href: url.accountAddressEdit(address)\n          }, __jsx(FormattedMessage, {\n            id: \"LINK_EDIT_ADDRESS\"\n          })), \"\\xA0\\xA0\", __jsx(AppLink, {\n            anchor: true,\n            onClick: function onClick(event) {\n              event.preventDefault();\n              run();\n            }\n          }, __jsx(FormattedMessage, {\n            id: \"LINK_REMOVE\"\n          })))\n        });\n      }\n    }), __jsx(\"div\", {\n      className: \"addresses-list__divider\"\n    }));\n  }));\n}\n\nPage.Layout = AccountLayout;\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}