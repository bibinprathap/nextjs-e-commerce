{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React from 'react'; // third-party\n\nimport Link from 'next/link';\nimport { format as formatUrl, parse as parseUrl } from 'url'; // application\n\nimport { getDefaultLocale } from '~/services/i18n/utils';\nimport { useLocale } from '~/services/i18n/hooks';\nimport { baseUrl } from '~/services/utils';\nexport function normalizeHref(href) {\n  const result = _objectSpread({}, parseUrl(typeof href === 'string' ? href : formatUrl(href), true));\n\n  delete result.host;\n  delete result.href;\n  delete result.path;\n  delete result.search;\n  result.query = result.query || {};\n  return result;\n}\nexport function normalizeLinkHref(data) {\n  const result = typeof data === 'string' ? {\n    href: data\n  } : data;\n  return _objectSpread(_objectSpread({}, result), {}, {\n    href: normalizeHref(result.href),\n    as: normalizeHref(result.as || result.href)\n  });\n}\n\nfunction addLocale(url, locale) {\n  return _objectSpread(_objectSpread({}, url), {}, {\n    pathname: !url.pathname || locale === getDefaultLocale() ? url.pathname : `/${locale}${url.pathname}`\n  });\n}\n\nfunction AppLink(props) {\n  const {\n    href,\n    children,\n    anchor = false\n  } = props,\n        anchorProps = _objectWithoutProperties(props, [\"href\", \"children\", \"anchor\"]);\n\n  const locale = useLocale();\n  const data = normalizeLinkHref(href || '');\n  const isExternal = !!data.href.hostname;\n  const hasPath = !!data.href.pathname;\n  const onlyHash = formatUrl(data.href).startsWith('#');\n\n  if (isExternal || anchor || onlyHash) {\n    let anchorHref;\n\n    if (!isExternal && hasPath) {\n      data.href = addLocale(data.href, locale);\n      anchorHref = baseUrl(formatUrl(data.href));\n    } else {\n      anchorHref = formatUrl(data.href);\n    }\n\n    return __jsx(\"a\", _extends({\n      href: anchorHref\n    }, anchorProps), children);\n  }\n\n  data.href.query = _objectSpread(_objectSpread({}, data.href.query), {}, {\n    lang: locale\n  });\n  data.as = addLocale(data.as, locale);\n  return __jsx(Link, data, __jsx(\"a\", anchorProps, children));\n}\n\nexport default AppLink;","map":null,"metadata":{},"sourceType":"module"}