{"ast":null,"code":"var __jsx = React.createElement;\n// react\nimport React, { useCallback, useEffect, useMemo } from 'react'; // third-party\n\nimport { IntlProvider } from 'react-intl'; // application\n\nimport GlobalIntlProvider from '~/services/i18n/global-intl';\nimport { LanguageLocaleContext, LanguageSetLocaleContext } from '~/services/i18n/context';\nimport { useOriginalRouter } from '~/services/router';\nimport { getDefaultLanguage, getDefaultLocale, getLanguageByPath, loadMessages } from '~/services/i18n/utils';\nconst cache = {};\nexport async function getLanguageInitialProps(language) {\n  const locale = language ? language.locale : getDefaultLocale();\n\n  if (false) {\n    if (!cache[locale]) {\n      cache[locale] = loadMessages(locale);\n    }\n\n    return {\n      messages: await cache[locale]\n    };\n  }\n\n  return {\n    messages: await loadMessages(locale)\n  };\n}\n\nfunction LanguageProvider(props) {\n  const {\n    children,\n    messages\n  } = props;\n  const router = useOriginalRouter();\n  const language = useMemo(() => getLanguageByPath(router.asPath) || getDefaultLanguage(), [router.asPath]);\n  const {\n    locale\n  } = language; // Puts the initial translation into the cache.\n\n  useEffect(() => {\n    if (!cache[locale]) {\n      cache[locale] = Promise.resolve(messages);\n    }\n  }, [locale, messages]);\n  const setLocale = useCallback(newLocale => {\n    setTimeout(() => {\n      const language = getLanguageByPath(router.asPath);\n      let path = router.asPath;\n\n      if (language) {\n        path = `/${router.asPath.substr(language.locale.length + 2)}`;\n      }\n\n      const {\n        query\n      } = router;\n      const newPath = newLocale === getDefaultLocale() ? path : `/${newLocale}${path}`;\n\n      if (newLocale !== getDefaultLocale()) {\n        query.lang = newLocale;\n      } else {\n        delete query.lang;\n      }\n\n      router.push({\n        pathname: router.pathname,\n        query\n      }, newPath).then();\n    }, 0);\n  }, [router]);\n  useEffect(() => {\n    document.documentElement.lang = language.locale;\n    document.documentElement.dir = language.direction;\n  }, [language]);\n  return __jsx(LanguageLocaleContext.Provider, {\n    value: locale\n  }, __jsx(LanguageSetLocaleContext.Provider, {\n    value: setLocale\n  }, __jsx(IntlProvider, {\n    locale: locale,\n    messages: messages\n  }, __jsx(GlobalIntlProvider, null, children))));\n}\n\nexport default LanguageProvider;","map":null,"metadata":{},"sourceType":"module"}