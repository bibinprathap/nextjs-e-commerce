{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export */\n// react\nimport { useMemo } from 'react'; // third-party\n\nimport { useRouter } from 'next/router';\n// application\nimport { getDefaultLocale } from '~/services/i18n/utils';\nimport { normalizeHref, normalizeLinkHref } from '~/components/shared/AppLink';\nimport { useLocale } from '~/services/i18n/hooks';\nexport function hrefToRouterArgs(linkHref) {\n  const {\n    href,\n    as,\n    shallow\n  } = normalizeLinkHref(linkHref);\n  return [href, as, {\n    shallow\n  }];\n}\n\nfunction normalizeRouterArgs(args, locale) {\n  const [url, as, options] = args;\n  const normalizedUrl = normalizeHref(url);\n  const normalizedAs = normalizeHref(as || url);\n  normalizedUrl.query = _objectSpread({}, normalizedUrl.query);\n  normalizedAs.pathname = locale === getDefaultLocale() ? normalizedAs.pathname : `/${locale}${normalizedAs.pathname}`;\n  return [normalizedUrl, normalizedAs, options];\n}\n\nexport function useOriginalRouter() {\n  return useRouter();\n}\nexport function useAppRouter() {\n  const original = useRouter();\n  const locale = useLocale();\n  const mimic = useMemo(() => ({\n    push(...args) {\n      return original.push(...normalizeRouterArgs(args, locale));\n    },\n\n    replace(...args) {\n      return original.replace(...normalizeRouterArgs(args, locale));\n    }\n\n  }), [original, locale]);\n  return useMemo(() => Object.setPrototypeOf(mimic, original), [mimic, original]);\n}","map":null,"metadata":{},"sourceType":"module"}