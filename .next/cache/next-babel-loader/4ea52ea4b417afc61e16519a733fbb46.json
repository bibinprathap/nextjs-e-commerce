{"ast":null,"code":"/* eslint-disable no-alert */\n// react\nimport { useEffect, useMemo, useRef } from 'react'; // third-party\n\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl'; // application\n\nimport { useAsyncAction } from '~/store/hooks';\nimport { useCartAddItem } from '~/store/cart/cartHooks';\nexport function useProductForm(product) {\n  const intl = useIntl();\n  const cartAddItem = useCartAddItem();\n  const methods = useForm({\n    defaultValues: {\n      quantity: 1,\n      options: {\n        material: \"aluminium\",\n        color: \"yellow\"\n      }\n    }\n  });\n  const {\n    handleSubmit\n  } = methods;\n  const {\n    submitCount\n  } = methods.formState;\n  const prevSubmitCount = useRef(0);\n  useEffect(() => {\n    if (prevSubmitCount.current !== submitCount && Object.keys(methods.errors).length > 0) {\n      if (methods.errors.quantity) {\n        alert(intl.formatMessage({\n          id: 'ERROR_ADD_TO_CART_QUANTITY'\n        }));\n      } else if (methods.errors.options) {\n        alert(intl.formatMessage({\n          id: 'ERROR_ADD_TO_CART_OPTIONS'\n        }));\n      }\n    }\n\n    prevSubmitCount.current = submitCount;\n  }, [intl, submitCount, methods.errors]);\n  const [submit, submitInProgress] = useAsyncAction(async data => {\n    debugger;\n\n    if (!product) {\n      return null;\n    }\n\n    const options = [];\n    Object.keys(data.options).forEach(optionSlug => {\n      const option = product.options.find(x => x.slug === optionSlug);\n\n      if (!option) {\n        return;\n      }\n\n      const value = option.values.find(x => x.slug === data.options[optionSlug]);\n\n      if (!value) {\n        return;\n      }\n\n      options.push({\n        name: option.name,\n        value: value.name\n      });\n    });\n    return cartAddItem(product, options, typeof data.quantity === 'number' ? data.quantity : 1);\n  }, [product, cartAddItem]);\n  return {\n    submit: useMemo(() => handleSubmit(submit), [handleSubmit, submit]),\n    submitInProgress: submitInProgress || methods.formState.isSubmitting,\n    errors: methods.errors,\n    register: methods.register,\n    watch: methods.watch,\n    methods\n  };\n}","map":null,"metadata":{},"sourceType":"module"}