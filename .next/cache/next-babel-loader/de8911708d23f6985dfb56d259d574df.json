{"ast":null,"code":"// react\nimport { useCallback } from 'react'; // application\n\nimport { SHOP_NAMESPACE } from '~/store/shop/shopTypes';\nimport { useAppAction, useAppSelector } from '~/store/hooks';\nimport { shopResetFiltersThunk, shopResetFilterThunk, shopSetFilterValueThunk, shopSetOptionValueThunk } from '~/store/shop/shopActions';\nexport function useShopSelector(selector) {\n  return useAppSelector(state => selector(state[SHOP_NAMESPACE]));\n}\nexport const useShop = () => useShopSelector(state => state);\nexport const useShopProductsListIsLoading = () => useShopSelector(state => state.productsListIsLoading);\nexport const useShopProductsList = () => useShopSelector(state => state.productsList);\nexport const useShopOptions = () => useShopSelector(state => state.options);\nexport const useShopFilters = () => useShopSelector(state => {\n  var _state$productsList;\n\n  return ((_state$productsList = state.productsList) === null || _state$productsList === void 0 ? void 0 : _state$productsList.filters) || [];\n});\nexport const useShopFilterValues = () => useShopSelector(state => state.filters);\nexport const useShopResetFiltersThunk = () => useAppAction(shopResetFiltersThunk);\nexport const useShopResetFilterThunk = () => useAppAction(shopResetFilterThunk);\nexport const useShopSetOptionValueThunk = () => useAppAction(shopSetOptionValueThunk);\nexport const useShopSetFilterValueThunk = () => useAppAction(shopSetFilterValueThunk);\nexport function useSetOption(option, filterValueFn, productsList, options = {}) {\n  const callback = useCallback(filterValueFn, []);\n  const shopSetOptionValue = useShopSetOptionValueThunk();\n  return useCallback(data => {\n    shopSetOptionValue(option, callback(data), productsList, options).then();\n  }, [shopSetOptionValue, option, callback]);\n}","map":null,"metadata":{},"sourceType":"module"}