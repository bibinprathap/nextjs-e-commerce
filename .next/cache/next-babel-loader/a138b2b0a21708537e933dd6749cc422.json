{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// react\nimport React, { useEffect, useMemo, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useFormContext } from 'react-hook-form'; // application\n\nimport { countriesApi } from '~/api';\nimport { useDetachableForm } from '~/services/hooks';\nimport { validateEmail } from '~/services/validators';\nexport function getAddressFormDefaultValue() {\n  var initialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return _objectSpread({\n    firstName: '',\n    lastName: '',\n    company: '',\n    country: 'AE',\n    email: '',\n    phone: ''\n  }, initialData);\n}\n\nfunction AddressForm(props) {\n  var _errors$firstName, _errors$lastName, _errors$country, _errors$email, _errors$email2, _errors$phone;\n\n  var namespace = props.namespace,\n      disabled = props.disabled,\n      idPrefix = props.idPrefix;\n  var intl = useIntl();\n  var formMethods = useFormContext();\n  var errorsProps = formMethods.errors;\n  var errors = namespace ? errorsProps[namespace] : errorsProps;\n  var fieldId = idPrefix ? \"\".concat(idPrefix, \"-\") : '';\n  var ns = useMemo(function () {\n    return namespace ? \"\".concat(namespace, \".\") : '';\n  }, [namespace]);\n\n  var _useState = useState(null),\n      countries = _useState[0],\n      setCountries = _useState[1];\n\n  var register = useDetachableForm(formMethods, disabled || false); // Load countries.\n\n  useEffect(function () {\n    var canceled = false;\n    countriesApi.getCountries().then(function (result) {\n      if (canceled) {\n        return;\n      }\n\n      setCountries(result);\n    });\n    return function () {\n      canceled = true;\n    };\n  }, []);\n\n  if (countries === null) {\n    return null;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"form-row\"\n  }, __jsx(\"div\", {\n    className: \"form-group col-md-6\"\n  }, __jsx(\"label\", {\n    htmlFor: \"\".concat(fieldId, \"first-name\")\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_FIRST_NAME_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"\".concat(fieldId, \"first-name\"),\n    name: \"\".concat(ns, \"firstName\"),\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.firstName\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_FIRST_NAME_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$firstName = errors.firstName) === null || _errors$firstName === void 0 ? void 0 : _errors$firstName.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-6\"\n  }, __jsx(\"label\", {\n    htmlFor: \"\".concat(fieldId, \"last-name\")\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_LAST_NAME_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"\".concat(fieldId, \"last-name\"),\n    name: \"\".concat(ns, \"lastName\"),\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.lastName\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_LAST_NAME_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$lastName = errors.lastName) === null || _errors$lastName === void 0 ? void 0 : _errors$lastName.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  })))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"\".concat(fieldId, \"company-name\")\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_COMPANY_LABEL\"\n  }), __jsx(\"span\", {\n    className: \"text-muted\"\n  }, ' (', __jsx(FormattedMessage, {\n    id: \"TEXT_OPTIONAL\"\n  }), \")\")), __jsx(\"input\", {\n    type: \"text\",\n    id: \"\".concat(fieldId, \"company-name\"),\n    name: \"\".concat(ns, \"company\"),\n    className: \"form-control\",\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_COMPANY_PLACEHOLDER'\n    }),\n    ref: register()\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"\".concat(fieldId, \"country\")\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_COUNTRY_LABEL\"\n  })), __jsx(\"select\", {\n    id: \"\".concat(fieldId, \"country\"),\n    name: \"\".concat(ns, \"country\"),\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.country\n    }),\n    disabled: disabled,\n    ref: register({\n      required: true\n    })\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, intl.formatMessage({\n    id: 'INPUT_COUNTRY_PLACEHOLDER'\n  })), countries && countries.map(function (country) {\n    return __jsx(\"option\", {\n      key: country.code,\n      value: country.code\n    }, country.name);\n  })), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$country = errors.country) === null || _errors$country === void 0 ? void 0 : _errors$country.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-row\"\n  }, __jsx(\"div\", {\n    className: \"form-group col-md-6 mb-0\"\n  }, __jsx(\"label\", {\n    htmlFor: \"\".concat(fieldId, \"email\")\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_EMAIL_ADDRESS_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"email\",\n    id: \"\".concat(fieldId, \"email\"),\n    name: \"\".concat(ns, \"email\"),\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.email\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_EMAIL_ADDRESS_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true,\n      validate: {\n        email: validateEmail\n      }\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }), (errors === null || errors === void 0 ? void 0 : (_errors$email2 = errors.email) === null || _errors$email2 === void 0 ? void 0 : _errors$email2.type) === 'email' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_INCORRECT_EMAIL\"\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-6 mb-0\"\n  }, __jsx(\"label\", {\n    htmlFor: \"\".concat(fieldId, \"phone\")\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_PHONE_NUMBER_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"\".concat(fieldId, \"phone\"),\n    name: \"\".concat(ns, \"phone\"),\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.phone\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_PHONE_NUMBER_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$phone = errors.phone) === null || _errors$phone === void 0 ? void 0 : _errors$phone.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  })))));\n}\n\nexport default AddressForm;","map":null,"metadata":{},"sourceType":"module"}