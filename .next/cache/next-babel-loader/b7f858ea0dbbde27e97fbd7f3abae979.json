{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// react\nimport React, { useCallback, useEffect, useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\n// application\nimport AppImageNew from '~/components/shared/AppImageNew';\nimport AppLink from '~/components/shared/AppLink';\nimport AppSlick from '~/components/shared/AppSlick';\nimport { baseUrl } from '~/services/utils';\nimport { useDirection } from '~/services/i18n/hooks';\nimport { ZoomIn24Svg } from '~/svg';\nconst slickSettingsFeatured = {\n  dots: false,\n  arrows: false,\n  infinite: false,\n  speed: 400,\n  slidesToShow: 1,\n  slidesToScroll: 1\n};\nconst slickSettingsThumbnails = {\n  'product-sidebar': {\n    dots: false,\n    arrows: false,\n    infinite: false,\n    speed: 400,\n    slidesToShow: 8,\n    slidesToScroll: 1,\n    responsive: [{\n      breakpoint: 1399,\n      settings: {\n        slidesToShow: 6\n      }\n    }, {\n      breakpoint: 1199,\n      settings: {\n        slidesToShow: 8\n      }\n    }, {\n      breakpoint: 991,\n      settings: {\n        slidesToShow: 8\n      }\n    }, {\n      breakpoint: 767,\n      settings: {\n        slidesToShow: 6\n      }\n    }, {\n      breakpoint: 575,\n      settings: {\n        slidesToShow: 5\n      }\n    }, {\n      breakpoint: 419,\n      settings: {\n        slidesToShow: 4\n      }\n    }]\n  },\n  'product-full': {\n    dots: false,\n    arrows: false,\n    infinite: false,\n    speed: 400,\n    slidesToShow: 6,\n    slidesToScroll: 1,\n    responsive: [{\n      breakpoint: 1399,\n      settings: {\n        slidesToShow: 5\n      }\n    }, {\n      breakpoint: 1199,\n      settings: {\n        slidesToShow: 7\n      }\n    }, {\n      breakpoint: 991,\n      settings: {\n        slidesToShow: 5\n      }\n    }, {\n      breakpoint: 767,\n      settings: {\n        slidesToShow: 6\n      }\n    }, {\n      breakpoint: 575,\n      settings: {\n        slidesToShow: 5\n      }\n    }, {\n      breakpoint: 419,\n      settings: {\n        slidesToShow: 4\n      }\n    }]\n  },\n  quickview: {\n    dots: false,\n    arrows: false,\n    infinite: false,\n    speed: 400,\n    slidesToShow: 5,\n    slidesToScroll: 1,\n    responsive: [{\n      breakpoint: 991,\n      settings: {\n        slidesToShow: 6\n      }\n    }, {\n      breakpoint: 519,\n      settings: {\n        slidesToShow: 5\n      }\n    }, {\n      breakpoint: 439,\n      settings: {\n        slidesToShow: 4\n      }\n    }, {\n      breakpoint: 339,\n      settings: {\n        slidesToShow: 3\n      }\n    }]\n  }\n};\n\nfunction ProductGallery(props) {\n  const {\n    images,\n    layout,\n    className\n  } = props,\n        rootProps = _objectWithoutProperties(props, [\"images\", \"layout\", \"className\"]);\n\n  const direction = useDirection();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    currentIndex: 0,\n    transition: false\n  });\n  const imagesRefs = useRef([]);\n  const slickFeaturedRef = useRef(null);\n  const createGalleryRef = useRef(null);\n  const galleryRef = useRef(null);\n  const getIndexDependOnDirRef = useRef(null);\n  const unmountedRef = useRef(false);\n  const getIndexDependOnDir = useCallback(index => {\n    // we need to invert index id direction === 'rtl' due to react-slick bug\n    if (direction === 'rtl') {\n      return images.length - 1 - index;\n    }\n\n    return index;\n  }, [direction, images]);\n\n  const openPhotoswipe = index => {\n    if (!createGalleryRef.current) {\n      return;\n    }\n\n    const items = imagesRefs.current.map((tag, index) => {\n      if (!tag) {\n        throw Error('Image ref is null');\n      }\n\n      const width = (tag.dataset.width ? parseFloat(tag.dataset.width) : null) || tag.naturalWidth;\n      const height = (tag.dataset.height ? parseFloat(tag.dataset.height) : null) || tag.naturalHeight;\n      return {\n        src: baseUrl(images[index]),\n        msrc: baseUrl(images[index]),\n        w: width,\n        h: height\n      };\n    });\n\n    if (direction === 'rtl') {\n      items.reverse();\n    } // noinspection JSUnusedGlobalSymbols\n\n\n    const options = {\n      getThumbBoundsFn: index => {\n        // IMPORTANT: Inside this function, we can use variables and functions only through ref.\n        if (!getIndexDependOnDirRef.current) {\n          return {\n            x: 0,\n            y: 0,\n            w: 0\n          };\n        }\n\n        const dirDependentIndex = getIndexDependOnDirRef.current(index);\n        const tag = imagesRefs.current[dirDependentIndex];\n\n        if (!tag) {\n          return {\n            x: 0,\n            y: 0,\n            w: 0\n          };\n        }\n\n        const width = tag.naturalWidth;\n        const height = tag.naturalHeight;\n        const rect = tag.getBoundingClientRect();\n        const ration = Math.min(rect.width / width, rect.height / height);\n        const fitWidth = width * ration;\n        const fitHeight = height * ration;\n        return {\n          x: rect.left + (rect.width - fitWidth) / 2 + window.pageXOffset,\n          y: rect.top + (rect.height - fitHeight) / 2 + window.pageYOffset,\n          w: fitWidth\n        };\n      },\n      index: getIndexDependOnDir(index),\n      bgOpacity: 0.9,\n      history: false\n    };\n    createGalleryRef.current.then(createGallery => {\n      // IMPORTANT: Inside this function, we can use variables and functions only through ref.\n      if (unmountedRef.current) {\n        return;\n      }\n\n      galleryRef.current = createGallery(items, options);\n      galleryRef.current.listen('beforeChange', () => {\n        if (galleryRef.current && slickFeaturedRef.current) {\n          slickFeaturedRef.current.slickGoTo(galleryRef.current.getCurrentIndex(), true);\n        }\n      });\n      galleryRef.current.listen('destroy', () => {\n        galleryRef.current = null;\n      });\n      galleryRef.current.init();\n    });\n  };\n\n  const handleFeaturedClick = (event, index) => {\n    if (!createGalleryRef.current || layout === 'quickview') {\n      return;\n    }\n\n    event.preventDefault();\n    openPhotoswipe(index);\n  };\n\n  const handleThumbnailClick = index => {\n    if (state.transition) {\n      return;\n    }\n\n    setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      currentIndex: index\n    }));\n\n    if (slickFeaturedRef.current) {\n      slickFeaturedRef.current.slickGoTo(getIndexDependOnDir(index));\n    }\n  };\n\n  const handleFeaturedBeforeChange = (oldIndex, newIndex) => {\n    setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      currentIndex: getIndexDependOnDir(newIndex),\n      transition: true\n    }));\n  };\n\n  const handleFeaturedAfterChange = index => {\n    setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      currentIndex: getIndexDependOnDir(index),\n      transition: false\n    }));\n  };\n\n  const handleZoomButtonClick = () => {\n    openPhotoswipe(state.currentIndex);\n  }; // componentDidMount\n\n\n  useEffect(() => {\n    createGalleryRef.current = import('~/services/photoswipe').then(module => module.default);\n  }, []); // componentWillUnmount\n\n  useEffect(() => {\n    unmountedRef.current = false;\n    return () => {\n      if (galleryRef.current) {\n        galleryRef.current.destroy();\n      }\n\n      unmountedRef.current = true;\n    };\n  }, []);\n  useEffect(() => {\n    // this is necessary to reset the transition state,\n    // because when the direction changes, the afterChange event does not fire\n    const timer = setTimeout(() => {\n      setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        transition: false\n      }));\n    }, 0);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [direction]);\n  useEffect(() => {\n    getIndexDependOnDirRef.current = getIndexDependOnDir;\n  }, [getIndexDependOnDir]);\n  const rootClasses = classNames('product-gallery', `product-gallery--layout--${layout}`, className);\n  return __jsx(\"div\", _extends({\n    className: rootClasses,\n    \"data-layout\": layout\n  }, rootProps), __jsx(\"div\", {\n    className: \"product-gallery__featured\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"product-gallery__zoom\",\n    onClick: handleZoomButtonClick\n  }, __jsx(ZoomIn24Svg, null)), __jsx(AppSlick, _extends({\n    ref: slickFeaturedRef\n  }, slickSettingsFeatured, {\n    beforeChange: handleFeaturedBeforeChange,\n    afterChange: handleFeaturedAfterChange\n  }), images.map((image, index) => __jsx(\"div\", {\n    key: index,\n    className: \"image image--type--product\"\n  }, __jsx(AppLink, {\n    href: image,\n    anchor: true,\n    className: \"image__body\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    onClick: event => handleFeaturedClick(event, index)\n  }, __jsx(AppImageNew, {\n    className: \"image__tag\",\n    src: image,\n    ref: element => {\n      imagesRefs.current[index] = element;\n    },\n    \"data-width\": \"700\",\n    \"data-height\": \"700\"\n  })))))), __jsx(\"div\", {\n    className: \"product-gallery__thumbnails\"\n  }, __jsx(AppSlick, slickSettingsThumbnails[layout], images.map((image, index) => __jsx(\"button\", {\n    type: \"button\",\n    key: index,\n    className: classNames('product-gallery__thumbnails-item', 'image image--type--product', {\n      'product-gallery__thumbnails-item--active': index === state.currentIndex\n    }),\n    onClick: () => handleThumbnailClick(index)\n  }, __jsx(\"div\", {\n    className: \"image__body\"\n  }, __jsx(AppImageNew, {\n    className: \"image__tag\",\n    src: image\n  })))))));\n}\n\nexport default React.memo(ProductGallery);","map":null,"metadata":{},"sourceType":"module"}