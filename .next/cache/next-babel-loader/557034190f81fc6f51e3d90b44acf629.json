{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n// react\nimport React, { useCallback, useEffect, useMemo } from 'react'; // third-party\n\nimport { IntlProvider } from 'react-intl'; // application\n\nimport GlobalIntlProvider from '~/services/i18n/global-intl';\nimport { LanguageLocaleContext, LanguageSetLocaleContext } from '~/services/i18n/context';\nimport { useOriginalRouter } from '~/services/router';\nimport { getDefaultLanguage, getDefaultLocale, getLanguageByPath, loadMessages } from '~/services/i18n/utils';\nvar cache = {};\nexport function getLanguageInitialProps(_x) {\n  return _getLanguageInitialProps.apply(this, arguments);\n}\n\nfunction _getLanguageInitialProps() {\n  _getLanguageInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(language) {\n    var locale;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            locale = language ? language.locale : getDefaultLocale();\n\n            if (!true) {\n              _context.next = 7;\n              break;\n            }\n\n            if (!cache[locale]) {\n              cache[locale] = loadMessages(locale);\n            }\n\n            _context.next = 5;\n            return cache[locale];\n\n          case 5:\n            _context.t0 = _context.sent;\n            return _context.abrupt(\"return\", {\n              messages: _context.t0\n            });\n\n          case 7:\n            _context.next = 9;\n            return loadMessages(locale);\n\n          case 9:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", {\n              messages: _context.t1\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getLanguageInitialProps.apply(this, arguments);\n}\n\nfunction LanguageProvider(props) {\n  var children = props.children,\n      messages = props.messages;\n  var router = useOriginalRouter();\n  var language = useMemo(function () {\n    return getLanguageByPath(router.asPath) || getDefaultLanguage();\n  }, [router.asPath]);\n  var locale = language.locale; // Puts the initial translation into the cache.\n\n  useEffect(function () {\n    if (!cache[locale]) {\n      cache[locale] = Promise.resolve(messages);\n    }\n  }, [locale, messages]);\n  var setLocale = useCallback(function (newLocale) {\n    setTimeout(function () {\n      var language = getLanguageByPath(router.asPath);\n      var path = router.asPath;\n\n      if (language) {\n        path = \"/\".concat(router.asPath.substr(language.locale.length + 2));\n      }\n\n      var query = router.query;\n      var newPath = newLocale === getDefaultLocale() ? path : \"/\".concat(newLocale).concat(path);\n\n      if (newLocale !== getDefaultLocale()) {\n        query.lang = newLocale;\n      } else {\n        delete query.lang;\n      }\n\n      router.push({\n        pathname: router.pathname,\n        query: query\n      }, newPath).then();\n    }, 0);\n  }, [router]);\n  useEffect(function () {\n    document.documentElement.lang = language.locale;\n    document.documentElement.dir = language.direction;\n  }, [language]);\n  return __jsx(LanguageLocaleContext.Provider, {\n    value: locale\n  }, __jsx(LanguageSetLocaleContext.Provider, {\n    value: setLocale\n  }, __jsx(IntlProvider, {\n    locale: locale,\n    messages: messages\n  }, __jsx(GlobalIntlProvider, null, children))));\n}\n\nexport default LanguageProvider;","map":null,"metadata":{},"sourceType":"module"}