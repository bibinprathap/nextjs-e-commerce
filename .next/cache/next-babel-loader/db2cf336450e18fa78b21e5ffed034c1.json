{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable no-alert */\n// react\nimport React, { useEffect } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { FormProvider, useForm } from 'react-hook-form'; // application\n\nimport AppLink from '~/components/shared/AppLink';\nimport BlockHeader from '~/components/blocks/BlockHeader';\nimport BlockSpace from '~/components/blocks/BlockSpace';\nimport Checkbox from '~/components/shared/Checkbox';\nimport CheckoutCart from '~/components/shop/CheckoutCart';\nimport CheckoutForm from '~/components/shop/CheckoutForm';\nimport PageTitle from '~/components/shared/PageTitle';\nimport url from '~/services/url';\nimport { getAddressFormDefaultValue } from '~/components/shared/AddressForm';\nimport { getRegisterFormDefaultValue } from '~/components/shared/RegisterForm';\nimport { hrefToRouterArgs, useAppRouter } from '~/services/router';\nimport { shopApi } from '~/api';\nimport { useAsyncAction } from '~/store/hooks';\nimport { useCart } from '~/store/cart/cartHooks';\nimport { useUser, useUserSignUp } from '~/store/user/userHooks';\n\nfunction Page() {\n  const router = useAppRouter();\n  const intl = useIntl();\n  const user = useUser();\n  const userSignUp = useUserSignUp();\n  const cart = useCart();\n  const formMethods = useForm({\n    defaultValues: {\n      billingAddress: getAddressFormDefaultValue(),\n      createAccount: false,\n      account: getRegisterFormDefaultValue(),\n      shipToDifferentAddress: false,\n      shippingAddress: getAddressFormDefaultValue(),\n      comment: '',\n      payment: 'bank'\n    }\n  });\n  const {\n    handleSubmit,\n    register,\n    errors\n  } = formMethods;\n  const [checkout, checkoutInProgress] = useAsyncAction(async data => {\n    const {\n      billingAddress\n    } = data;\n    const shippingAddress = data.shipToDifferentAddress ? data.shippingAddress : data.billingAddress;\n    const checkoutData = {\n      payment: data.payment,\n      items: cart.items.map(item => ({\n        productId: item.product.id,\n        options: item.options.map(option => ({\n          name: option.name,\n          value: option.value\n        })),\n        quantity: item.quantity\n      })),\n      billingAddress,\n      shippingAddress,\n      comment: data.comment\n    };\n\n    if (data.createAccount) {\n      try {\n        await userSignUp(data.account.email, data.account.password);\n      } catch (error) {\n        alert(intl.formatMessage({\n          id: `ERROR_API_${error.message}`\n        }));\n        return;\n      }\n    }\n\n    const order = await shopApi.checkout(checkoutData);\n    await router.push(...hrefToRouterArgs(url.checkoutSuccess(order)));\n  }, [intl, cart, userSignUp, router]);\n  useEffect(() => {\n    if (cart.stateFrom === 'client' && cart.items.length < 1) {\n      router.replace(url.cart()).then();\n    }\n  }, [cart.stateFrom, cart.items.length, router]);\n\n  if (cart.items.length < 1) {\n    return null;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(PageTitle, null, intl.formatMessage({\n    id: 'HEADER_CHECKOUT'\n  })), __jsx(BlockHeader, {\n    pageTitle: __jsx(FormattedMessage, {\n      id: \"HEADER_CHECKOUT\"\n    }),\n    breadcrumb: [{\n      title: __jsx(FormattedMessage, {\n        id: \"LINK_HOME\"\n      }),\n      url: url.home()\n    }, {\n      title: __jsx(FormattedMessage, {\n        id: \"LINK_CART\"\n      }),\n      url: url.cart()\n    }, {\n      title: __jsx(FormattedMessage, {\n        id: \"LINK_CHECKOUT\"\n      }),\n      url: url.checkout()\n    }]\n  }), __jsx(FormProvider, formMethods, __jsx(\"form\", {\n    className: \"checkout block\",\n    onSubmit: handleSubmit(checkout)\n  }, __jsx(\"div\", {\n    className: \"container container--max--xl\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, !user && __jsx(\"div\", {\n    className: \"col-12 mb-3\"\n  }, __jsx(\"div\", {\n    className: \"alert alert-lg alert-primary\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_ALERT_RETURNING_CUSTOMER\",\n    values: {\n      link: __jsx(AppLink, {\n        href: url.signIn()\n      }, __jsx(FormattedMessage, {\n        id: \"TEXT_ALERT_RETURNING_CUSTOMER_LINK\"\n      }))\n    }\n  }))), __jsx(\"div\", {\n    className: \"col-12 col-lg-6 col-xl-7\"\n  }, __jsx(\"div\", {\n    className: \"card mb-lg-0\"\n  }, __jsx(\"div\", {\n    className: \"card-body card-body--padding--2\"\n  }, __jsx(CheckoutForm, null)))), __jsx(\"div\", {\n    className: \"col-12 col-lg-6 col-xl-5 mt-4 mt-lg-0\"\n  }, __jsx(\"div\", {\n    className: \"card mb-0\"\n  }, __jsx(\"div\", {\n    className: \"card-body card-body--padding--2\"\n  }, __jsx(\"h3\", {\n    className: \"card-title\"\n  }, __jsx(FormattedMessage, {\n    id: \"HEADER_YOUR_ORDER\"\n  })), __jsx(CheckoutCart, null), __jsx(\"div\", {\n    className: \"checkout__agree form-group\"\n  }, __jsx(\"div\", {\n    className: \"form-check\"\n  }, __jsx(Checkbox, {\n    id: \"checkout-form-agree\",\n    name: \"agree\",\n    className: classNames('form-check-input', {\n      'is-invalid': errors.agree\n    }),\n    inputRef: register({\n      required: true\n    })\n  }), __jsx(\"label\", {\n    className: \"form-check-label\",\n    htmlFor: \"checkout-form-agree\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_TERMS_AGREE_LABEL\",\n    values: {\n      link: __jsx(AppLink, {\n        href: url.pageTerms(),\n        target: \"_blank\"\n      }, __jsx(FormattedMessage, {\n        id: \"INPUT_TERMS_AGREE_LABEL_LINK\"\n      }))\n    }\n  })))), __jsx(\"button\", {\n    type: \"submit\",\n    className: classNames('btn', 'btn-primary', 'btn-xl', 'btn-block', {\n      'btn-loading': checkoutInProgress\n    })\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_PLACE_ORDER\"\n  }))))))))), __jsx(BlockSpace, {\n    layout: \"before-footer\"\n  }));\n}\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}