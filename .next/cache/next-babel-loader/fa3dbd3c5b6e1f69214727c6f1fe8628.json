{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React, { useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl'; // application\n\nimport useVehicleForm from '~/services/forms/vehicle';\nimport { vehicleApi } from '~/api';\n\nfunction VehicleForm(props) {\n  const {\n    location,\n    onVehicleChange = () => {}\n  } = props;\n  const intl = useIntl();\n  const internalValue = useRef(null);\n  const cancelVinRequest = useRef(() => {});\n  const {\n    0: vinIsLoading,\n    1: setVinIsLoading\n  } = useState(false);\n  const {\n    0: vinError,\n    1: setVinError\n  } = useState(null);\n  const {\n    0: vehicleByFilters,\n    1: setVehicleByFilters\n  } = useState(null);\n  const {\n    0: vehicleByVin,\n    1: setVehicleByVin\n  } = useState(null);\n\n  const updateValue = args => {\n    const value = _objectSpread({\n      vehicleByVin,\n      vehicleByFilters\n    }, args);\n\n    const vehicle = value.vehicleByVin || value.vehicleByFilters;\n\n    if (vehicle !== internalValue.current) {\n      internalValue.current = vehicle;\n      onVehicleChange(vehicle);\n    }\n  };\n\n  const vehicleForm = useVehicleForm({\n    onChange: vehicle => {\n      setVehicleByFilters(vehicle);\n      updateValue({\n        vehicleByFilters: vehicle\n      });\n    }\n  });\n\n  const handleVinChange = event => {\n    let canceled = false;\n    cancelVinRequest.current();\n\n    cancelVinRequest.current = () => {\n      canceled = true;\n    };\n\n    const value = event.currentTarget.value.trim();\n    setVinIsLoading(value !== '');\n\n    if (value === '') {\n      setVehicleByVin(null);\n      setVinError(null);\n      updateValue({\n        vehicleByVin: null\n      });\n    }\n\n    setTimeout(async () => {\n      if (value === '' || canceled) {\n        return;\n      }\n\n      try {\n        const vehicle = await vehicleApi.getVehicleByVin(value);\n\n        if (canceled) {\n          return;\n        }\n\n        setVehicleByVin(vehicle);\n        setVinError(null);\n        updateValue({\n          vehicleByVin: vehicle\n        });\n      } catch (error) {\n        if (canceled) {\n          return;\n        }\n\n        setVehicleByVin(null);\n        setVinError(error);\n        updateValue({\n          vehicleByVin: null\n        });\n      }\n\n      setVinIsLoading(false);\n    }, 350);\n  };\n\n  const rootClasses = classNames('vehicle-form', `vehicle-form--layout--${location}`);\n  return __jsx(\"div\", {\n    className: rootClasses\n  }, vehicleForm.items.map((item, itemIdx) => {\n    const options = item.options;\n    return __jsx(\"div\", {\n      key: itemIdx,\n      className: classNames('vehicle-form__item', 'vehicle-form__item--select', {\n        'vehicle-form__item--loading': item.loading\n      })\n    }, __jsx(\"select\", {\n      className: \"form-control\",\n      \"aria-label\": item.label,\n      name: item.key,\n      value: item.value,\n      disabled: item.disabled,\n      onChange: e => vehicleForm.onItemValueChange(itemIdx, e.target.value)\n    }, __jsx(\"option\", {\n      value: \"none\"\n    }, item.placeholder), options.map((option, optionIdx) => __jsx(\"option\", {\n      key: optionIdx,\n      value: vehicleForm.serializeOption(option, item)\n    }, vehicleForm.serializeOption(option, item)))), __jsx(\"div\", {\n      className: \"vehicle-form__loader\"\n    }));\n  }), __jsx(\"div\", {\n    className: \"vehicle-form__divider\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_OR\"\n  })), __jsx(\"div\", {\n    className: classNames('vehicle-form__item', {\n      'vehicle-form__item--loading': vinIsLoading\n    })\n  }, __jsx(\"div\", {\n    className: \"vehicle-form__item-input\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"vin\",\n    \"aria-label\": intl.formatMessage({\n      id: 'INPUT_VIN_LABEL'\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_VIN_PLACEHOLDER'\n    }),\n    onInput: handleVinChange\n  }), __jsx(\"div\", {\n    className: \"vehicle-form__loader\"\n  })), (vehicleByVin || vinError !== null) && __jsx(\"div\", {\n    className: \"vehicle-form__item-alert\"\n  }, vehicleByVin && __jsx(\"div\", {\n    className: \"alert alert-sm alert-primary my-0\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_ALERT_VEHICLE_FOUND\",\n    values: vehicleByVin\n  })), vinError !== null && __jsx(\"div\", {\n    className: \"alert alert-sm alert-danger my-0\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_ALERT_UNABLE_TO_FIND_VEHICLE_BY_VIN\"\n  })))));\n}\n\nexport default VehicleForm;","map":null,"metadata":{},"sourceType":"module"}