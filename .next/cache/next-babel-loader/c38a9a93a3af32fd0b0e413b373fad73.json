{"ast":null,"code":"var __jsx = React.createElement;\n// react\nimport React, { useContext, useMemo, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl'; // application\n\nimport CurrencyFormat from '~/components/shared/CurrencyFormat';\nimport Pagination from '~/components/shared/Pagination';\nimport ProductCard from '~/components/shared/ProductCard';\nimport { SidebarContext } from '~/services/sidebar';\nimport { Cross9LightSvg, Filters16Svg, LayoutGrid16Svg, LayoutGridWithDetails16Svg, LayoutList16Svg, LayoutTable16Svg } from '~/svg';\nimport { useSetOption, useShop, useShopOptions, useShopProductsList, useShopProductsListIsLoading, useShopResetFiltersThunk, useShopResetFilterThunk } from '~/store/shop/shopHooks';\n\nfunction ProductsView(props) {\n  const {\n    layout: layoutProps,\n    gridLayout,\n    offCanvasSidebar\n  } = props;\n  const intl = useIntl();\n  const isLoading = useShopProductsListIsLoading();\n  const shop = useShop();\n  const productsList = useShopProductsList();\n  const options = useShopOptions();\n  const shopResetFilters = useShopResetFiltersThunk();\n  const shopResetFilter = useShopResetFilterThunk();\n  const {\n    1: setSidebarIsOpen\n  } = useContext(SidebarContext);\n  const {\n    0: layout,\n    1: setLayout\n  } = useState(layoutProps);\n  const handlePageChange = useSetOption('page', parseFloat, productsList, options);\n  const handleSortChange = useSetOption('sort', event => event.target.value, productsList, options);\n  const handleLimitChange = useSetOption('limit', event => parseFloat(event.target.value), productsList, options);\n  const isEmptyList = (productsList === null || productsList === void 0 ? void 0 : productsList.total) === 0;\n  const hasActiveFilters = shop.activeFilters.length > 0;\n  const currentFiltersCount = shop.currentFilters.length;\n  const {\n    currentFilters\n  } = shop;\n\n  const handleFiltersClick = () => {\n    setSidebarIsOpen(true);\n  };\n\n  const layoutButtons = useMemo(() => [{\n    layout: 'grid',\n    icon: __jsx(LayoutGrid16Svg, null)\n  }, {\n    layout: 'grid-with-features',\n    icon: __jsx(LayoutGridWithDetails16Svg, null)\n  }, {\n    layout: 'list',\n    icon: __jsx(LayoutList16Svg, null)\n  }, {\n    layout: 'table',\n    icon: __jsx(LayoutTable16Svg, null)\n  }], []);\n  const rootClasses = classNames('products-view', {\n    'products-view--loading': isLoading\n  });\n  const viewOptionsClasses = classNames('products-view__options', 'view-options', `view-options--offcanvas--${offCanvasSidebar}`);\n  const productListClasses = classNames('products-view__list', 'products-list', {\n    'products-list--grid--6': gridLayout === 'grid-6-full',\n    'products-list--grid--5': gridLayout === 'grid-5-full',\n    'products-list--grid--4': ['grid-4-full', 'grid-4-sidebar'].includes(gridLayout),\n    'products-list--grid--3': gridLayout === 'grid-3-sidebar'\n  });\n\n  if (!productsList) {\n    return null;\n  }\n\n  return __jsx(\"div\", {\n    className: rootClasses\n  }, __jsx(\"div\", {\n    className: \"products-view__body\"\n  }, __jsx(\"div\", {\n    className: \"products-view__loader\"\n  }), isEmptyList && hasActiveFilters && __jsx(\"div\", {\n    className: \"products-view__empty\"\n  }, __jsx(\"div\", {\n    className: \"products-view__empty-title\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_NO_MATCHING_ITEMS_TITLE\"\n  })), __jsx(\"div\", {\n    className: \"products-view__empty-subtitle\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_NO_MATCHING_ITEMS_SUBTITLE\"\n  })), __jsx(\"div\", {\n    className: \"products-view__empty-actions\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary btn-sm\",\n    onClick: shopResetFilters\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_RESET_FILTERS\"\n  })))), isEmptyList && !hasActiveFilters && __jsx(\"div\", {\n    className: \"products-view__empty\"\n  }, __jsx(\"div\", {\n    className: \"products-view__empty-title\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_CATEGORY_IS_EMPTY_TITLE\"\n  })), __jsx(\"div\", {\n    className: \"products-view__empty-subtitle\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_CATEGORY_IS_EMPTY_SUBTITLE\"\n  }))), !isEmptyList && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: viewOptionsClasses\n  }, __jsx(\"div\", {\n    className: \"view-options__body\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"view-options__filters-button filters-button\",\n    onClick: handleFiltersClick\n  }, __jsx(\"span\", {\n    className: \"filters-button__icon\"\n  }, __jsx(Filters16Svg, null)), __jsx(\"span\", {\n    className: \"filters-button__title\"\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_FILTERS\"\n  })), __jsx(\"span\", {\n    className: \"filters-button__counter\"\n  }, currentFiltersCount)), __jsx(\"div\", {\n    className: \"view-options__layout layout-switcher\"\n  }, __jsx(\"div\", {\n    className: \"layout-switcher__list\"\n  }, layoutButtons.map(button => {\n    const buttonClasses = classNames('layout-switcher__button', {\n      'layout-switcher__button--active': button.layout === layout\n    });\n    return __jsx(\"button\", {\n      key: button.layout,\n      type: \"button\",\n      className: buttonClasses,\n      onClick: () => setLayout(button.layout)\n    }, button.icon);\n  }))), __jsx(\"div\", {\n    className: \"view-options__legend\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_SHOWING_PRODUCTS\",\n    values: {\n      from: productsList.from,\n      to: productsList.to,\n      total: productsList.total\n    }\n  })), __jsx(\"div\", {\n    className: \"view-options__spring\"\n  }), __jsx(\"div\", {\n    className: \"view-options__select\"\n  }, __jsx(\"label\", {\n    htmlFor: \"view-option-sort\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_SORT_LABEL\"\n  }), \":\"), __jsx(\"select\", {\n    id: \"view-option-sort\",\n    className: \"form-control form-control-sm\",\n    value: options.sort || productsList.sort,\n    onChange: handleSortChange\n  }, __jsx(\"option\", {\n    value: \"default\"\n  }, intl.formatMessage({\n    id: 'INPUT_SORT_OPTION_DEFAULT'\n  })), __jsx(\"option\", {\n    value: \"name_asc\"\n  }, intl.formatMessage({\n    id: 'INPUT_SORT_OPTION_NAME_ASC'\n  })), __jsx(\"option\", {\n    value: \"name_desc\"\n  }, intl.formatMessage({\n    id: 'INPUT_SORT_OPTION_NAME_DESC'\n  })))), __jsx(\"div\", {\n    className: \"view-options__select\"\n  }, __jsx(\"label\", {\n    htmlFor: \"view-option-limit\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_LIMIT_LABEL\"\n  }), \":\"), __jsx(\"select\", {\n    id: \"view-option-limit\",\n    className: \"form-control form-control-sm\",\n    value: options.limit || productsList.limit,\n    onChange: handleLimitChange\n  }, __jsx(\"option\", {\n    value: \"8\"\n  }, \"8\"), __jsx(\"option\", {\n    value: \"16\"\n  }, \"16\"), __jsx(\"option\", {\n    value: \"24\"\n  }, \"24\"), __jsx(\"option\", {\n    value: \"32\"\n  }, \"32\")))), hasActiveFilters && __jsx(\"div\", {\n    className: \"view-options__body view-options__body--filters\"\n  }, __jsx(\"div\", {\n    className: \"view-options__label\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_ACTIVE_FILTERS\"\n  })), __jsx(\"div\", {\n    className: \"view-options__applied-filters applied-filters\"\n  }, __jsx(\"ul\", {\n    className: \"applied-filters__list\"\n  }, currentFilters.map((filter, index) => __jsx(\"li\", {\n    key: index,\n    className: \"applied-filters__item\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"applied-filters__button applied-filters__button--filter\",\n    onClick: () => shopResetFilter(filter)\n  }, filter.type === 'vehicle' && filter.original.vehicle && __jsx(React.Fragment, null, filter.original.vehicle.year, ' ', filter.original.vehicle.make, ' ', filter.original.vehicle.model), filter.type === 'range' && __jsx(React.Fragment, null, __jsx(CurrencyFormat, {\n    value: filter.original.value[0]\n  }), ' â€“ ', __jsx(CurrencyFormat, {\n    value: filter.original.value[1]\n  })), filter.type === 'check' && filter.item.name, filter.type === 'radio' && __jsx(React.Fragment, null, filter.original.name, ': ', filter.item.name), filter.type === 'rating' && __jsx(FormattedMessage, {\n    id: \"TEXT_STARS\",\n    values: {\n      stars: filter.item.rating\n    }\n  }), filter.type === 'color' && filter.item.name, __jsx(Cross9LightSvg, null)))), __jsx(\"li\", {\n    className: \"applied-filters__item\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"applied-filters__button applied-filters__button--clear\",\n    onClick: shopResetFilters\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_CLEAR_ALL\"\n  }))))))), __jsx(\"div\", {\n    className: productListClasses,\n    \"data-layout\": layout === 'grid-with-features' ? 'grid' : layout,\n    \"data-with-features\": layout === 'grid-with-features' ? 'true' : 'false'\n  }, __jsx(\"div\", {\n    className: \"products-list__head\"\n  }, __jsx(\"div\", {\n    className: \"products-list__column products-list__column--image\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_IMAGE\"\n  })), __jsx(\"div\", {\n    className: \"products-list__column products-list__column--meta\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_SKU\"\n  })), __jsx(\"div\", {\n    className: \"products-list__column products-list__column--product\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_PRODUCT\"\n  })), __jsx(\"div\", {\n    className: \"products-list__column products-list__column--rating\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_RATING\"\n  })), __jsx(\"div\", {\n    className: \"products-list__column products-list__column--price\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_PRICE\"\n  }))), __jsx(\"div\", {\n    className: \"products-list__content\"\n  }, productsList === null || productsList === void 0 ? void 0 : productsList.items.map(product => __jsx(\"div\", {\n    key: product.id + Math.random(),\n    className: \"products-list__item\"\n  }, __jsx(ProductCard, {\n    product: product\n  }))))), __jsx(\"div\", {\n    className: \"products-view__pagination\"\n  }, __jsx(\"nav\", {\n    \"aria-label\": \"Page navigation example\"\n  }, __jsx(Pagination, {\n    current: options.page || productsList.page,\n    total: productsList.pages,\n    siblings: 2,\n    onPageChange: handlePageChange\n  })), __jsx(\"div\", {\n    className: \" products-view__pagination-legend\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_SHOWING_PRODUCTS\",\n    values: {\n      from: productsList.from,\n      to: productsList.to,\n      total: productsList.total\n    }\n  }))))));\n}\n\nexport default ProductsView;","map":null,"metadata":{},"sourceType":"module"}