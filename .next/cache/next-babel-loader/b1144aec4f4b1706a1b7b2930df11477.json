{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// application\nimport { withClientState } from '~/store/client';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_UPDATE_QUANTITIES } from '~/store/cart/cartActionTypes';\n\nfunction findItemIndex(items, product, options) {\n  return items.findIndex(function (item) {\n    if (item.product.id !== product.id || item.options.length !== options.length) {\n      return false;\n    }\n\n    var _loop = function _loop(i) {\n      var option = options[i];\n      var itemOption = item.options.find(function (itemOption) {\n        return itemOption.name === option.name && itemOption.value === option.value;\n      });\n\n      if (!itemOption) {\n        return {\n          v: false\n        };\n      }\n    };\n\n    for (var i = 0; i < options.length; i += 1) {\n      var _ret = _loop(i);\n\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return true;\n  });\n}\n\nfunction calcSubtotal(items) {\n  return items.reduce(function (subtotal, item) {\n    return subtotal + item.total;\n  }, 0);\n}\n\nfunction calcQuantity(items) {\n  return items.reduce(function (quantity, item) {\n    return quantity + item.quantity;\n  }, 0);\n}\n\nfunction calcTotal(subtotal, totals) {\n  return totals.reduce(function (acc, extraLine) {\n    return acc + extraLine.price;\n  }, subtotal);\n}\n\nfunction calcTotals(items) {\n  if (items.length === 0) {\n    return [];\n  }\n\n  var subtotal = calcSubtotal(items);\n  return [{\n    type: 'shipping',\n    title: 'SHIPPING',\n    price: 25\n  }, {\n    type: 'tax',\n    title: 'TAX',\n    price: subtotal * 0.2\n  }];\n}\n\nfunction addItem(state, product, options, quantity) {\n  var itemIndex = findItemIndex(state.items, product, options);\n  var newItems;\n  var lastItemId = state.lastItemId;\n\n  if (itemIndex === -1) {\n    lastItemId += 1;\n    newItems = [].concat(_toConsumableArray(state.items), [{\n      id: lastItemId,\n      product: JSON.parse(JSON.stringify(product)),\n      options: JSON.parse(JSON.stringify(options)),\n      price: product.price,\n      total: product.price * quantity,\n      quantity: quantity\n    }]);\n  } else {\n    var item = state.items[itemIndex];\n    newItems = [].concat(_toConsumableArray(state.items.slice(0, itemIndex)), [_objectSpread(_objectSpread({}, item), {}, {\n      quantity: item.quantity + quantity,\n      total: (item.quantity + quantity) * item.price\n    })], _toConsumableArray(state.items.slice(itemIndex + 1)));\n  }\n\n  var subtotal = calcSubtotal(newItems);\n  var totals = calcTotals(newItems);\n  var total = calcTotal(subtotal, totals);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    lastItemId: lastItemId,\n    subtotal: subtotal,\n    totals: totals,\n    total: total,\n    items: newItems,\n    quantity: calcQuantity(newItems)\n  });\n}\n\nfunction removeItem(state, itemId) {\n  var items = state.items;\n  var newItems = items.filter(function (item) {\n    return item.id !== itemId;\n  });\n  var subtotal = calcSubtotal(newItems);\n  var totals = calcTotals(newItems);\n  var total = calcTotal(subtotal, totals);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    items: newItems,\n    quantity: calcQuantity(newItems),\n    subtotal: subtotal,\n    totals: totals,\n    total: total\n  });\n}\n\nfunction updateQuantities(state, quantities) {\n  var needUpdate = false;\n  var newItems = state.items.map(function (item) {\n    var quantity = quantities.find(function (x) {\n      return x.itemId === item.id && x.value !== item.quantity;\n    });\n\n    if (!quantity) {\n      return item;\n    }\n\n    needUpdate = true;\n    return _objectSpread(_objectSpread({}, item), {}, {\n      quantity: quantity.value,\n      total: quantity.value * item.price\n    });\n  });\n\n  if (needUpdate) {\n    var subtotal = calcSubtotal(newItems);\n    var totals = calcTotals(newItems);\n    var total = calcTotal(subtotal, totals);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      items: newItems,\n      quantity: calcQuantity(newItems),\n      subtotal: subtotal,\n      totals: totals,\n      total: total\n    });\n  }\n\n  return state;\n}\n\nvar initialState = {\n  lastItemId: 0,\n  quantity: 0,\n  items: [],\n  subtotal: 0,\n  totals: [],\n  total: 0\n};\nexport var CART_NAMESPACE = 'cart';\n\nfunction cartBaseReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      return addItem(state, action.product, action.options, action.quantity);\n\n    case CART_REMOVE_ITEM:\n      return removeItem(state, action.itemId);\n\n    case CART_UPDATE_QUANTITIES:\n      return updateQuantities(state, action.quantities);\n\n    default:\n      return state;\n  }\n}\n\nvar cartReducer = withClientState(cartBaseReducer, CART_NAMESPACE);\nexport default cartReducer;","map":null,"metadata":{},"sourceType":"module"}