{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { products as dbProducts } from '~/fake-server/database/products';\nconst colors = [{\n  code: 'white',\n  color: '#fff'\n}, {\n  code: 'silver',\n  color: '#d9d9d9'\n}, {\n  code: 'light-gray',\n  color: '#b3b3b3'\n}, {\n  code: 'gray',\n  color: '#808080'\n}, {\n  code: 'dark-gray',\n  color: '#666'\n}, {\n  code: 'coal',\n  color: '#4d4d4d'\n}, {\n  code: 'black',\n  color: '#262626'\n}, {\n  code: 'red',\n  color: '#ff4040'\n}, {\n  code: 'orange',\n  color: '#ff8126'\n}, {\n  code: 'yellow',\n  color: '#ffd333'\n}, {\n  code: 'pear-green',\n  color: '#becc1f'\n}, {\n  code: 'green',\n  color: '#8fcc14'\n}, {\n  code: 'emerald',\n  color: '#47cc5e'\n}, {\n  code: 'shamrock',\n  color: '#47cca0'\n}, {\n  code: 'shakespeare',\n  color: '#47cccc'\n}, {\n  code: 'blue',\n  color: '#40bfff'\n}, {\n  code: 'dark-blue',\n  color: '#3d6dcc'\n}, {\n  code: 'violet',\n  color: '#7766cc'\n}, {\n  code: 'purple',\n  color: '#b852cc'\n}, {\n  code: 'cerise',\n  color: '#e53981'\n}];\nexport class ColorFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"value\", []);\n  }\n\n  test(product) {\n    if (this.value.length === 0) {\n      return true;\n    }\n\n    return this.value.reduce((result, value) => result || this.extractItems(product).map(x => x.slug).includes(value), false);\n  } // noinspection DuplicatedCode\n\n\n  makeItems(products, value) {\n    products.forEach(product => this.extractItems(product).forEach(item => {\n      if (!this.items.find(x => x.slug === item.slug)) {\n        this.items.push(item);\n      }\n    }));\n    this.value = this.parseValue(value);\n  } // noinspection DuplicatedCode\n\n\n  calc(filters) {\n    const products = dbProducts.filter(product => filters.reduce((isMatched, filter) => isMatched && (filter === this || filter.test(product)), true));\n    this.items = this.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n      count: products.reduce((acc, product) => acc + (this.extractItems(product).map(x => x.slug).includes(item.slug) ? 1 : 0), 0)\n    }));\n    this.items = this.items.sort((a, b) => colors.findIndex(x => x.code === a.slug) - colors.findIndex(x => x.code === b.slug));\n  }\n\n  build() {\n    return {\n      type: 'color',\n      slug: this.slug,\n      name: this.name,\n      items: this.items,\n      value: this.value\n    };\n  } // noinspection JSMethodCanBeStatic\n\n\n  parseValue(value) {\n    return value ? value.split(',') : [];\n  }\n\n  extractItems(product) {\n    const attribute = product.attributes.find(x => x.slug === this.slug);\n\n    if (!attribute) {\n      return [];\n    }\n\n    return attribute.values.map(value => ({\n      slug: value.slug,\n      name: value.name,\n      color: this.getColorCode(value.slug),\n      count: 0\n    }));\n  }\n\n  getColorCode(slug) {\n    var _colors$find;\n\n    return ((_colors$find = colors.find(x => x.code === slug)) === null || _colors$find === void 0 ? void 0 : _colors$find.color) || '#000';\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}