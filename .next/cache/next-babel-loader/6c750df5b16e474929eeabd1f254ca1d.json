{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SHOP_NAMESPACE } from '~/store/shop/shopTypes';\nimport { shopApi } from '~/api';\nimport { SHOP_FETCH_CATEGORY_SUCCESS, SHOP_FETCH_PRODUCTS_LIST_START, SHOP_FETCH_PRODUCTS_LIST_SUCCESS, SHOP_INIT, SHOP_RESET_FILTER, SHOP_RESET_FILTERS, SHOP_SET_FILTER_VALUE, SHOP_SET_OPTION_VALUE } from '~/store/shop/shopActionTypes';\n\nlet cancelPreviousCategoryRequest = () => {};\n\nlet cancelPreviousProductsListRequest = () => {};\n\nexport function shopInit(categorySlug, options = {}, filters = {}) {\n  return {\n    type: SHOP_INIT,\n    categorySlug,\n    options,\n    filters\n  };\n}\nexport function shopFetchCategorySuccess(category) {\n  return {\n    type: SHOP_FETCH_CATEGORY_SUCCESS,\n    category\n  };\n}\nexport function shopFetchProductsListStart() {\n  return {\n    type: SHOP_FETCH_PRODUCTS_LIST_START\n  };\n}\nexport function shopFetchProductsListSuccess(productsList) {\n  return {\n    type: SHOP_FETCH_PRODUCTS_LIST_SUCCESS,\n    productsList\n  };\n}\nexport function shopResetFilters() {\n  return {\n    type: SHOP_RESET_FILTERS\n  };\n}\nexport function shopResetFilter(activeFilter) {\n  return {\n    type: SHOP_RESET_FILTER,\n    activeFilter\n  };\n}\nexport function shopSetOptionValue(option, value) {\n  return {\n    type: SHOP_SET_OPTION_VALUE,\n    option,\n    value\n  };\n}\nexport function shopSetFilterValue(filter, value) {\n  return {\n    type: SHOP_SET_FILTER_VALUE,\n    filter,\n    value\n  };\n}\nexport function shopFetchCategoryThunk(categorySlug) {\n  return async dispatch => {\n    let canceled = false;\n    cancelPreviousCategoryRequest();\n\n    cancelPreviousCategoryRequest = () => {\n      canceled = true;\n    };\n\n    let request;\n\n    if (categorySlug) {\n      request = shopApi.getCategoryBySlug(categorySlug);\n    } else {\n      request = Promise.resolve(null);\n    }\n\n    const category = await request;\n\n    if (canceled && false) {\n      return;\n    }\n\n    dispatch(shopFetchCategorySuccess(category));\n  };\n}\nexport function shopFetchProductsListThunk(cacheProductsList) {\n  return async (dispatch, getState) => {\n    let canceled = false;\n    cancelPreviousProductsListRequest();\n\n    cancelPreviousProductsListRequest = () => {\n      canceled = true;\n    };\n\n    dispatch(shopFetchProductsListStart());\n    const shopState = getState()[SHOP_NAMESPACE];\n    let {\n      filters\n    } = shopState;\n\n    if (shopState.categorySlug !== null) {\n      filters = _objectSpread(_objectSpread({}, filters), {}, {\n        category: shopState.categorySlug\n      });\n    }\n\n    const productsList = cacheProductsList ? cacheProductsList : await shopApi.getProductsList(shopState.options, filters);\n\n    if (canceled && false) {\n      return;\n    }\n\n    dispatch(shopFetchProductsListSuccess(productsList));\n  };\n}\nexport function shopSetOptionValueThunk(option, value, productsList, options = {}) {\n  return async dispatch => {\n    dispatch(shopSetOptionValue(option, value)); // debugger;\n    // console.log(productsList);\n\n    let newproductsList = productsList;\n\n    if (productsList && option == \"page\") {\n      const page = option == \"page\" ? parseInt(value) : (options === null || options === void 0 ? void 0 : options.page) || 1; // const limit = option == \"limit\" ? value : options?.limit || 16;\n      // const sort = option == \"sort\" ? value : options?.sort || 'default';\n\n      const limit = (options === null || options === void 0 ? void 0 : options.limit) || 16;\n      const sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n      const total = productsList.products.length;\n      const pages = Math.ceil(productsList.products.length / limit);\n      const from = (page - 1) * limit + 1;\n      const to = Math.min(page * limit, total); // Sort items array.\n\n      productsList.products = productsList.products.sort((a, b) => {\n        if (['name_asc', 'name_desc'].includes(sort)) {\n          if (a.name === b.name) {\n            return 0;\n          }\n\n          return (a.name > b.name ? 1 : -1) * (sort === 'name_asc' ? 1 : -1);\n        }\n\n        return 0;\n      });\n      console.log('getProductsList', JSON.stringify(productsList.products[0]));\n      const items = productsList.products.slice(from - 1, to); // newproductsList = { ...productsList, items }\n      // if (option == \"page\") {\n      //     newproductsList.page = parseInt(value) || 1;\n      //     newproductsList.from = from;\n      //     newproductsList.to = to;\n      //     newproductsList.pages = pages\n      // }\n      // else if (option == \"limit\") {\n      //     newproductsList.limit = parseInt(limit) || 16;\n      //     newproductsList.page = parseInt(page) || 1;\n      //     newproductsList.from = from;\n      //     newproductsList.to = to;\n      //     newproductsList.pages = pages\n      // }\n      // else if (option == \"sort\")\n      //     newproductsList.sort = value || 'default';\n\n      newproductsList = _objectSpread(_objectSpread({}, productsList), {}, {\n        items,\n        page: page || 1,\n        sort,\n        total,\n        pages,\n        from,\n        to\n      });\n      await dispatch(shopFetchProductsListThunk(newproductsList));\n    } else {\n      await dispatch(shopFetchProductsListThunk());\n    }\n  };\n}\nexport function shopSetFilterValueThunk(filter, value) {\n  return async dispatch => {\n    dispatch(shopSetFilterValue(filter, value));\n    await dispatch(shopFetchProductsListThunk());\n  };\n}\nexport function shopResetFiltersThunk() {\n  return async dispatch => {\n    dispatch(shopResetFilters());\n    await dispatch(shopFetchProductsListThunk());\n  };\n}\nexport function shopResetFilterThunk(activeFilter) {\n  return async dispatch => {\n    dispatch(shopResetFilter(activeFilter));\n    await dispatch(shopFetchProductsListThunk());\n  };\n}\nexport function shopInitThunk(categorySlug, options = {}, filters = {}, productsList) {\n  return async dispatch => {\n    dispatch(shopInit(categorySlug, options, filters));\n    await Promise.all([dispatch(shopFetchCategoryThunk(categorySlug)), dispatch(shopFetchProductsListThunk(productsList))]);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}