{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n// react\nimport React, { useCallback, useEffect, useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport Slick from 'react-slick'; // application\n\nimport { useDirection } from '~/services/i18n/hooks';\n\nfunction AppSlickInner(props) {\n  var children = props.children,\n      forwardRef = props.forwardRef,\n      beforeChange = props.beforeChange,\n      otherProps = _objectWithoutProperties(props, [\"children\", \"forwardRef\", \"beforeChange\"]);\n\n  var direction = useDirection();\n  var slickRef = useRef(null);\n  var originalSlickNextRef = useRef(function () {});\n  var originalSlickPrevRef = useRef(function () {});\n  var slickNextRef = useRef(function () {});\n  var slickPrevRef = useRef(function () {});\n\n  var getSlidesCount = function getSlidesCount() {\n    return React.Children.toArray(children).length;\n  };\n\n  var getSlidesToShow = function getSlidesToShow() {\n    var responsive = props.responsive,\n        slidesToShow = props.slidesToShow;\n    var result = slidesToShow || 1;\n\n    if (true && responsive) {\n      responsive.forEach(function (options) {\n        if (options.settings === 'unslick') {\n          return;\n        }\n\n        var _matchMedia = matchMedia(\"(max-width: \".concat(options.breakpoint, \"px)\")),\n            matches = _matchMedia.matches;\n\n        if (matches && options.settings.slidesToShow) {\n          result = options.settings.slidesToShow;\n        }\n      });\n    }\n\n    return result;\n  }; // react-slick has a bug due to which it is initialized\n  // with the incorrect position if the RTL property is true\n  // this function returns the correct values\n\n\n  var getStartPosition = function getStartPosition() {\n    var infinite = props.infinite;\n    infinite = infinite === true || infinite === undefined;\n\n    if (direction === 'ltr') {\n      return 0;\n    }\n\n    var slidesToShow = getSlidesToShow();\n    var slidesCount = getSlidesCount();\n\n    if (!infinite) {\n      return Math.max(0, slidesCount - slidesToShow);\n    }\n\n    return (Math.ceil(slidesCount / slidesToShow) - 1) * slidesToShow;\n  }; // returns indexes of active slides by currentIndex\n\n\n  var getActiveSlides = function getActiveSlides(currentIndex) {\n    var slidesToShow = getSlidesToShow();\n    var activeSlides = [];\n    var slidesCount = getSlidesCount();\n    var firstSlide = Math.max(0, Math.min(slidesCount - slidesToShow, currentIndex));\n    var lastSlide = Math.min(slidesCount, firstSlide + slidesToShow);\n\n    for (var i = firstSlide; i < lastSlide; i += 1) {\n      activeSlides.push(i);\n    }\n\n    return activeSlides;\n  };\n\n  var _useState = useState(false),\n      preventClick = _useState[0],\n      setPreventClick = _useState[1];\n\n  var _useState2 = useState(getActiveSlides(getStartPosition())),\n      activeSlides = _useState2[0],\n      setActiveSlides = _useState2[1];\n\n  var onMousedown = function onMousedown(event) {\n    var downX = event.screenX;\n    var downY = event.screenY;\n    var clickPrevented = false;\n\n    var onMousemove = function onMousemove(moveEvent) {\n      if (clickPrevented) {\n        return;\n      } // Thank you Pythagoras.\n\n\n      var distance = Math.sqrt(Math.pow(Math.abs(downX - moveEvent.screenX), 2) + Math.pow(Math.abs(downY - moveEvent.screenY), 2));\n\n      if (moveEvent.cancelable && distance > 3) {\n        moveEvent.preventDefault();\n      }\n\n      if (distance > 15) {\n        clickPrevented = true;\n        setPreventClick(clickPrevented);\n      }\n    };\n\n    var onMouseup = function onMouseup() {\n      clickPrevented = false;\n      setPreventClick(clickPrevented);\n      document.removeEventListener('mousemove', onMousemove);\n      document.removeEventListener('mouseup', onMouseup);\n    };\n\n    document.addEventListener('mousemove', onMousemove);\n    document.addEventListener('mouseup', onMouseup);\n  };\n\n  var setSlickRef = useCallback(function (ref) {\n    if (forwardRef) {\n      if ('current' in forwardRef) {\n        forwardRef.current = ref;\n      } else {\n        forwardRef(ref);\n      }\n    }\n\n    if (ref && ref !== slickRef.current) {\n      // react-slick forgot that if the RTL parameter is true,\n      // then the next and prev methods need to be swapped, so let's do it yourself\n      originalSlickNextRef.current = ref.slickNext;\n      originalSlickPrevRef.current = ref.slickPrev; // eslint-disable-next-line no-param-reassign\n\n      ref.slickNext = function () {\n        return slickNextRef.current && slickNextRef.current();\n      }; // eslint-disable-next-line no-param-reassign\n\n\n      ref.slickPrev = function () {\n        return slickPrevRef.current && slickPrevRef.current();\n      };\n    }\n\n    slickRef.current = ref;\n  }, []);\n  useEffect(function () {\n    slickNextRef.current = function () {\n      if (direction === 'rtl') {\n        originalSlickNextRef.current();\n      } else {\n        originalSlickNextRef.current();\n      }\n    };\n\n    slickPrevRef.current = function () {\n      if (direction === 'rtl') {\n        originalSlickNextRef.current();\n      } else {\n        originalSlickPrevRef.current();\n      }\n    };\n  }, [direction]); // If the slides have changed, we also need to change the active slides.\n\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      setActiveSlides(getActiveSlides(getStartPosition()));\n    }, 0);\n    return function () {\n      clearTimeout(timer);\n    };\n  }, [children]); // Resets position when changing direction.\n\n  useEffect(function () {\n    if (slickRef.current) {\n      slickRef.current.slickGoTo(getStartPosition(), true);\n    }\n  }, [direction]);\n  var beforeChangeWrapper = useCallback(function (oldIndex, newIndex) {\n    if (beforeChange) {\n      beforeChange(oldIndex, newIndex);\n    } // react-slick incorrectly adds the .slick-active class to slides\n    // if the RTL parameter is true so we will do it ourselves\n\n\n    setTimeout(function () {\n      setActiveSlides(getActiveSlides(newIndex));\n    }, 0);\n  }, [beforeChange]);\n  var classes = classNames('slick-prevent-click', {\n    'slick-prevent-click--active': preventClick\n  }); // we need to reverse slides if direction is RTL\n  // because react-slick displays them in the wrong order\n\n  var reversedChildren = React.Children.toArray(children);\n\n  if (direction === 'rtl') {\n    reversedChildren = reversedChildren.slice(0);\n    reversedChildren.reverse();\n  }\n\n  reversedChildren = reversedChildren.map(function (slide, index) {\n    // react-slick incorrectly adds the .slick-active class to slides\n    // if the RTL parameter is true so we will do it ourselves\n    var slideClasses = classNames({\n      'correct-slick-active': activeSlides.includes(index)\n    });\n    return __jsx(\"div\", {\n      key: index,\n      dir: direction,\n      className: slideClasses\n    }, slide);\n  });\n  return (// eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    __jsx(\"div\", {\n      className: classes,\n      onMouseDown: onMousedown\n    }, __jsx(Slick, _extends({}, otherProps, {\n      rtl: direction === 'rtl',\n      beforeChange: beforeChangeWrapper,\n      ref: setSlickRef\n    }), reversedChildren))\n  );\n}\n\nexport default React.forwardRef(function (props, ref) {\n  var children = props.children;\n  return __jsx(AppSlickInner, _extends({\n    forwardRef: ref\n  }, props), children);\n});","map":null,"metadata":{},"sourceType":"module"}