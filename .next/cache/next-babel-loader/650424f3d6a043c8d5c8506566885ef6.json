{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React, { useEffect, useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { useForm } from 'react-hook-form'; // application\n\nimport ReviewsList from '~/components/shop/ReviewsList';\nimport { shopApi } from '~/api';\nimport { useAsyncAction, useIsUnmountedRef } from '~/store/hooks';\nimport { validateEmail } from '~/services/validators';\n\nfunction ReviewsView(props) {\n  var _errors$rating, _errors$author, _errors$email, _errors$email2, _errors$content;\n\n  const intl = useIntl();\n  const {\n    productId,\n    productPageLayout\n  } = props;\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const listMetaRef = useRef(null);\n  const {\n    0: list,\n    1: setList\n  } = useState(null);\n  const formMethods = useForm();\n  const {\n    handleSubmit,\n    register,\n    errors,\n    reset\n  } = formMethods;\n  const isUnmountedRef = useIsUnmountedRef();\n\n  const load = async (productId, page, canceledRef) => {\n    await shopApi.getProductReviews(productId, {\n      limit: 8,\n      page\n    }).then(result => {\n      if (isUnmountedRef.current || (canceledRef === null || canceledRef === void 0 ? void 0 : canceledRef.current)) {\n        return;\n      }\n\n      listMetaRef.current = {\n        productId,\n        page\n      };\n      setList(result);\n      setPage(result.page);\n    });\n  };\n\n  useEffect(() => {\n    var _listMetaRef$current, _listMetaRef$current2;\n\n    const canceledRef = {\n      current: false\n    };\n\n    if (productId !== ((_listMetaRef$current = listMetaRef.current) === null || _listMetaRef$current === void 0 ? void 0 : _listMetaRef$current.productId) || page !== ((_listMetaRef$current2 = listMetaRef.current) === null || _listMetaRef$current2 === void 0 ? void 0 : _listMetaRef$current2.page)) {\n      load(productId, page, canceledRef).then();\n    }\n\n    return () => {\n      canceledRef.current = true;\n    };\n  }, [productId, page]);\n  const [submit, submitInProgress] = useAsyncAction(async data => {\n    await shopApi.addProductReview(productId, _objectSpread(_objectSpread({}, data), {}, {\n      rating: parseFloat(data.rating)\n    }));\n    await load(productId, 1);\n\n    if (isUnmountedRef.current) {\n      return;\n    }\n\n    reset();\n    toast.success(intl.formatMessage({\n      id: 'TEXT_TOAST_REVIEW_ADDED'\n    }));\n  }, [productId, reset]);\n  return __jsx(\"div\", {\n    className: \"reviews-view\"\n  }, list && __jsx(\"div\", {\n    className: \"reviews-view__list\"\n  }, __jsx(ReviewsList, {\n    list: list,\n    page: page,\n    onPageChange: setPage\n  })), __jsx(\"form\", {\n    className: \"reviews-view__form\",\n    onSubmit: handleSubmit(submit)\n  }, __jsx(\"h3\", {\n    className: \"reviews-view__header\"\n  }, __jsx(FormattedMessage, {\n    id: \"HEADER_WRITE_REVIEW\"\n  })), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: classNames({\n      'col-xxl-8 col-xl-10 col-lg-9 col-12': productPageLayout === 'full',\n      'col-xxl-12 col-xl-10 col-12': productPageLayout === 'sidebar'\n    })\n  }, __jsx(\"div\", {\n    className: \"form-row\"\n  }, __jsx(\"div\", {\n    className: \"form-group col-md-4\"\n  }, __jsx(\"label\", {\n    htmlFor: \"review-stars\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_RATING_LABEL\"\n  })), __jsx(\"select\", {\n    id: \"review-stars\",\n    name: \"rating\",\n    className: classNames('form-control', {\n      'is-invalid': errors.rating\n    }),\n    ref: register({\n      required: true\n    })\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, intl.formatMessage({\n    id: 'INPUT_RATING_PLACEHOLDER'\n  })), [5, 4, 3, 2, 1].map(stars => __jsx(\"option\", {\n    key: stars,\n    value: stars\n  }, intl.formatMessage({\n    id: 'INPUT_RATING_OPTION'\n  }, {\n    stars\n  })))), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$rating = errors.rating) === null || _errors$rating === void 0 ? void 0 : _errors$rating.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-4\"\n  }, __jsx(\"label\", {\n    htmlFor: \"review-author\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_YOUR_NAME_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"review-author\",\n    name: \"author\",\n    className: classNames('form-control', {\n      'is-invalid': errors.author\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_YOUR_NAME_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$author = errors.author) === null || _errors$author === void 0 ? void 0 : _errors$author.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-4\"\n  }, __jsx(\"label\", {\n    htmlFor: \"review-email\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_EMAIL_ADDRESS_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"review-email\",\n    name: \"email\",\n    className: classNames('form-control', {\n      'is-invalid': errors.email\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_EMAIL_ADDRESS_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true,\n      validate: {\n        email: validateEmail\n      }\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }), ((_errors$email2 = errors.email) === null || _errors$email2 === void 0 ? void 0 : _errors$email2.type) === 'email' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_INCORRECT_EMAIL\"\n  })))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"review-text\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_YOUR_REVIEW_LABEL\"\n  })), __jsx(\"textarea\", {\n    id: \"review-text\",\n    rows: 6,\n    name: \"content\",\n    className: classNames('form-control', {\n      'is-invalid': errors.content\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_YOUR_REVIEW_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$content = errors.content) === null || _errors$content === void 0 ? void 0 : _errors$content.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group mb-0 mt-4\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: classNames('btn', 'btn-primary', {\n      'btn-loading': submitInProgress\n    })\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_POST_REVIEW\"\n  })))))));\n}\n\nexport default ReviewsView;","map":null,"metadata":{},"sourceType":"module"}