{"ast":null,"code":"// third-party\nimport thunk from 'redux-thunk';\nimport { applyMiddleware, createStore } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper'; // application\n\nimport rootReducer from '~/store/root/rootReducer';\nimport version from '~/store/version';\nconst STORAGE_KEY = 'red-parts/react';\nexport const save = state => {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n};\nexport const load = () => {\n  if (!false) {\n    return undefined;\n  }\n\n  let state;\n\n  try {\n    state = localStorage.getItem(STORAGE_KEY);\n\n    if (typeof state === 'string') {\n      state = JSON.parse(state);\n    }\n\n    if (state && state.version !== version) {\n      state = undefined;\n    }\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n\n  return state || undefined;\n};\n\nconst bindMiddleware = (...middleware) => {\n  if (false) {\n    // eslint-disable-next-line global-require\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst makeStore = () => createStore(rootReducer, bindMiddleware(thunk));\n\nexport const wrapper = createWrapper(makeStore);","map":null,"metadata":{},"sourceType":"module"}