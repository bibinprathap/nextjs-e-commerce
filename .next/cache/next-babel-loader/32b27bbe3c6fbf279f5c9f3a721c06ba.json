{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React, { useCallback } from 'react';\nimport { Modal } from 'reactstrap';\nimport classNames from 'classnames'; // application\n\nimport { Cross12Svg } from '~/svg';\nimport { shopApi } from '~/api';\nimport { useEnquiry, useEnquiryClose } from '~/store/enquiry/enquiryHooks';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { useForm } from 'react-hook-form';\nimport { useAsyncAction } from '~/store/hooks';\nimport { validateEmail } from '~/services/validators';\n\nfunction SendEnquiry() {\n  var _errors$fullname, _errors$phonenumber, _errors$chassis, _errors$email, _errors$email2, _errors$enquiryconten;\n\n  const intl = useIntl();\n  const enquiry = useEnquiry();\n  const enquiryClose = useEnquiryClose();\n  const toggle = useCallback(() => {\n    if ((enquiry || {\n      open: false\n    }).open) {\n      enquiryClose();\n    }\n  }, [(enquiry || {\n    open: false\n  }).open, enquiryClose]);\n  const formMethods = useForm();\n  const {\n    handleSubmit,\n    register,\n    errors,\n    reset\n  } = formMethods;\n  const [submit, submitInProgress] = useAsyncAction(async data => {\n    await shopApi.sendEnquiry(_objectSpread({}, data));\n    reset();\n    toast.success(intl.formatMessage({\n      id: 'TEXT_TOAST_ENQUIRY_ADDED'\n    }));\n  }, [reset]);\n  return __jsx(Modal, {\n    isOpen: (enquiry || {\n      open: false\n    }).open,\n    toggle: toggle,\n    centered: true,\n    className: \"enquiry\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"enquiry__close\",\n    onClick: enquiryClose\n  }, __jsx(Cross12Svg, null)), __jsx(\"form\", {\n    className: \"enquiry-view__form\",\n    onSubmit: handleSubmit(submit)\n  }, __jsx(\"h3\", {\n    className: \"enquiry-view__header\"\n  }, __jsx(FormattedMessage, {\n    id: \"HEADER_WRITE_ENQUIRY\"\n  })), __jsx(\"div\", {\n    className: \"row enquiry-view__body\"\n  }, __jsx(\"div\", {\n    className: \"col-xxl-8 col-xl-10 col-lg-9 col-12\"\n  }, __jsx(\"div\", {\n    className: \"form-row\"\n  }, __jsx(\"div\", {\n    className: \"form-group col-md-4\"\n  }, __jsx(\"label\", {\n    htmlFor: \"review-stars\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_ENTERNAME_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"review-fullname\",\n    name: \"fullname\",\n    className: classNames('form-control', {\n      'is-invalid': errors.fullname\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_YOUR_NAME_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$fullname = errors.fullname) === null || _errors$fullname === void 0 ? void 0 : _errors$fullname.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-4\"\n  }, __jsx(\"label\", {\n    htmlFor: \"review-phonenumber\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_WHATSAPPNUMBER_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"review-phonenumber\",\n    name: \"phonenumber\",\n    className: classNames('form-control', {\n      'is-invalid': errors.phonenumber\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_YOUR_WHATSAPP_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$phonenumber = errors.phonenumber) === null || _errors$phonenumber === void 0 ? void 0 : _errors$phonenumber.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-4\"\n  }, __jsx(\"label\", {\n    htmlFor: \"review-chassis\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_CHASSISNUMBER_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"review-chassis\",\n    name: \"chassis\",\n    className: classNames('form-control', {\n      'is-invalid': errors.chassis\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_CHASSISNUMBER_LABEL'\n    }),\n    ref: register({\n      required: false\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$chassis = errors.chassis) === null || _errors$chassis === void 0 ? void 0 : _errors$chassis.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-4\"\n  }, __jsx(\"label\", {\n    htmlFor: \"review-email\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_EMAIL_ADDRESS_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"review-email\",\n    name: \"email\",\n    className: classNames('form-control', {\n      'is-invalid': errors.email\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_EMAIL_ADDRESS_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true,\n      validate: {\n        email: validateEmail\n      }\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }), ((_errors$email2 = errors.email) === null || _errors$email2 === void 0 ? void 0 : _errors$email2.type) === 'email' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_INCORRECT_EMAIL\"\n  })))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"review-enquirycontent\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_MESSAGE_LABEL\"\n  })), __jsx(\"textarea\", {\n    id: \"review-enquirycontent\",\n    rows: 6,\n    name: \"enquirycontent\",\n    className: classNames('form-control', {\n      'is-invalid': errors.enquirycontent\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_YOUR_REVIEW_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, ((_errors$enquiryconten = errors.enquirycontent) === null || _errors$enquiryconten === void 0 ? void 0 : _errors$enquiryconten.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group mb-0 mt-4\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: classNames('btn', 'btn-primary', {\n      'btn-loading': submitInProgress\n    })\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_POST_ENQUIRY\"\n  })))))));\n}\n\nexport default SendEnquiry;","map":null,"metadata":{},"sourceType":"module"}