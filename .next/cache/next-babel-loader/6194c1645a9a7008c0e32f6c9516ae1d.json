{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { vehicles as dbVehicles } from '~/fake-server/database/vehicles';\nexport class VehicleFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"value\", null);\n\n    _defineProperty(this, \"vehicle\", null);\n  }\n\n  static testCompatibility(vehicle, product) {\n    if (product.compatibility === 'all') {\n      return true;\n    }\n\n    if (product.compatibility === 'unknown') {\n      return false;\n    }\n\n    return product.compatibility.includes(vehicle.id);\n  }\n\n  test(product) {\n    if (this.value) {\n      return this.vehicle !== null && VehicleFilterBuilder.testCompatibility(this.vehicle, product);\n    }\n\n    return true;\n  }\n\n  makeItems(products, value) {\n    this.vehicle = dbVehicles.find(x => x.id === parseFloat(value)) || null;\n    this.value = this.vehicle ? this.vehicle.id : null;\n  }\n\n  calc() {}\n\n  build() {\n    return {\n      type: 'vehicle',\n      slug: this.slug,\n      name: this.name,\n      value: this.value,\n      vehicle: this.vehicle\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}