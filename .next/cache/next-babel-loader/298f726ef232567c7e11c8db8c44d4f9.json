{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n// react\nimport { useMemo, useState } from 'react'; // third-party\n\nimport { useForm } from 'react-hook-form'; // application\n\nimport { useAsyncAction } from '~/store/hooks';\nimport { useUserSignUp } from '~/store/user/userHooks';\nexport function useSignUpForm() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var signUp = useUserSignUp();\n  var onSuccess = options.onSuccess;\n\n  var _useState = useState(null),\n      serverError = _useState[0],\n      setServerError = _useState[1];\n\n  var methods = useForm({\n    defaultValues: {\n      email: 'user@example.com',\n      password: '123456',\n      confirmPassword: '123456'\n    }\n  });\n  var handleSubmit = methods.handleSubmit;\n\n  var _useAsyncAction = useAsyncAction(function (data) {\n    setServerError(null);\n    return signUp(data.email, data.password).then(function () {\n      if (onSuccess) {\n        onSuccess();\n      }\n    }, function (error) {\n      setServerError(\"ERROR_API_\".concat(error.message));\n    });\n  }, [signUp, setServerError, onSuccess]),\n      _useAsyncAction2 = _slicedToArray(_useAsyncAction, 2),\n      submit = _useAsyncAction2[0],\n      submitInProgress = _useAsyncAction2[1];\n\n  return {\n    submit: useMemo(function () {\n      return handleSubmit(submit);\n    }, [handleSubmit, submit]),\n    submitInProgress: submitInProgress || methods.formState.isSubmitting,\n    serverError: serverError,\n    errors: methods.errors,\n    register: methods.register,\n    watch: methods.watch\n  };\n}","map":null,"metadata":{},"sourceType":"module"}