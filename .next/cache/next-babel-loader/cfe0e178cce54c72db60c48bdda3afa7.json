{"ast":null,"code":"var __jsx = React.createElement;\n// react\nimport React, { useMemo, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl'; // application\n\nimport AppImageNew from '~/components/shared/AppImageNew';\nimport AppLink from '~/components/shared/AppLink';\nimport AsyncAction from '~/components/shared/AsyncAction';\nimport BlockHeader from '~/components/blocks/BlockHeader';\nimport BlockSpace from '~/components/blocks/BlockSpace';\nimport CurrencyFormat from '~/components/shared/CurrencyFormat';\nimport PageTitle from '~/components/shared/PageTitle';\nimport Rating from '~/components/shared/Rating';\nimport StockStatusBadge from '~/components/shared/StockStatusBadge';\nimport url from '~/services/url';\nimport { useCartAddItem } from '~/store/cart/cartHooks';\nimport { useCompare, useCompareClear, useCompareRemoveItem } from '~/store/compare/compareHooks';\n\nfunction Page() {\n  const intl = useIntl();\n  const compare = useCompare();\n  const compareClear = useCompareClear();\n  const cartAddItem = useCartAddItem();\n  const compareRemoveItem = useCompareRemoveItem();\n  const products = compare.items;\n  const {\n    0: show,\n    1: setShow\n  } = useState('all');\n  const attributes = useMemo(() => {\n    const attributes = [];\n    products.forEach(product => product.attributes.forEach(pa => {\n      let attribute = attributes.find(x => x.slug === pa.slug);\n\n      if (!attribute) {\n        attribute = {\n          slug: pa.slug,\n          name: pa.name,\n          sameValues: false,\n          values: {}\n        };\n        attributes.push(attribute);\n      }\n\n      attribute.values[product.id] = pa.values;\n    }));\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attribute = attributes[i];\n      const values = products.map(product => (attribute.values[product.id] || []).map(x => x.slug).sort());\n      attribute.sameValues = values.reduce((sameValues, curr) => sameValues && values[0].length === curr.length && values[0].join() === curr.join(), true);\n    }\n\n    return attributes;\n  }, [products]);\n  const differentAttributes = useMemo(() => attributes.filter(x => !x.sameValues), [attributes]);\n  const currentAttributes = show === 'all' ? attributes : differentAttributes;\n\n  if (compare.items.length === 0) {\n    return __jsx(React.Fragment, null, __jsx(PageTitle, null, intl.formatMessage({\n      id: 'HEADER_COMPARE'\n    })), __jsx(BlockHeader, {\n      breadcrumb: [{\n        title: intl.formatMessage({\n          id: 'LINK_HOME'\n        }),\n        url: '/'\n      }, {\n        title: intl.formatMessage({\n          id: 'LINK_COMPARE'\n        }),\n        url: ''\n      }]\n    }), __jsx(\"div\", {\n      className: \"block-empty\"\n    }, __jsx(\"div\", {\n      className: \"container\"\n    }, __jsx(\"div\", {\n      className: \"block-empty__body\"\n    }, __jsx(\"h1\", {\n      className: \"block-empty__title\"\n    }, __jsx(FormattedMessage, {\n      id: \"HEADER_COMPARE_EMPTY_TITLE\"\n    })), __jsx(\"div\", {\n      className: \"block-empty__message\",\n      dangerouslySetInnerHTML: {\n        __html: intl.formatMessage({\n          id: 'HEADER_COMPARE_EMPTY_SUBTITLE'\n        })\n      }\n    }), __jsx(\"div\", {\n      className: \"block-empty__action\"\n    }, __jsx(AppLink, {\n      href: url.home(),\n      className: \"btn btn-primary btn-sm\"\n    }, __jsx(FormattedMessage, {\n      id: \"BUTTON_GO_TO_HOMEPAGE\"\n    })))))), __jsx(BlockSpace, {\n      layout: \"before-footer\"\n    }));\n  }\n\n  const tbody = __jsx(\"tbody\", null, __jsx(\"tr\", {\n    className: \"compare-table__row\"\n  }, __jsx(\"th\", {\n    className: \"compare-table__column compare-table__column--header\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_PRODUCT\"\n  })), compare.items.map(product => __jsx(\"td\", {\n    key: product.id,\n    className: \"compare-table__column compare-table__column--product\"\n  }, __jsx(AppLink, {\n    href: url.product(product),\n    className: \"compare-table__product\"\n  }, __jsx(\"div\", {\n    className: \"compare-table__product-image image image--type--product\"\n  }, __jsx(\"div\", {\n    className: \"image__body\"\n  }, __jsx(AppImageNew, {\n    className: \"image__tag\",\n    src: product.images && product.images[0]\n  }))), __jsx(\"div\", {\n    className: \"compare-table__product-name\"\n  }, product.name)))), __jsx(\"td\", {\n    className: \"compare-table__column compare-table__column--fake\"\n  })), __jsx(\"tr\", {\n    className: \"compare-table__row\"\n  }, __jsx(\"th\", {\n    className: \"compare-table__column compare-table__column--header\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_RATING\"\n  })), compare.items.map(product => __jsx(\"td\", {\n    key: product.id,\n    className: \"compare-table__column compare-table__column--product\"\n  }, __jsx(\"div\", {\n    className: \"compare-table__rating\"\n  }, __jsx(\"div\", {\n    className: \"compare-table__rating-stars\"\n  }, __jsx(Rating, {\n    value: product.rating || 0\n  })), __jsx(\"div\", {\n    className: \"compare-table__rating-title\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_RATING_LABEL\",\n    values: {\n      rating: product.rating,\n      reviews: product.reviews\n    }\n  }))))), __jsx(\"td\", {\n    className: \"compare-table__column compare-table__column--fake\"\n  })), __jsx(\"tr\", {\n    className: \"compare-table__row\"\n  }, __jsx(\"th\", {\n    className: \"compare-table__column compare-table__column--header\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_STOCK_STATUS\"\n  })), compare.items.map(product => __jsx(\"td\", {\n    key: product.id,\n    className: \"compare-table__column compare-table__column--product\"\n  }, __jsx(StockStatusBadge, {\n    stock: product.stock,\n    className: \"product__stock\"\n  }))), __jsx(\"td\", {\n    className: \"compare-table__column compare-table__column--fake\"\n  })), __jsx(\"tr\", {\n    className: \"compare-table__row\"\n  }, __jsx(\"th\", {\n    className: \"compare-table__column compare-table__column--header\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_PRICE\"\n  })), compare.items.map(product => __jsx(\"td\", {\n    key: product.id,\n    className: \"compare-table__column compare-table__column--product\"\n  }, __jsx(CurrencyFormat, {\n    value: product.price\n  }))), __jsx(\"td\", {\n    className: \"compare-table__column compare-table__column--fake\"\n  })), __jsx(\"tr\", {\n    className: \"compare-table__row\"\n  }, __jsx(\"th\", {\n    className: \"compare-table__column compare-table__column--header\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_ADD_TO_CART\"\n  }))), compare.items.map(product => __jsx(\"td\", {\n    key: product.id,\n    className: \"compare-table__column compare-table__column--product\"\n  }, __jsx(AsyncAction, {\n    action: () => cartAddItem(product),\n    render: ({\n      run,\n      loading\n    }) => __jsx(\"button\", {\n      type: \"button\",\n      className: classNames('btn btn-sm btn-primary', {\n        'btn-loading': loading\n      }),\n      onClick: run\n    }, __jsx(FormattedMessage, {\n      id: \"BUTTON_ADD_TO_CART\"\n    }))\n  }))), __jsx(\"td\", {\n    className: \"compare-table__column compare-table__column--fake\"\n  })), __jsx(\"tr\", {\n    className: \"compare-table__row\"\n  }, __jsx(\"th\", {\n    className: \"compare-table__column compare-table__column--header\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_SKU\"\n  })), compare.items.map(product => __jsx(\"td\", {\n    key: product.id,\n    className: \"compare-table__column compare-table__column--product\"\n  }, product.sku)), __jsx(\"td\", {\n    className: \"compare-table__column compare-table__column--fake\"\n  })), currentAttributes.map((attribute, index) => __jsx(\"tr\", {\n    key: index,\n    className: \"compare-table__row\"\n  }, __jsx(\"th\", {\n    className: \"compare-table__column compare-table__column--header\"\n  }, attribute.name), compare.items.map(product => {\n    var _attribute$values$pro, _attribute$values$pro2;\n\n    return __jsx(\"td\", {\n      key: product.id,\n      className: \"compare-table__column compare-table__column--product\"\n    }, ((_attribute$values$pro = attribute.values[product.id]) === null || _attribute$values$pro === void 0 ? void 0 : _attribute$values$pro.length) > 0 && attribute.values[product.id].map(value => value.name).join(', '), ((_attribute$values$pro2 = attribute.values[product.id]) === null || _attribute$values$pro2 === void 0 ? void 0 : _attribute$values$pro2.length) === 0 && 'â€”');\n  }), __jsx(\"td\", {\n    className: \"compare-table__column compare-table__column--fake\"\n  }))), __jsx(\"tr\", {\n    className: \"compare-table__row\"\n  }, __jsx(\"th\", {\n    className: \"compare-table__column compare-table__column--header\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, __jsx(FormattedMessage, {\n    id: \"TABLE_REMOVE\"\n  }))), compare.items.map(product => __jsx(\"td\", {\n    key: product.id,\n    className: \"compare-table__column compare-table__column--product\"\n  }, __jsx(AsyncAction, {\n    action: () => compareRemoveItem(product.id),\n    render: ({\n      run,\n      loading\n    }) => __jsx(\"button\", {\n      type: \"button\",\n      className: classNames('btn', 'btn-sm', 'btn-secondary', {\n        'btn-loading': loading\n      }),\n      onClick: run\n    }, __jsx(FormattedMessage, {\n      id: \"BUTTON_REMOVE\"\n    }))\n  }))), __jsx(\"td\", {\n    className: \"compare-table__column compare-table__column--fake\"\n  })));\n\n  return __jsx(React.Fragment, null, __jsx(PageTitle, null, intl.formatMessage({\n    id: 'HEADER_COMPARE'\n  })), __jsx(BlockHeader, {\n    pageTitle: __jsx(FormattedMessage, {\n      id: \"HEADER_COMPARE\"\n    }),\n    breadcrumb: [{\n      title: intl.formatMessage({\n        id: 'LINK_HOME'\n      }),\n      url: '/'\n    }, {\n      title: intl.formatMessage({\n        id: 'LINK_COMPARE'\n      }),\n      url: ''\n    }]\n  }), __jsx(\"div\", {\n    className: \"block\"\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"div\", {\n    className: \"compare card\"\n  }, __jsx(\"div\", {\n    className: \"compare__options-list\"\n  }, __jsx(\"div\", {\n    className: \"compare__option\"\n  }, __jsx(\"div\", {\n    className: \"compare__option-label\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_SHOW_LABEL\"\n  }), \":\"), __jsx(\"div\", {\n    className: \"compare__option-control\"\n  }, __jsx(\"div\", {\n    className: \"button-toggle\"\n  }, __jsx(\"div\", {\n    className: \"button-toggle__list\"\n  }, __jsx(\"label\", {\n    className: \"button-toggle__item\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    className: \"button-toggle__input\",\n    name: \"compare-filter\",\n    value: \"all\",\n    checked: show === 'all',\n    onChange: () => setShow('all')\n  }), __jsx(\"span\", {\n    className: \"button-toggle__button\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_SHOW_OPTION_ALL\"\n  }))), __jsx(\"label\", {\n    className: \"button-toggle__item\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    className: \"button-toggle__input\",\n    name: \"compare-filter\",\n    value: \"different\",\n    checked: show === 'different',\n    onChange: () => setShow('different')\n  }), __jsx(\"span\", {\n    className: \"button-toggle__button\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_SHOW_OPTION_DIFFERENT\"\n  }))))))), __jsx(\"div\", {\n    className: \"compare__option\"\n  }, __jsx(\"div\", {\n    className: \"compare__option-control\"\n  }, __jsx(AsyncAction, {\n    action: compareClear,\n    render: ({\n      run,\n      loading\n    }) => __jsx(\"button\", {\n      type: \"button\",\n      className: classNames('btn', 'btn-secondary', 'btn-xs', {\n        'btn-loading': loading\n      }),\n      onClick: run\n    }, __jsx(FormattedMessage, {\n      id: \"BUTTON_CLEAR_LIST\"\n    }))\n  })))), __jsx(\"div\", {\n    className: \"table-responsive\"\n  }, __jsx(\"table\", {\n    className: \"compare__table compare-table\"\n  }, tbody))))), __jsx(BlockSpace, {\n    layout: \"before-footer\"\n  }));\n}\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}