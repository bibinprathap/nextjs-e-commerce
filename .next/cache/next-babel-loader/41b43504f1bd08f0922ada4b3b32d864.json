{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// application\nimport { baseUrl } from '~/services/utils';\n// data\nimport dataShopLanguages, { dataShopDefaultLocale } from '~/data/shopLanguages';\nexport function getDefaultLocale() {\n  return dataShopDefaultLocale;\n}\nexport function getAllLanguages() {\n  return dataShopLanguages;\n}\nexport function getDefaultLanguage() {\n  const language = getAllLanguages().find(language => language.locale === getDefaultLocale());\n\n  if (!language) {\n    throw new Error('Default language not found.');\n  }\n\n  return language;\n}\nexport function getLanguageByPath(path) {\n  return getAllLanguages().find(language => {\n    const rg = new RegExp(`^\\\\/${language.locale}(\\\\/|$)`);\n    return rg.test(path);\n  }) || null;\n}\nexport function getLanguageByLocale(locale) {\n  return getAllLanguages().find(language => language.locale === locale) || null;\n}\n\nasync function loadTranslation(locale) {\n  if (false) {\n    return fetch(baseUrl(`/i18n/${locale}.json`)).then(response => response.json());\n  }\n\n  return (await import(`../../../public/i18n/${locale}.json`)).default;\n}\n\nexport async function loadMessages(locale) {\n  const baseMessages = locale === getDefaultLocale() ? Promise.resolve({}) : loadTranslation(getDefaultLocale());\n  const mainMessages = loadTranslation(locale);\n  return _objectSpread(_objectSpread({}, await baseMessages), await mainMessages);\n}\nexport function removePrefix(path) {\n  const languages = getAllLanguages();\n\n  for (let i = 0; i < languages.length; i += 1) {\n    const language = languages[i];\n    const rg = new RegExp(`^\\\\/${language.locale}(\\\\/|$)`);\n\n    if (rg.test(path)) {\n      return path.substr(language.locale.length + 1);\n    }\n  }\n\n  return path;\n}","map":null,"metadata":{},"sourceType":"module"}