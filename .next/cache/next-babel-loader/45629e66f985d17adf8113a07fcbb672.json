{"ast":null,"code":"var __jsx = React.createElement;\n// react\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nfunction Collapse(props) {\n  const {\n    toggleClass,\n    render,\n    open\n  } = props;\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  const itemRef = useRef(null);\n  const contentRef = useRef(null);\n  const expand = useCallback((immediate = false) => {\n    const item = itemRef.current;\n    const content = contentRef.current || item;\n\n    if (!item || !content) {\n      return;\n    }\n\n    if (immediate) {\n      item.classList.add(toggleClass);\n      content.style.height = '';\n    } else {\n      const startHeight = content.getBoundingClientRect().height;\n      item.classList.add(toggleClass);\n      const endHeight = content.getBoundingClientRect().height;\n      content.style.height = `${startHeight}px`;\n      content.getBoundingClientRect(); // force reflow\n\n      content.style.height = `${endHeight}px`;\n\n      if (content.getBoundingClientRect().height === endHeight) {\n        content.style.height = '';\n      }\n    }\n  }, [toggleClass, itemRef, contentRef]);\n  const collapse = useCallback((immediate = false) => {\n    const item = itemRef.current;\n    const content = contentRef.current || item;\n\n    if (!item || !content) {\n      return;\n    }\n\n    if (immediate) {\n      item.classList.remove(toggleClass);\n      content.style.height = '';\n    } else {\n      const startHeight = content.getBoundingClientRect().height;\n      content.style.height = `${startHeight}px`;\n      item.classList.remove(toggleClass);\n      content.getBoundingClientRect(); // force reflow\n\n      content.style.height = '';\n    }\n  }, [toggleClass, itemRef, contentRef]);\n  const handleToggle = useCallback(() => {\n    const item = itemRef.current;\n\n    if (!item) {\n      return;\n    }\n\n    if (item.classList.contains(toggleClass)) {\n      collapse();\n    } else {\n      expand();\n    }\n  }, [expand, collapse, toggleClass, itemRef]);\n  useEffect(() => {\n    if (typeof open === 'boolean') {\n      if (open) {\n        expand(!init);\n      } else {\n        collapse(!init);\n      }\n    }\n\n    setInit(true);\n  }, [expand, collapse, open, init]);\n  useEffect(() => {\n    const item = itemRef.current;\n    const content = contentRef.current || item;\n\n    if (!content) {\n      return () => {};\n    }\n\n    const handleTransitionEnd = event => {\n      if (content && event.propertyName === 'height') {\n        content.style.height = '';\n      }\n    };\n\n    content.addEventListener('transitionend', handleTransitionEnd);\n    return () => {\n      if (!content) {\n        return;\n      }\n\n      content.removeEventListener('transitionend', handleTransitionEnd);\n    };\n  }, []);\n  return useMemo(() => {\n    if (render) {\n      return __jsx(React.Fragment, null, render({\n        toggle: handleToggle,\n        setItemRef: itemRef,\n        setContentRef: contentRef\n      }));\n    }\n\n    return null;\n  }, [render, handleToggle, itemRef, contentRef]);\n}\n\nexport default Collapse;","map":null,"metadata":{},"sourceType":"module"}