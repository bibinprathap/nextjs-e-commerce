{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// react\nimport React from 'react'; // third-party\n\nimport classNames from 'classnames';\n\nfunction InputNumber(props) {\n  const {\n    size,\n    className,\n    onChange,\n    inputRef\n  } = props,\n        otherProps = _objectWithoutProperties(props, [\"size\", \"className\", \"onChange\", \"inputRef\"]);\n\n  const {\n    value = '',\n    step = 1,\n    min = null,\n    max = null\n  } = props;\n\n  const change = (direction, prevValue = value) => {\n    // noinspection SuspiciousTypeOfGuard\n    let newValue = typeof prevValue === 'string' ? parseFloat(prevValue) : prevValue;\n    newValue = (Number.isNaN(newValue) ? 0 : newValue) + step * direction;\n\n    if (max !== null) {\n      newValue = Math.min(max, newValue);\n    }\n\n    if (min !== null) {\n      newValue = Math.max(min, newValue);\n    }\n\n    if (newValue !== prevValue && onChange) {\n      onChange(newValue);\n    }\n\n    return newValue;\n  };\n\n  const changeByTimer = direction => {\n    let prevValue = value;\n    let interval;\n    const timer = setTimeout(() => {\n      interval = setInterval(() => {\n        prevValue = change(direction, prevValue);\n      }, 50);\n    }, 300);\n\n    const documentMouseUp = () => {\n      clearTimeout(timer);\n      clearInterval(interval);\n      document.removeEventListener('mouseup', documentMouseUp, false);\n    };\n\n    document.addEventListener('mouseup', documentMouseUp, false);\n  };\n\n  const handleAddMouseDown = () => {\n    change(1);\n    changeByTimer(1);\n  };\n\n  const handleSubMouseDown = () => {\n    change(-1);\n    changeByTimer(-1);\n  };\n\n  const handleChange = event => {\n    if (onChange) {\n      if (event.target.value.trim() === '') {\n        onChange('');\n      } else {\n        const value = parseFloat(event.target.value);\n        onChange(Number.isNaN(value) ? min || 0 : value);\n      }\n    }\n  };\n\n  const classes = classNames('input-number', className);\n  const formControlClasses = classNames('form-control', 'input-number__input', {\n    'form-control-sm': size === 'sm',\n    'form-control-lg': size === 'lg'\n  });\n  return __jsx(\"div\", {\n    className: classes\n  }, __jsx(\"input\", _extends({\n    className: formControlClasses,\n    type: \"number\",\n    onChange: handleChange,\n    ref: inputRef\n  }, otherProps)), __jsx(\"div\", {\n    className: \"input-number__add\",\n    onMouseDown: handleAddMouseDown\n  }), __jsx(\"div\", {\n    className: \"input-number__sub\",\n    onMouseDown: handleSubMouseDown\n  }));\n}\n\nexport default InputNumber;","map":null,"metadata":{},"sourceType":"module"}