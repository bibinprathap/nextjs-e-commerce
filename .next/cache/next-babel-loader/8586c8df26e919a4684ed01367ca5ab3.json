{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// application\nimport { CategoryFilterBuilder } from '~/fake-server/filters/category-filter-builder';\nimport { CheckFilterBuilder } from '~/fake-server/filters/check-filter-builder';\nimport { clone, delayResponse, error, getFinalUrl } from '~/fake-server/utils';\nimport { ColorFilterBuilder } from '~/fake-server/filters/color-filter-builder';\nimport { getNextReviewId, reviews } from '~/fake-server/database/reviews';\nimport { prepareCategory } from '~/fake-server/endpoints/categories';\nimport { products as dbProducts } from '~/fake-server/database/products';\nimport { RadioFilterBuilder } from '~/fake-server/filters/radio-filter-builder';\nimport { RangeFilterBuilder } from '~/fake-server/filters/range-filter-builder';\nimport { RatingFilterBuilder } from '~/fake-server/filters/rating-filter-builder';\nimport { shopCategoriesList } from '~/fake-server/database/categories';\nimport { VehicleFilterBuilder } from '~/fake-server/filters/vehicle-filter-builder';\nimport { brands } from '~/fake-server/database/brands';\n\nfunction getProducts(shift) {\n  var categorySlug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var shiftValue = shift;\n\n  switch (categorySlug) {\n    case 'tires-wheels':\n    case 'power-tools':\n      shiftValue += 5;\n      break;\n\n    case 'interior-parts':\n    case 'hand-tools':\n      shiftValue += 10;\n      break;\n\n    case 'engine-drivetrain':\n    case 'plumbing':\n      shiftValue += 15;\n      break;\n\n    default:\n  }\n\n  return [].concat(_toConsumableArray(dbProducts.slice(shiftValue)), _toConsumableArray(dbProducts.slice(0, shiftValue)));\n}\n\nexport function getProductsListDUMMY() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var filterValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var filters = [new CategoryFilterBuilder('category', 'Categories'), new VehicleFilterBuilder('vehicle', 'Vehicle'), new RangeFilterBuilder('price', 'Price'), new CheckFilterBuilder('brand', 'Brand'), new RadioFilterBuilder('discount', 'With Discount'), new RatingFilterBuilder('rating', 'Rating'), new ColorFilterBuilder('color', 'Color')];\n  var products = dbProducts.slice(0);\n  filters.forEach(function (filter) {\n    return filter.makeItems(products, filterValues[filter.slug]);\n  }); // Calculate items count for filter values.\n\n  filters.forEach(function (filter) {\n    return filter.calc(filters);\n  }); // Apply filters to products list.\n\n  products = products.filter(function (product) {\n    return filters.reduce(function (mr, filter) {\n      return mr && filter.test(product);\n    }, true);\n  });\n  var page = (options === null || options === void 0 ? void 0 : options.page) || 1;\n  var limit = (options === null || options === void 0 ? void 0 : options.limit) || 16;\n  var sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n  var total = products.length;\n  var pages = Math.ceil(products.length / limit);\n  var from = (page - 1) * limit + 1;\n  var to = Math.min(page * limit, total); // Sort items array.\n\n  products = products.sort(function (a, b) {\n    if (['name_asc', 'name_desc'].includes(sort)) {\n      if (a.name === b.name) {\n        return 0;\n      }\n\n      return (a.name > b.name ? 1 : -1) * (sort === 'name_asc' ? 1 : -1);\n    }\n\n    return 0;\n  });\n  var items = products.slice(from - 1, to);\n  return delayResponse(Promise.resolve({\n    items: items,\n    page: page,\n    limit: limit,\n    sort: sort,\n    total: total,\n    pages: pages,\n    from: from,\n    to: to,\n    products: items,\n    filters: filters.map(function (x) {\n      return x.build();\n    })\n  }), 350);\n}\nexport function getProductsListCache() {\n  return _getProductsListCache.apply(this, arguments);\n}\n\nfunction _getProductsListCache() {\n  _getProductsListCache = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var options,\n        res,\n        products,\n        page,\n        limit,\n        sort,\n        total,\n        pages,\n        from,\n        to,\n        items,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            res = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n            products = []; // dbProducts.slice(0);\n            // filters.forEach((filter) => filter.makeItems(products, filterValues[filter.slug]));\n            // Calculate items count for filter values.\n            // filters.forEach((filter) => filter.calc(filters));\n            // Apply filters to products list.\n            //  products = products.filter((product) => filters.reduce<boolean>((mr, filter) => mr && filter.test(product), true));\n\n            (res || []).map(function (p) {\n              products.push({\n                \"id\": p.ITEMFIND,\n                \"name\": p.descr,\n                \"excerpt\": p.descr,\n                \"description\": p.descr,\n                \"slug\": p.slug,\n                \"sku\": p.ITEMFIND.toString(),\n                \"partNumber\": p.Partno,\n                \"stock\": \"in-stock\",\n                \"price\": p.salesPrice,\n                \"compareAtPrice\": null,\n                \"images\": [p.imagepath],\n                \"badges\": [\"sale\", \"new\", \"hot\"],\n                \"rating\": 4,\n                \"reviews\": 0,\n                \"availability\": \"in-stock\",\n                \"compatibility\": [1, 2],\n                \"type\": {\n                  \"slug\": \"default\",\n                  \"name\": \"Default\",\n                  \"attributeGroups\": []\n                },\n                \"attributes\": [],\n                \"options\": [],\n                \"tags\": [],\n                \"categories\": [],\n                \"customFields\": {}\n              });\n            });\n            page = (options === null || options === void 0 ? void 0 : options.page) || 1;\n            limit = (options === null || options === void 0 ? void 0 : options.limit) || 16;\n            sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n            total = products.length;\n            pages = Math.ceil(products.length / limit);\n            from = (page - 1) * limit + 1;\n            to = Math.min(page * limit, total); // Sort items array.\n\n            products = products.sort(function (a, b) {\n              if (['name_asc', 'name_desc'].includes(sort)) {\n                if (a.name === b.name) {\n                  return 0;\n                }\n\n                return (a.name > b.name ? 1 : -1) * (sort === 'name_asc' ? 1 : -1);\n              }\n\n              return 0;\n            });\n            console.log('getProductsList', JSON.stringify(products[0]));\n            items = products.slice(from - 1, to);\n            console.log(items);\n            return _context.abrupt(\"return\", Promise.resolve({\n              items: items,\n              page: page,\n              limit: limit,\n              sort: sort,\n              total: total,\n              pages: pages,\n              from: from,\n              to: to,\n              products: products,\n              filters: []\n            }));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getProductsListCache.apply(this, arguments);\n}\n\nexport function getProductsList() {\n  return _getProductsList.apply(this, arguments);\n}\n\nfunction _getProductsList() {\n  _getProductsList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var options,\n        filterValues,\n        filters,\n        data,\n        reso,\n        res,\n        products,\n        page,\n        limit,\n        sort,\n        total,\n        pages,\n        from,\n        to,\n        items,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n            filterValues = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            filters = [new CategoryFilterBuilder('category', 'Categories'), new VehicleFilterBuilder('vehicle', 'Vehicle'), new RangeFilterBuilder('price', 'Price'), new CheckFilterBuilder('brand', 'Brand'), new RadioFilterBuilder('discount', 'With Discount'), new RatingFilterBuilder('rating', 'Rating'), new ColorFilterBuilder('color', 'Color')];\n            data = {\n              parem1: filterValues.model || filterValues.filter_model || filterValues.partsCategory || filterValues.filter_slug || filterValues.filter_partsCategory || filterValues.slug,\n              parem2: null,\n              parem3: filterValues.origin || filterValues.filter_origin,\n              parem4: filterValues.makeCode || filterValues.filter_makeCode || filterValues.make,\n              param5: filterValues.page,\n              parem6: filterValues.limit\n            };\n            _context2.next = 6;\n            return fetch(getFinalUrl(\"Portal/searchproducttrade/\"), {\n              method: 'POST',\n              // *GET, POST, PUT, DELETE, etc.\n              mode: 'cors',\n              // no-cors, *cors, same-origin\n              headers: {\n                'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n              },\n              body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n            });\n\n          case 6:\n            reso = _context2.sent;\n            _context2.next = 9;\n            return reso.json().then(function (res) {\n              return Promise.resolve(res); //filters: filters.map((x) => x.build()),\n            })[\"catch\"](function (err) {\n              console.log(err);\n            });\n\n          case 9:\n            res = _context2.sent;\n            products = []; // dbProducts.slice(0);\n            // filters.forEach((filter) => filter.makeItems(products, filterValues[filter.slug]));\n            // Calculate items count for filter values.\n            // filters.forEach((filter) => filter.calc(filters));\n            // Apply filters to products list.\n            //  products = products.filter((product) => filters.reduce<boolean>((mr, filter) => mr && filter.test(product), true));\n\n            (res || []).map(function (p) {\n              products.push({\n                \"id\": p.ITEMFIND,\n                \"name\": p.descr,\n                \"excerpt\": p.descr,\n                \"description\": p.descr,\n                \"slug\": p.slug,\n                \"sku\": p.ITEMFIND.toString(),\n                \"partNumber\": p.Partno,\n                \"stock\": \"in-stock\",\n                \"price\": p.salesPrice,\n                \"compareAtPrice\": null,\n                \"images\": [p.imagepath],\n                \"badges\": [\"sale\", \"new\", \"hot\"],\n                \"rating\": 4,\n                \"reviews\": 0,\n                \"availability\": \"in-stock\",\n                \"compatibility\": [1, 2],\n                \"type\": {\n                  \"slug\": \"default\",\n                  \"name\": \"Default\",\n                  \"attributeGroups\": []\n                },\n                \"attributes\": [],\n                \"options\": [],\n                \"tags\": [],\n                \"categories\": [],\n                \"customFields\": {}\n              });\n            });\n            page = (options === null || options === void 0 ? void 0 : options.page) || 1;\n            limit = (options === null || options === void 0 ? void 0 : options.limit) || 16;\n            sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n            total = products.length;\n            pages = Math.ceil(products.length / limit);\n            from = (page - 1) * limit + 1;\n            to = Math.min(page * limit, total); // Sort items array.\n\n            products = products.sort(function (a, b) {\n              if (['name_asc', 'name_desc'].includes(sort)) {\n                if (a.name === b.name) {\n                  return 0;\n                }\n\n                return (a.name > b.name ? 1 : -1) * (sort === 'name_asc' ? 1 : -1);\n              }\n\n              return 0;\n            });\n            console.log('getProductsList', JSON.stringify(products[0]));\n            items = products.slice(from - 1, to);\n            console.log(items);\n            return _context2.abrupt(\"return\", Promise.resolve({\n              items: items,\n              page: page,\n              limit: limit,\n              sort: sort,\n              total: total,\n              pages: pages,\n              from: from,\n              to: to,\n              products: products,\n              filters: []\n            }));\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getProductsList.apply(this, arguments);\n}\n\nexport function getProductBySlug(_x) {\n  return _getProductBySlug.apply(this, arguments);\n}\n\nfunction _getProductBySlug() {\n  _getProductBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(slug) {\n    var product, data, res, i;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            product = dbProducts.find(function (x) {\n              return x.slug === slug;\n            });\n\n            if (!product) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", Promise.resolve(clone(product)));\n\n          case 3:\n            data = {\n              pvalue: slug\n            };\n            _context3.next = 6;\n            return fetch(getFinalUrl(\"itemmastereditmodetrade/\"), {\n              method: 'POST',\n              // *GET, POST, PUT, DELETE, etc.\n              mode: 'cors',\n              // no-cors, *cors, same-origin\n              headers: {\n                'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n              },\n              body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n            });\n\n          case 6:\n            res = _context3.sent;\n            _context3.next = 9;\n            return res.json().then(function (res) {\n              var product = {}; // dbProducts.slice(0);\n              // filters.forEach((filter) => filter.makeItems(products, filterValues[filter.slug]));\n              // Calculate items count for filter values.\n              // filters.forEach((filter) => filter.calc(filters));\n              // Apply filters to products list.\n              //  products = products.filter((product) => filters.reduce<boolean>((mr, filter) => mr && filter.test(product), true));\n\n              var images = [];\n              (res.jvdetail || []).map(function (i) {\n                images.push(i.imagepath);\n              });\n              (res.csheader || []).map(function (p) {\n                product = {\n                  \"id\": p.Itemid,\n                  \"name\": p.name,\n                  \"excerpt\": p.smalldescription,\n                  \"description\": p.descr,\n                  \"slug\": p.slug,\n                  \"sku\": p.ITEMFIND,\n                  \"partNumber\": p.Partno,\n                  \"stock\": \"in-stock\",\n                  \"price\": p.salesPrice,\n                  \"compareAtPrice\": null,\n                  \"images\": images,\n                  \"badges\": [\"sale\", \"new\", \"hot\"],\n                  \"rating\": 4,\n                  \"reviews\": 0,\n                  \"availability\": \"in-stock\",\n                  \"compatibility\": [1, 2],\n                  \"brand\": brands.find(function (b) {\n                    return b.id == p.cid;\n                  }),\n                  \"type\": {\n                    \"slug\": \"default\",\n                    \"name\": \"Default\",\n                    \"attributeGroups\": [{\n                      \"name\": \"General\",\n                      \"slug\": \"general\",\n                      \"attributes\": [\"brand\", \"Origin\", \"Partno\", \"unit\", \"src\", \"bincard\"]\n                    }]\n                  },\n                  \"attributes\": [{\n                    \"name\": \"Brand\",\n                    \"slug\": \"brand\",\n                    \"featured\": true,\n                    \"values\": [{\n                      \"name\": p.brandName,\n                      \"slug\": p.brandslug\n                    }]\n                  }, {\n                    \"name\": \"Origin\",\n                    \"slug\": \"Origin\",\n                    \"featured\": true,\n                    \"values\": [{\n                      \"name\": p.Origin,\n                      \"slug\": p.Originslug\n                    }]\n                  }, {\n                    \"name\": \"Partno\",\n                    \"slug\": \"Partno\",\n                    \"featured\": true,\n                    \"values\": [{\n                      \"name\": p.Partno,\n                      \"slug\": p.Partno\n                    }]\n                  }, {\n                    \"name\": \"Unit\",\n                    \"slug\": \"unit\",\n                    \"featured\": true,\n                    \"values\": [{\n                      \"name\": p.unit,\n                      \"slug\": p.unit\n                    }]\n                  }, {\n                    \"name\": \"Source\",\n                    \"slug\": \"src\",\n                    \"featured\": true,\n                    \"values\": [{\n                      \"name\": p.categoryname,\n                      \"slug\": p.categoryslug\n                    }]\n                  }, {\n                    \"name\": \"BinCard\",\n                    \"slug\": \"bincard\",\n                    \"featured\": false,\n                    \"values\": [{\n                      \"name\": p.bincard,\n                      \"slug\": p.bincardslug\n                    }]\n                  }],\n                  \"options\": [{\n                    \"type\": \"default\",\n                    \"slug\": \"material\",\n                    \"name\": \"Material\",\n                    \"values\": [{\n                      \"slug\": \"steel\",\n                      \"name\": \"Steel\"\n                    }, {\n                      \"slug\": \"aluminium\",\n                      \"name\": \"Aluminium\"\n                    }, {\n                      \"slug\": \"thorium\",\n                      \"name\": \"Thorium\"\n                    }]\n                  }, {\n                    \"type\": \"color\",\n                    \"slug\": \"color\",\n                    \"name\": \"Color\",\n                    \"values\": [{\n                      \"slug\": \"white\",\n                      \"name\": \"White\",\n                      \"color\": \"#fff\"\n                    }, {\n                      \"slug\": \"yellow\",\n                      \"name\": \"Yellow\",\n                      \"color\": \"#ffd333\"\n                    }, {\n                      \"slug\": \"red\",\n                      \"name\": \"Red\",\n                      \"color\": \"#ff4040\"\n                    }, {\n                      \"slug\": \"blue\",\n                      \"name\": \"Blue\",\n                      \"color\": \"#4080ff\"\n                    }]\n                  }],\n                  \"tags\": [p.brandName, p.categoryname, p.cid, p.Origin, p.Partno],\n                  \"categories\": [{\n                    \"id\": 47,\n                    \"type\": \"shop\",\n                    \"name\": p.gid,\n                    \"slug\": p.gidslug,\n                    \"image\": \"/images/categories/IDLER.jpg\",\n                    \"items\": 106,\n                    \"parent\": null,\n                    \"layout\": \"products\",\n                    \"customFields\": {}\n                  }],\n                  \"customFields\": {}\n                };\n              });\n              console.log('getProductBySlug', JSON.stringify(product));\n\n              if (!product) {\n                return error('Page Not Found');\n              }\n\n              return Promise.resolve(clone(product)); //filters: filters.map((x) => x.build()),\n            })[\"catch\"](function (err) {\n              console.log(err);\n            });\n\n          case 9:\n            i = _context3.sent;\n            return _context3.abrupt(\"return\", i);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getProductBySlug.apply(this, arguments);\n}\n\nexport function getProductReviews(_x2, _x3) {\n  return _getProductReviews.apply(this, arguments);\n}\n\nfunction _getProductReviews() {\n  _getProductReviews = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(productId, options) {\n    var data, reso, res, items, page, limit, sort, total, pages, from, to, fullItems;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            data = {\n              pvalue: productId\n            };\n            _context4.next = 3;\n            return fetch(getFinalUrl(\"itemreviewtrade/\"), {\n              method: 'POST',\n              // *GET, POST, PUT, DELETE, etc.\n              mode: 'cors',\n              // no-cors, *cors, same-origin\n              headers: {\n                'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n              },\n              body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n            });\n\n          case 3:\n            reso = _context4.sent;\n            _context4.next = 6;\n            return reso.json().then(function (res) {\n              return Promise.resolve(res); //filters: filters.map((x) => x.build()),\n            })[\"catch\"](function (err) {\n              console.log(err);\n            });\n\n          case 6:\n            res = _context4.sent;\n            items = [];\n            (res.csheader || []).map(function (p) {\n              items.push({\n                id: p.id,\n                date: new Date(p.createddate).toString(),\n                author: p.name,\n                avatar: '/images/avatars/avatar-1.jpg',\n                rating: p.rating,\n                content: p.reviewcontent\n              });\n            });\n            console.log('getProductReviews', JSON.stringify(items)); //old\n\n            items.sort(function (a, b) {\n              if (a.date > b.date) {\n                return -1;\n              }\n\n              if (a.date < b.date) {\n                return 1;\n              }\n\n              return 0;\n            });\n            page = (options === null || options === void 0 ? void 0 : options.page) || 1;\n            limit = (options === null || options === void 0 ? void 0 : options.limit) || 8;\n            sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n            total = items.length;\n            pages = Math.ceil(items.length / limit);\n            from = (page - 1) * limit + 1;\n            to = page * limit;\n            fullItems = clone(items);\n            items = items.slice(from - 1, to);\n            return _context4.abrupt(\"return\", Promise.resolve({\n              items: items,\n              page: page,\n              limit: limit,\n              sort: sort,\n              total: total,\n              pages: pages,\n              from: from,\n              to: to,\n              products: fullItems\n            }));\n\n          case 21:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getProductReviews.apply(this, arguments);\n}\n\nexport function sendEnquiry(_x4) {\n  return _sendEnquiry.apply(this, arguments);\n}\n\nfunction _sendEnquiry() {\n  _sendEnquiry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(data) {\n    var newdata, res, i;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            newdata = {\n              fullname: data.fullname,\n              phonenumber: data.phonenumber,\n              brand: data.brand,\n              email: data.email,\n              year: data.year,\n              chassis: data.chassis,\n              address: data.address,\n              enquirycontent: data.enquirycontent,\n              createdDate: new Date().toISOString().substr(0, 10),\n              pagename: data.address\n            };\n            _context5.next = 3;\n            return fetch(getFinalUrl(\"Portal/OnlineEnquirytrade/\"), {\n              method: 'POST',\n              // *GET, POST, PUT, DELETE, etc.\n              mode: 'cors',\n              // no-cors, *cors, same-origin\n              headers: {\n                'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n              },\n              body: JSON.stringify(newdata) // body data type must match \"Content-Type\" header\n\n            });\n\n          case 3:\n            res = _context5.sent;\n            _context5.next = 6;\n            return res.json().then(function (res) {\n              console.log(res);\n            })[\"catch\"](function (err) {\n              console.log(err);\n            });\n\n          case 6:\n            i = _context5.sent;\n            return _context5.abrupt(\"return\", Promise.resolve(data));\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _sendEnquiry.apply(this, arguments);\n}\n\nexport function addProductReview(_x5, _x6) {\n  return _addProductReview.apply(this, arguments);\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nfunction _addProductReview() {\n  _addProductReview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(productId, data) {\n    var review, newdata, res, i;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            review = {\n              id: getNextReviewId(),\n              date: new Date().toISOString().substr(0, 10),\n              author: data.author,\n              avatar: '/images/avatars/avatar-2.jpg',\n              rating: data.rating,\n              content: data.content\n            };\n            reviews.push(review);\n            newdata = {\n              cid: productId,\n              ItemDetails3: [{\n                rating: data.rating,\n                name: data.author,\n                email: data.email,\n                createddate: new Date().toISOString().substr(0, 10),\n                reviewcontent: data.content,\n                isEditMode: false\n              }]\n            };\n            _context6.next = 5;\n            return fetch(getFinalUrl(\"submitreviewtrade/\"), {\n              method: 'POST',\n              // *GET, POST, PUT, DELETE, etc.\n              mode: 'cors',\n              // no-cors, *cors, same-origin\n              headers: {\n                'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n              },\n              body: JSON.stringify(newdata) // body data type must match \"Content-Type\" header\n\n            });\n\n          case 5:\n            res = _context6.sent;\n            _context6.next = 8;\n            return res.json().then(function (res) {\n              console.log(res);\n            })[\"catch\"](function (err) {\n              console.log(err);\n            });\n\n          case 8:\n            i = _context6.sent;\n            return _context6.abrupt(\"return\", delayResponse(Promise.resolve(review)));\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _addProductReview.apply(this, arguments);\n}\n\nexport function getProductAnalogs(_x7) {\n  return _getProductAnalogs.apply(this, arguments);\n}\n\nfunction _getProductAnalogs() {\n  _getProductAnalogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(productId) {\n    var data, res, i, slugs, analogs;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            // const slugs: string[] = [\n            //     'sunset-brake-kit',\n            //     'specter-brake-kit',\n            //     'brake-kit',\n            // ];\n            // const analogs: IProduct[] = dbProducts.filter((x) => slugs.includes(x.slug));\n            // return Promise.resolve(clone(analogs));\n            data = {\n              pvalue: productId\n            };\n            _context7.next = 3;\n            return fetch(getFinalUrl(\"searchproductanalogstrade/\"), {\n              method: 'POST',\n              // *GET, POST, PUT, DELETE, etc.\n              mode: 'cors',\n              // no-cors, *cors, same-origin\n              headers: {\n                'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n              },\n              body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n            });\n\n          case 3:\n            res = _context7.sent;\n            _context7.next = 6;\n            return res.json().then(function (res) {\n              //console.log('getProductAnalogs', res);\n              console.log('getProductReviews', JSON.stringify(res));\n              var analogs = []; // dbProducts.slice(0);\n              // filters.forEach((filter) => filter.makeItems(products, filterValues[filter.slug]));\n              // Calculate items count for filter values.\n              // filters.forEach((filter) => filter.calc(filters));\n              // Apply filters to products list.\n              //  products = products.filter((product) => filters.reduce<boolean>((mr, filter) => mr && filter.test(product), true));\n\n              (res.csheader || []).map(function (p) {\n                analogs.push({\n                  \"id\": p.ITEMFIND,\n                  \"name\": p.descr,\n                  \"excerpt\": p.descr,\n                  \"description\": p.descr,\n                  \"slug\": p.slug,\n                  \"sku\": p.ITEMFIND.toString(),\n                  \"partNumber\": p.Partno,\n                  \"stock\": \"in-stock\",\n                  \"price\": p.salesPrice,\n                  \"compareAtPrice\": null,\n                  \"images\": [p.imagepath],\n                  \"badges\": [\"sale\", \"new\", \"hot\"],\n                  \"rating\": 4,\n                  \"reviews\": 0,\n                  \"availability\": \"in-stock\",\n                  \"compatibility\": [1, 2],\n                  \"brand\": brands.find(function (b) {\n                    return b.id == p.cid;\n                  }),\n                  \"type\": {\n                    \"slug\": \"default\",\n                    \"name\": \"Default\",\n                    \"attributeGroups\": [{\n                      \"name\": \"General\",\n                      \"slug\": \"general\",\n                      \"attributes\": [\"brand\", \"Origin\", \"Partno\", \"unit\", \"src\", \"bincard\"]\n                    }]\n                  },\n                  \"attributes\": [{\n                    \"name\": \"Brand\",\n                    \"slug\": \"brand\",\n                    \"featured\": true,\n                    \"values\": [{\n                      \"name\": p.brand,\n                      \"slug\": p.brandslug\n                    }]\n                  }, {\n                    \"name\": \"Origin\",\n                    \"slug\": \"Origin\",\n                    \"featured\": true,\n                    \"values\": [{\n                      \"name\": p.Origin,\n                      \"slug\": p.Originslug\n                    }]\n                  }, {\n                    \"name\": \"Partno\",\n                    \"slug\": \"Partno\",\n                    \"featured\": true,\n                    \"values\": [{\n                      \"name\": p.Partno,\n                      \"slug\": p.Partno\n                    }]\n                  }, {\n                    \"name\": \"Unit\",\n                    \"slug\": \"unit\",\n                    \"featured\": true,\n                    \"values\": [{\n                      \"name\": p.unit,\n                      \"slug\": p.unit\n                    }]\n                  }, {\n                    \"name\": \"Source\",\n                    \"slug\": \"src\",\n                    \"featured\": true,\n                    \"values\": [{\n                      \"name\": p.src,\n                      \"slug\": p.srcslug\n                    }]\n                  }, {\n                    \"name\": \"BinCard\",\n                    \"slug\": \"bincard\",\n                    \"featured\": false,\n                    \"values\": [{\n                      \"name\": p.bincard,\n                      \"slug\": p.bincardslug\n                    }]\n                  }],\n                  \"options\": [{\n                    \"type\": \"default\",\n                    \"slug\": \"material\",\n                    \"name\": \"Material\",\n                    \"values\": [{\n                      \"slug\": \"steel\",\n                      \"name\": \"Steel\"\n                    }, {\n                      \"slug\": \"aluminium\",\n                      \"name\": \"Aluminium\"\n                    }, {\n                      \"slug\": \"thorium\",\n                      \"name\": \"Thorium\"\n                    }]\n                  }, {\n                    \"type\": \"color\",\n                    \"slug\": \"color\",\n                    \"name\": \"Color\",\n                    \"values\": [{\n                      \"slug\": \"white\",\n                      \"name\": \"White\",\n                      \"color\": \"#fff\"\n                    }, {\n                      \"slug\": \"yellow\",\n                      \"name\": \"Yellow\",\n                      \"color\": \"#ffd333\"\n                    }, {\n                      \"slug\": \"red\",\n                      \"name\": \"Red\",\n                      \"color\": \"#ff4040\"\n                    }, {\n                      \"slug\": \"blue\",\n                      \"name\": \"Blue\",\n                      \"color\": \"#4080ff\"\n                    }]\n                  }],\n                  \"tags\": [p.brand, p.gidslug, p.cid, p.Origin, p.Partno],\n                  \"categories\": [{\n                    \"id\": 47,\n                    \"type\": \"shop\",\n                    \"name\": p.gid,\n                    \"slug\": p.gidslug,\n                    \"image\": \"/images/categories/IDLER.jpg\",\n                    \"items\": 106,\n                    \"parent\": null,\n                    \"layout\": \"products\",\n                    \"customFields\": {}\n                  }],\n                  \"customFields\": {}\n                });\n              });\n              Promise.resolve(clone(analogs)); //filters: filters.map((x) => x.build()),\n            })[\"catch\"](function (err) {\n              console.log(err);\n            });\n\n          case 6:\n            i = _context7.sent;\n            slugs = ['brake-kit1'];\n            analogs = dbProducts.filter(function (x) {\n              return slugs.includes(x.slug);\n            });\n            return _context7.abrupt(\"return\", Promise.resolve(clone(analogs)));\n\n          case 10:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getProductAnalogs.apply(this, arguments);\n}\n\nexport function getRelatedProducts(productId, limit) {\n  return Promise.resolve(clone(dbProducts.slice(0, limit)));\n}\nexport function getFeaturedProducts(categorySlug, limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(0, categorySlug).slice(0, limit))), 1000);\n}\nexport function getPopularProducts(categorySlug, limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(6, categorySlug).slice(0, limit))), 1000);\n}\nexport function getTopRatedProducts(categorySlug, limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(12, categorySlug).slice(0, limit))), 1000);\n}\nexport function getSpecialOffers(limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(8).slice(0, limit))), 1000);\n}\nexport function getLatestProducts(limit) {\n  return Promise.resolve(clone(dbProducts.slice(0, limit)));\n}\nexport function getSearchSuggestions(_x8, _x9) {\n  return _getSearchSuggestions.apply(this, arguments);\n}\n\nfunction _getSearchSuggestions() {\n  _getSearchSuggestions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(query, options) {\n    var queryVal, optionsVal, resultProducts, resultCategories, data, reso, res, products;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            queryVal = query.toLowerCase();\n            optionsVal = _objectSpread({\n              limitProducts: 4,\n              limitCategories: 4\n            }, options);\n            resultProducts = dbProducts.filter(function (x) {\n              return x.name.toLowerCase().includes(queryVal);\n            });\n            resultCategories = shopCategoriesList.filter(function (x) {\n              return x.name.toLowerCase().includes(queryVal);\n            });\n\n            if (!(resultProducts.length > 0 || resultCategories.length > 0)) {\n              _context8.next = 8;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", Promise.resolve({\n              products: resultProducts.slice(0, optionsVal.limitProducts),\n              categories: resultCategories.slice(0, optionsVal.limitCategories).map(function (x) {\n                return prepareCategory(x);\n              })\n            }));\n\n          case 8:\n            data = {\n              parem2: queryVal\n            };\n            _context8.next = 11;\n            return fetch(getFinalUrl(\"Portal/searchproducttrade/\"), {\n              method: 'POST',\n              // *GET, POST, PUT, DELETE, etc.\n              mode: 'cors',\n              // no-cors, *cors, same-origin\n              headers: {\n                'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n              },\n              body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n            });\n\n          case 11:\n            reso = _context8.sent;\n            _context8.next = 14;\n            return reso.json().then(function (res) {\n              return Promise.resolve(res); //filters: filters.map((x) => x.build()),\n            })[\"catch\"](function (err) {\n              console.log(err);\n            });\n\n          case 14:\n            res = _context8.sent;\n            products = []; // dbProducts.slice(0);\n            // filters.forEach((filter) => filter.makeItems(products, filterValues[filter.slug]));\n            // Calculate items count for filter values.\n            // filters.forEach((filter) => filter.calc(filters));\n            // Apply filters to products list.\n            //  products = products.filter((product) => filters.reduce<boolean>((mr, filter) => mr && filter.test(product), true));\n\n            (res || []).map(function (p) {\n              products.push({\n                \"id\": p.ITEMFIND,\n                \"name\": p.descr,\n                \"excerpt\": p.descr,\n                \"description\": p.descr,\n                \"slug\": p.slug,\n                \"sku\": p.ITEMFIND.toString(),\n                \"partNumber\": p.Partno,\n                \"stock\": \"in-stock\",\n                \"price\": p.salesPrice,\n                \"compareAtPrice\": null,\n                \"images\": [p.imagepath],\n                \"badges\": [\"sale\", \"new\", \"hot\"],\n                \"rating\": 4,\n                \"reviews\": 0,\n                \"availability\": \"in-stock\",\n                \"compatibility\": [1, 2],\n                \"type\": {\n                  \"slug\": \"default\",\n                  \"name\": \"Default\",\n                  \"attributeGroups\": []\n                },\n                \"attributes\": [],\n                \"options\": [],\n                \"tags\": [],\n                \"categories\": [],\n                \"customFields\": {}\n              });\n            });\n            return _context8.abrupt(\"return\", Promise.resolve({\n              products: products,\n              categories: []\n            }));\n\n          case 18:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _getSearchSuggestions.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}