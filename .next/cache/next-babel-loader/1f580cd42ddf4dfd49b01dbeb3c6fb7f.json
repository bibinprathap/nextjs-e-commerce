{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// react\nimport React from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl'; // application\n\nimport AppImageNew from '~/components/shared/AppImageNew';\nimport AppLink from '~/components/shared/AppLink';\nimport AsyncAction from '~/components/shared/AsyncAction';\nimport CompatibilityStatusBadge from '~/components/shared/CompatibilityStatusBadge';\nimport CurrencyFormat from '~/components/shared/CurrencyFormat';\nimport Rating from '~/components/shared/Rating';\nimport url from '~/services/url';\nimport { useCartAddItem } from '~/store/cart/cartHooks';\nimport { useCompareAddItem } from '~/store/compare/compareHooks';\nimport { useQuickviewOpen } from '~/store/quickview/quickviewHooks';\nimport { useWishlistAddItem } from '~/store/wishlist/wishlistHooks';\nimport { Cart20Svg, Compare16Svg, Quickview16Svg, Wishlist16Svg } from '~/svg';\n\nfunction ProductCard(props) {\n  const {\n    product,\n    layout,\n    exclude = [],\n    className\n  } = props,\n        rootProps = _objectWithoutProperties(props, [\"product\", \"layout\", \"exclude\", \"className\"]);\n\n  const intl = useIntl();\n  const featuredAttributes = product.attributes.filter(x => x.featured);\n  const cartAddItem = useCartAddItem();\n  const quickviewOpen = useQuickviewOpen();\n  const compareAddItem = useCompareAddItem();\n  const wishlistAddItem = useWishlistAddItem();\n\n  const showQuickview = () => quickviewOpen(product.slug);\n\n  const addToWishlist = () => wishlistAddItem(product);\n\n  const addToCompare = () => compareAddItem(product);\n\n  const rootClasses = classNames('product-card', className, {\n    [`product-card--layout--${layout}`]: layout\n  });\n  return __jsx(\"div\", _extends({\n    className: rootClasses\n  }, rootProps), __jsx(\"div\", {\n    className: \"product-card__actions-list\"\n  }, __jsx(AsyncAction, {\n    action: () => showQuickview(),\n    render: ({\n      run,\n      loading\n    }) => __jsx(\"button\", {\n      type: \"button\",\n      className: classNames('product-card__action product-card__action--quickview', {\n        'product-card__action--loading': loading\n      }),\n      \"aria-label\": intl.formatMessage({\n        id: 'BUTTON_QUICKVIEW'\n      }),\n      onClick: run\n    }, __jsx(Quickview16Svg, null))\n  }), !exclude.includes('actions') && __jsx(React.Fragment, null, __jsx(AsyncAction, {\n    action: () => addToWishlist(),\n    render: ({\n      run,\n      loading\n    }) => __jsx(\"button\", {\n      type: \"button\",\n      className: classNames('product-card__action product-card__action--wishlist', {\n        'product-card__action--loading': loading\n      }),\n      \"aria-label\": intl.formatMessage({\n        id: 'BUTTON_ADD_TO_WISHLIST'\n      }),\n      onClick: run\n    }, __jsx(Wishlist16Svg, null))\n  }), __jsx(AsyncAction, {\n    action: () => addToCompare(),\n    render: ({\n      run,\n      loading\n    }) => __jsx(\"button\", {\n      type: \"button\",\n      className: classNames('product-card__action product-card__action--compare', {\n        'product-card__action--loading': loading\n      }),\n      \"aria-label\": intl.formatMessage({\n        id: 'BUTTON_ADD_TO_COMPARE'\n      }),\n      onClick: run\n    }, __jsx(Compare16Svg, null))\n  }))), __jsx(\"div\", {\n    className: \"product-card__image\"\n  }, __jsx(\"div\", {\n    className: \"image image--type--product\"\n  }, __jsx(AppLink, {\n    href: url.product(product),\n    className: \"image__body\"\n  }, product.images && __jsx(AppImageNew, {\n    className: \"image__tag\",\n    src: product.images[0]\n  }))), !exclude.includes('status-badge') && __jsx(CompatibilityStatusBadge, {\n    className: \"product-card__fit\",\n    product: product\n  })), __jsx(\"div\", {\n    className: \"product-card__info\"\n  }, !exclude.includes('meta') && __jsx(\"div\", {\n    className: \"product-card__meta\"\n  }, __jsx(\"span\", {\n    className: \"product-card__meta-title\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_SKU\"\n  }), ': '), product.sku), __jsx(\"div\", {\n    className: \"product-card__name\"\n  }, product.badges && product.badges.length > 0 && __jsx(\"div\", {\n    className: \"product-card__badges\"\n  }, product.badges.map(badge => __jsx(\"div\", {\n    key: badge,\n    className: `tag-badge tag-badge--${badge}`\n  }, badge))), __jsx(AppLink, {\n    href: url.product(product)\n  }, product.name)), __jsx(\"div\", {\n    className: \"product-card__rating\"\n  }, __jsx(Rating, {\n    className: \"product-card__rating-stars\",\n    value: product.rating || 0\n  }), __jsx(\"div\", {\n    className: \" product-card__rating-label\"\n  }, __jsx(FormattedMessage, {\n    id: \"TEXT_RATING_LABEL\",\n    values: {\n      rating: product.rating,\n      reviews: product.reviews\n    }\n  }))), !exclude.includes('features') && featuredAttributes.length > 0 && __jsx(\"div\", {\n    className: \"product-card__features\"\n  }, __jsx(\"ul\", null, featuredAttributes.map((attribute, index) => __jsx(\"li\", {\n    key: index\n  }, attribute.name, ': ', attribute.values.map(x => x.name).join(', ')))))), __jsx(\"div\", {\n    className: \"product-card__footer\"\n  }, __jsx(\"div\", {\n    className: \"product-card__prices\"\n  }, product.compareAtPrice !== null && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"product-card__price product-card__price--new\"\n  }, __jsx(CurrencyFormat, {\n    value: product.price\n  })), __jsx(\"div\", {\n    className: \"product-card__price product-card__price--old\"\n  }, __jsx(CurrencyFormat, {\n    value: product.compareAtPrice\n  }))), product.compareAtPrice === null && __jsx(\"div\", {\n    className: \"product-card__price product-card__price--current\"\n  }, __jsx(CurrencyFormat, {\n    value: product.price\n  }))), !exclude.includes('buttons') && __jsx(React.Fragment, null, __jsx(AsyncAction, {\n    action: () => cartAddItem(product),\n    render: ({\n      run,\n      loading\n    }) => __jsx(\"button\", {\n      type: \"button\",\n      className: classNames('product-card__addtocart-icon', {\n        'product-card__addtocart-icon--loading': loading\n      }),\n      \"aria-label\": intl.formatMessage({\n        id: 'BUTTON_ADD_TO_CART'\n      }),\n      onClick: run\n    }, __jsx(Cart20Svg, null))\n  }), !exclude.includes('list-buttons') && __jsx(React.Fragment, null, __jsx(AsyncAction, {\n    action: () => cartAddItem(product),\n    render: ({\n      run,\n      loading\n    }) => __jsx(\"button\", {\n      type: \"button\",\n      className: classNames('product-card__addtocart-full', {\n        'product-card__addtocart-full--loading': loading\n      }),\n      onClick: run\n    }, __jsx(FormattedMessage, {\n      id: \"BUTTON_ADD_TO_CART\"\n    }))\n  }), __jsx(AsyncAction, {\n    action: () => addToWishlist(),\n    render: ({\n      run,\n      loading\n    }) => __jsx(\"button\", {\n      type: \"button\",\n      className: classNames('product-card__wishlist', {\n        'product-card__wishlist--loading': loading\n      }),\n      onClick: run\n    }, __jsx(Wishlist16Svg, null), __jsx(\"span\", null, __jsx(FormattedMessage, {\n      id: \"BUTTON_ADD_TO_WISHLIST\"\n    })))\n  }), __jsx(AsyncAction, {\n    action: () => addToCompare(),\n    render: ({\n      run,\n      loading\n    }) => __jsx(\"button\", {\n      type: \"button\",\n      className: classNames('product-card__compare', {\n        'product-card__compare--loading': loading\n      }),\n      onClick: run\n    }, __jsx(Compare16Svg, null), __jsx(\"span\", null, __jsx(FormattedMessage, {\n      id: \"BUTTON_ADD_TO_COMPARE\"\n    })))\n  })))));\n}\n\nexport default React.memo(ProductCard);","map":null,"metadata":{},"sourceType":"module"}