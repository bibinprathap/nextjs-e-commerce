{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { products as dbProducts } from '~/fake-server/database/products';\nexport class RangeFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"min\", void 0);\n\n    _defineProperty(this, \"max\", void 0);\n\n    _defineProperty(this, \"value\", void 0);\n  }\n\n  test(product) {\n    const value = this.extractValue(product);\n    return value >= this.value[0] && value <= this.value[1];\n  }\n\n  parseValue(value) {\n    return value.split('-').map(x => parseFloat(x));\n  }\n\n  makeItems(products, value) {\n    this.max = dbProducts.reduce((acc, product) => Math.max(acc, this.extractValue(product)), 0);\n    this.min = dbProducts.reduce((acc, product) => Math.min(acc, this.extractValue(product)), this.max);\n    /** Calculates the number of digits for rounding. */\n\n    let digit = Math.max(Math.ceil(this.max).toString().length - 2, 1);\n    digit = 10 ** digit;\n    this.max = Math.ceil(this.max / digit) * digit;\n    this.min = Math.floor(this.min / digit) * digit;\n    this.value = [this.min, this.max];\n\n    if (value) {\n      this.value = this.parseValue(value);\n    }\n  }\n\n  calc() {}\n\n  extractValue(product) {\n    if (this.slug === 'price') {\n      return product.price;\n    }\n\n    throw Error();\n  }\n\n  build() {\n    return {\n      type: 'range',\n      slug: this.slug,\n      name: this.name,\n      min: this.min,\n      max: this.max,\n      value: this.value\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}