{"ast":null,"code":"// react\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'; // third-party\n\nimport { useDispatch, useSelector } from 'react-redux'; // application\n\nexport function useAppAction(action) {\n  const dispatch = useDispatch();\n  return useCallback((...args) => dispatch(action(...args)), []);\n}\nexport function useAppSelector(selector) {\n  return useSelector(selector);\n}\nexport function useMedia(query) {\n  if (!false) {\n    return false;\n  }\n\n  const media = useMemo(() => window.matchMedia(query), [query]);\n  const {\n    0: state,\n    1: setState\n  } = useState(media.matches);\n  useEffect(() => {\n    const onChangeMedia = () => {\n      setState(media.matches);\n    };\n\n    if (media.addEventListener) {\n      media.addEventListener('change', onChangeMedia);\n    } else {\n      // noinspection JSDeprecatedSymbols\n      media.addListener(onChangeMedia);\n    }\n\n    return () => {\n      if (media.removeEventListener) {\n        media.removeEventListener('change', onChangeMedia);\n      } else {\n        // noinspection JSDeprecatedSymbols\n        media.removeListener(onChangeMedia);\n      }\n    };\n  }, [media]);\n  return state;\n}\nexport function useAsyncAction(action, deps = []) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const run = useMemo(() => (...args) => {\n    if (loading) {\n      return;\n    }\n\n    setLoading(true);\n    action(...args).then(() => {\n      setLoading(false);\n    });\n  }, [loading, setLoading, ...deps]);\n  return useMemo(() => [run, loading], [run, loading]);\n}\nexport function useIsUnmountedRef() {\n  const isUnmountedRef = useRef(false);\n  useEffect(() => {\n    isUnmountedRef.current = false;\n    return () => {\n      isUnmountedRef.current = true;\n    };\n  }, []);\n  return isUnmountedRef;\n}","map":null,"metadata":{},"sourceType":"module"}