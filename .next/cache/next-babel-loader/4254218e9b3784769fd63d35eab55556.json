{"ast":null,"code":"var __jsx = React.createElement;\n// react\nimport React from 'react'; // third-party\n\nimport classNames from 'classnames'; // application\n\nimport { ArrowRoundedLeft7x11Svg, ArrowRoundedRight7x11Svg } from '~/svg';\n\nfunction Pagination(props) {\n  var _props$siblings = props.siblings,\n      siblings = _props$siblings === void 0 ? 1 : _props$siblings,\n      _props$current = props.current,\n      current = _props$current === void 0 ? 1 : _props$current,\n      _props$total = props.total,\n      total = _props$total === void 0 ? 1 : _props$total,\n      onPageChange = props.onPageChange;\n\n  var setPage = function setPage(value) {\n    if (value < 1 || value > total || value === current) {\n      return;\n    }\n\n    if (onPageChange) {\n      onPageChange(value);\n    }\n  };\n\n  var getPages = function getPages() {\n    var pages = [];\n    var min = Math.max(1, current - siblings - Math.max(0, siblings - total + current));\n    var max = Math.min(total, min + siblings * 2);\n\n    for (var i = 1; i <= Math.min(min - 1, 1); i += 1) {\n      pages.push(i);\n    }\n\n    if (min - 1 >= 3) {\n      pages.push(0);\n    } else if (min - 1 >= 2) {\n      pages.push(min - 1);\n    }\n\n    for (var _i = min; _i <= max; _i += 1) {\n      pages.push(_i);\n    }\n\n    if (max + 1 <= total - 2) {\n      pages.push(0);\n    } else if (max + 1 <= total - 1) {\n      pages.push(max + 1);\n    }\n\n    for (var _i2 = Math.max(max + 1, total); _i2 <= total; _i2 += 1) {\n      pages.push(_i2);\n    }\n\n    return pages;\n  };\n\n  return __jsx(\"ul\", {\n    className: \"pagination\"\n  }, __jsx(\"li\", {\n    className: classNames('page-item', {\n      disabled: current <= 1\n    })\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"page-link page-link--with-arrow\",\n    \"aria-label\": \"Previous\",\n    onClick: function onClick() {\n      return setPage(current - 1);\n    }\n  }, __jsx(\"span\", {\n    className: \"page-link__arrow page-link__arrow--left\",\n    \"aria-hidden\": \"true\"\n  }, __jsx(ArrowRoundedLeft7x11Svg, null)))), getPages().map(function (page) {\n    return __jsx(React.Fragment, {\n      key: page\n    }, page !== 0 && __jsx(\"li\", {\n      className: classNames('page-item', {\n        active: page === current\n      }),\n      \"aria-current\": page === current ? 'page' : undefined\n    }, page !== current && __jsx(\"button\", {\n      type: \"button\",\n      className: \"page-link\",\n      onClick: function onClick() {\n        return setPage(page);\n      }\n    }, page), page === current && __jsx(\"span\", {\n      className: \"page-link\"\n    }, page, __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \"(current)\"))), page === 0 && __jsx(\"li\", {\n      className: \"page-item page-item--dots\"\n    }, __jsx(\"div\", {\n      className: \"pagination__dots\"\n    })));\n  }), __jsx(\"li\", {\n    className: classNames('page-item', {\n      disabled: current >= total\n    })\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"page-link page-link--with-arrow\",\n    \"aria-label\": \"Next\",\n    onClick: function onClick() {\n      return setPage(current + 1);\n    }\n  }, __jsx(\"span\", {\n    className: \"page-link__arrow page-link__arrow--right\",\n    \"aria-hidden\": \"true\"\n  }, __jsx(ArrowRoundedRight7x11Svg, null)))));\n}\n\nexport default Pagination;","map":null,"metadata":{},"sourceType":"module"}